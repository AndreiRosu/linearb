{"version":3,"file":"gitstream-core-js.esm.js","sources":["../src/gitstream-validators/const.ts","../src/gitstream-validators/validators/Base/Base.ts","../src/gitstream-validators/errors.ts","../src/gitstream-validators/validators/ContextValidator/ContextValidators.ts","../src/gitstream-validators/validators/FiltersValidators/FiltersValidators.ts","../src/gitstream-validators/validators/ActionsValidator/ActionsValiator.ts","../src/gitstream-validators/validators/FileStructureValidator/FileStructureValidator.ts","../src/gitstream-validators/validators/SavedWordsValidator/SavedWordsValidator.ts","../src/gitstream-validators/validators/TriggersValidator/TriggersValidator.ts","../src/gitstream-validators/validators/CMValidator/CMValidator.ts"],"sourcesContent":["export const SUPPORTED_TRIGGERS = {\n  COMMIT: 'commit',\n  PR_CREATED: 'pr_created',\n  COMMENT_ADDED: 'comment_added',\n  LABEL_ADDED: 'label_added',\n  LABEL_REMOVED: 'label_removed',\n};\n\nexport const SUPPORTED_ACTIONS = {\n  EXPLAIN_CODE_EXPERTS: 'explain-code-experts@v1',\n  ADD_COMMENT: 'add-comment@v1',\n  ADD_LABEL: 'add-label@v1',\n  ADD_LABELS: 'add-labels@v1',\n  ADD_REVIEWERS: 'add-reviewers@v1',\n  APPROVE: 'approve@v1',\n  MERGE: 'merge@v1',\n  SET_REQUIRED_APPROVALS: 'set-required-approvals@v1',\n  REQUIRE_REVIEWER: 'require-reviewers@v1',\n  REQUEST_CHANGES: 'request-changes@v1',\n  UPDATE_CHECK: 'update-check@v1',\n  CLOSE: 'close@v1',\n  HTTP_REQUEST: 'http-request@v1',\n  INVOKE_GITHUB_ACTION: 'invoke-github-action@v1',\n};\n\nexport const SUPPORTED_ACTIONS_BY_PROVIDER = {\n  default: SUPPORTED_ACTIONS,\n  gitlab: {\n    ADD_COMMENT: 'add-comment@v1',\n    ADD_LABEL: 'add-label@v1',\n    ADD_LABELS: 'add-labels@v1',\n    ADD_REVIEWERS: 'add-reviewers@v1',\n    APPROVE: 'approve@v1',\n    MERGE: 'merge@v1',\n    CLOSE: 'close@v1',\n    EXPLAIN_CODE_EXPERTS: 'explain-code-experts@v1',\n  },\n};\n\nexport const SUPPORTED_ARGUMENTS_BY_ACTION = {\n  [SUPPORTED_ACTIONS.EXPLAIN_CODE_EXPERTS]: ['lt', 'gt'],\n  [SUPPORTED_ACTIONS.ADD_COMMENT]: ['comment', 'pin_uid'],\n  [SUPPORTED_ACTIONS.ADD_LABEL]: ['label', 'color'],\n  [SUPPORTED_ACTIONS.ADD_LABELS]: ['labels'],\n  [SUPPORTED_ACTIONS.ADD_REVIEWERS]: [\n    'reviewers',\n    'team_reviewers',\n    'unless_reviewers_set',\n    'fail_on_error',\n  ],\n  [SUPPORTED_ACTIONS.MERGE]: [\n    'wait_for_all_checks',\n    'rebase_on_merge',\n    'squash_on_merge',\n  ],\n  [SUPPORTED_ACTIONS.SET_REQUIRED_APPROVALS]: ['approvals'],\n  [SUPPORTED_ACTIONS.REQUEST_CHANGES]: ['comment'],\n  [SUPPORTED_ACTIONS.REQUIRE_REVIEWER]: [\n    'reviewers',\n    'also_assign',\n    'team_reviewers',\n    'fail_on_error',\n  ],\n  [SUPPORTED_ACTIONS.HTTP_REQUEST]: [\n    'url',\n    'method',\n    'user',\n    'body',\n    'timeout',\n    'headers',\n  ],\n  [SUPPORTED_ACTIONS.INVOKE_GITHUB_ACTION]: [\n    'owner',\n    'repo',\n    'workflow',\n    'ref',\n    'inputs',\n    'check_name',\n  ],\n  [SUPPORTED_ACTIONS.UPDATE_CHECK]: ['check_name', 'status', 'conclusion'],\n};\n\nexport const REQUIRED_ARGUMENTS_BY_ACTIONS = {\n  [SUPPORTED_ACTIONS.EXPLAIN_CODE_EXPERTS]: { all: false, args: ['lt', 'gt'] },\n  [SUPPORTED_ACTIONS.ADD_COMMENT]: { all: true, args: ['comment'] },\n  [SUPPORTED_ACTIONS.ADD_LABEL]: { all: true, args: ['label'] },\n  [SUPPORTED_ACTIONS.ADD_LABELS]: { all: true, args: ['labels'] },\n  [SUPPORTED_ACTIONS.ADD_REVIEWERS]: {\n    all: false,\n    args: ['reviewers', 'team_reviewers'],\n  },\n  [SUPPORTED_ACTIONS.SET_REQUIRED_APPROVALS]: {\n    all: true,\n    args: ['approvals'],\n  },\n  [SUPPORTED_ACTIONS.REQUEST_CHANGES]: { all: true, args: ['comment'] },\n  [SUPPORTED_ACTIONS.REQUIRE_REVIEWER]: {\n    all: false,\n    args: ['reviewers', 'team_reviewers'],\n  },\n  [SUPPORTED_ACTIONS.HTTP_REQUEST]: { all: true, args: ['url'] },\n  [SUPPORTED_ACTIONS.INVOKE_GITHUB_ACTION]: {\n    all: false,\n    args: ['owner', 'repo', 'workflow', 'ref'],\n  },\n  [SUPPORTED_ACTIONS.UPDATE_CHECK]: {\n    all: true,\n    args: ['check_name', 'status', 'conclusion'],\n  },\n};\n\nexport const VALID_CONTEXT_VARS: string[] = [\n  'branch',\n  'branch.name',\n  'branch.base',\n  'branch.diff.size',\n  'branch.diff.files_metadata',\n  'branch.num_of_commits',\n  'files',\n  'pr',\n  'pr.approvals',\n  'pr.author',\n  'pr.author_teams',\n  'pr.checks',\n  'pr.comments',\n  'pr.conversations',\n  'pr.created_at',\n  'pr.draft',\n  'pr.description',\n  'pr.labels',\n  'pr.provider',\n  'pr.reviewers',\n  'pr.status',\n  'pr.target',\n  'pr.title',\n  'pr.requested_changes',\n  'pr.reviews',\n  'pr.updated_at',\n  'repo',\n  'repo.git_activity',\n  'repo.age',\n  'repo.author_age',\n  'repo.blame',\n  'repo.contributors',\n  'repo.name',\n  'repo.owner',\n  'source',\n  'source.diff.files',\n];\n\nexport const VALID_FILTERS: Record<string, string[]> = {\n  every: ['list'],\n  filter: ['list', 'regex', 'term'],\n  includes: ['list', 'regex', 'term'],\n  map: ['list', 'attr'],\n  match: ['list', 'regex', 'term', 'attr'],\n  nope: [],\n  reject: ['list', 'regex', 'term'],\n  some: ['list'],\n  allDocs: [],\n  allImages: [],\n  allTests: [],\n  codeExperts: ['gt', 'lt'],\n  estimatedReviewTime: [],\n  extensions: [],\n  extractJitFindings: [],\n  extractSonarFindings: [],\n  explainCodeExperts: ['gt', 'lt'],\n  explainRankByGitBlame: ['gt', 'lt'],\n  isFirstCommit: [],\n  isFormattingChange: [],\n  mapToEnum: [],\n  matchDiffLines: ['regex', 'ignoreWhiteSpaces'],\n  rankByGitActivity: ['gt', 'lt'],\n  rankByGitBlame: ['gt', 'lt'],\n  intersection: ['list'],\n  difference: ['list'],\n};\n\nexport const JINJA_FILTERS: string[] = [\n  'abs',\n  'attr',\n  'batch',\n  'capitalize',\n  'center',\n  'default',\n  'dictsort',\n  'escape',\n  'filesizeformat',\n  'first',\n  'float',\n  'forceescape',\n  'format',\n  'groupby',\n  'indent',\n  'int',\n  'join',\n  'last',\n  'length',\n  'list',\n  'lower',\n  'map',\n  'max',\n  'min',\n  'pprint',\n  'random',\n  'reject',\n  'rejectattr',\n  'replace',\n  'reverse',\n  'round',\n  'safe',\n  'select',\n  'selectattr',\n  'slice',\n  'sort',\n  'split',\n  'string',\n  'striptags',\n  'sum',\n  'title',\n  'trim',\n  'truncate',\n  'unique',\n  'upper',\n  'urlencode',\n  'urlize',\n  'wordcount',\n  'wordwrap',\n  'xmlattr',\n  'nl2br',\n  'dump',\n];\n\nexport const VALID_VERSIONS: number[] = [1.0];\n\nexport const VALID_ACTIONS = {\n  [SUPPORTED_ACTIONS.ADD_COMMENT]: {\n    comment: { type: 'string', required: true },\n  },\n  [SUPPORTED_ACTIONS.ADD_LABEL]: {\n    label: { type: 'string', required: true },\n    color: { type: 'string', required: false },\n  },\n  [SUPPORTED_ACTIONS.ADD_LABELS]: {\n    labels: { type: 'array', required: true },\n  },\n  [SUPPORTED_ACTIONS.ADD_REVIEWERS]: {\n    reviewers: { type: 'array', required: true },\n    team_reviewers: { type: 'array', required: false },\n    unless_reviewers_set: { type: 'boolean', required: false },\n    fail_on_error: { type: 'boolean', required: false },\n  },\n  [SUPPORTED_ACTIONS.APPROVE]: {},\n  [SUPPORTED_ACTIONS.CLOSE]: {},\n  [SUPPORTED_ACTIONS.MERGE]: {\n    wait_for_all_checks: { type: 'boolean', required: false },\n    rebase_on_merge: { type: 'boolean', required: false },\n    squash_on_merge: { type: 'boolean', required: false },\n  },\n  [SUPPORTED_ACTIONS.SET_REQUIRED_APPROVALS]: {\n    approvals: { type: 'number', required: true },\n  },\n  [SUPPORTED_ACTIONS.REQUEST_CHANGES]: {\n    comment: { type: 'string', required: true },\n  },\n  [SUPPORTED_ACTIONS.REQUIRE_REVIEWER]: {\n    reviewers: { type: 'array', required: true },\n    also_assign: { type: 'boolean', required: false },\n  },\n  [SUPPORTED_ACTIONS.EXPLAIN_CODE_EXPERTS]: {\n    lt: { type: 'number', required: false },\n    gt: { type: 'number', required: false },\n  },\n  [SUPPORTED_ACTIONS.INVOKE_GITHUB_ACTION]: {\n    owner: { type: 'string', required: true },\n    repo: { type: 'string', required: true },\n    workflow: { type: 'string', required: true },\n    ref: { type: 'string', required: true },\n    inputs: { type: 'number', required: false },\n    check_name: { type: 'string', required: false },\n  },\n};\n\nexport const CM_SCHEMA = {\n  type: 'object',\n  properties: {\n    manifest: {\n      type: 'object',\n      properties: {\n        version: { type: 'number', enum: VALID_VERSIONS },\n      },\n      required: ['version'],\n    },\n    config: {\n      type: 'object',\n      properties: {\n        ignore_files: { type: 'array', items: { type: 'string' } },\n        ignore_repositories: { type: 'array', items: { type: 'string' } },\n        // user_mapping: { type: 'array', items: { type: 'array' } },\n        admin: {\n          type: 'object',\n          properties: {\n            users: { type: 'array', items: { type: 'string' } },\n          },\n        },\n      },\n    },\n    on: {\n      type: 'array',\n      items: { type: 'string', enum: Object.values(SUPPORTED_TRIGGERS) },\n    },\n    automations: {\n      type: 'object',\n      patternProperties: {\n        '^[a-zA-Z0-9_@]+$': {\n          type: 'object',\n          properties: {\n            on: {\n              type: 'array',\n              items: {\n                type: 'string',\n                enum: Object.values(SUPPORTED_TRIGGERS),\n              },\n            },\n            if: { type: 'array' },\n            run: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  action: {\n                    type: 'string',\n                    enum: Object.keys(VALID_ACTIONS),\n                  },\n                  args: { type: 'object' },\n                },\n                required: ['action'],\n              },\n            },\n          },\n          required: ['if', 'run'],\n        },\n      },\n    },\n  },\n  required: ['manifest', 'automations'],\n};\n\nexport const JINJA_EXPRESSION_REGEX = /{{.*?}}/g;\nexport const REGEX_EXPRESSION = /\\/(.*?)\\//g;\n","import { JINJA_EXPRESSION_REGEX } from '../../const';\n\nclass ValidatorBase {\n  validate(_args: any) {\n    throw new Error('Abstract method \"validate\" must be implemented.');\n  }\n\n  static parseJinjaExpressions(cmFile: string) {\n    const lines = cmFile.split('\\n');\n    const jinjaExpressions: any = [];\n    lines.forEach((line: any, i: number) => {\n      const matches = line.match(JINJA_EXPRESSION_REGEX);\n      if (matches) {\n        matches.forEach((match: any) => {\n          jinjaExpressions.push({ expression: match, lineNumber: i + 1 });\n        });\n      }\n    });\n    return jinjaExpressions;\n  }\n}\n\nexport default ValidatorBase;\n","export class ValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n","import { VALID_CONTEXT_VARS } from '../../const';\nimport { ValidationError } from '../../errors';\nimport { Expression } from '../../types';\nimport ValidatorBase from '../Base';\n\nconst UNKNOWN_CONTEXT = 'UNKNOWN_CONTEXT';\n\nexport class ContextVariableValidator extends ValidatorBase {\n  isValidCustomVariables(customVariable: string, yamlFile: string) {\n    const customs = customVariable.split('.').slice(0, -1);\n    return customs\n      .map(custom => custom.replace(/[()]/g, ''))\n      .every(custom => yamlFile.includes(`${custom}:`));\n  }\n  isValidContextVariable(contextVariable: string) {\n    if (!VALID_CONTEXT_VARS.includes(contextVariable || UNKNOWN_CONTEXT)) {\n      return false;\n    }\n    return true;\n  }\n\n  validate(args: any): void {\n    const { expressions, yamlFile } = args;\n    const expressionsFromCM =\n      expressions ?? ValidatorBase.parseJinjaExpressions(yamlFile);\n    expressionsFromCM.forEach(({ expression, lineNumber }: Expression) => {\n      const exspressionFilters = expression.replace(/[{}]/g, '').split('|');\n      const contextVariable =\n        exspressionFilters.shift()?.trim() ?? UNKNOWN_CONTEXT;\n      const multipleVariable = contextVariable?.split(' ') ?? [];\n      multipleVariable.forEach(variable => {\n        if (\n          !this.isValidContextVariable(variable) &&\n          !this.isValidCustomVariables(variable, yamlFile)\n        ) {\n          throw new ValidationError(\n            `Line [${lineNumber}]: Invalid context variable ${variable} in expression ${expression}`\n          );\n        }\n      });\n    });\n  }\n}\n","import {\n  JINJA_FILTERS,\n  REGEX_EXPRESSION,\n  VALID_CONTEXT_VARS,\n  VALID_FILTERS,\n} from '../../const';\nimport { ValidationError } from '../../errors';\nimport { Expression } from '../../types';\nimport ValidatorBase from '../Base';\n\nexport class FiltersValidator extends ValidatorBase {\n  validateExistingFilter(\n    filterName: string,\n    lineNumber: number,\n    expression: string\n  ) {\n    if (\n      JINJA_FILTERS.includes(filterName) ||\n      VALID_CONTEXT_VARS.includes(filterName)\n    ) {\n      return;\n    }\n    if (!Object.keys(VALID_FILTERS).includes(filterName)) {\n      throw new ValidationError(\n        `Line ${lineNumber}: Invalid filter function ${filterName} in expression ${expression}`\n      );\n    }\n  }\n\n  getFilterArgs(filter: string): string[] {\n    return filter\n      .slice(filter.indexOf('(') + 1, filter.lastIndexOf(')'))\n      .replace(REGEX_EXPRESSION, '')\n      .split(',')\n      .map(arg => arg.split('=')[0].trim());\n  }\n\n  validateFilterArgs(\n    filter: string,\n    filterName: string,\n    lineNumber: number,\n    expression: string\n  ) {\n    if (filter.includes('(')) {\n      const filterArgs = this.getFilterArgs(filter);\n      const validFilterArgs = VALID_FILTERS[filterName];\n      for (const arg of filterArgs) {\n        if (!validFilterArgs.includes(arg)) {\n          throw new ValidationError(\n            `Line [${lineNumber}]: Invalid argument ${arg} for filter ${filterName} in expression ${expression}`\n          );\n        }\n      }\n    }\n  }\n\n  validate(args: any): void {\n    const { expressions, yamlFile } = args;\n    const expressionsFromCM =\n      expressions ?? ValidatorBase.parseJinjaExpressions(yamlFile);\n    expressionsFromCM.forEach(({ expression, lineNumber }: Expression) => {\n      const exspressionFilters =\n        expression\n          .replace(REGEX_EXPRESSION, '')\n          .replace(/[{}]/g, '')\n          .split('|')\n          .slice(1) ?? [];\n      for (const filter of exspressionFilters) {\n        const formattedFilter = filter.split(/\\s*==\\s*|\\s*<\\s*|\\s*>\\s*/)[0];\n        const [filterNameWithArgs] = formattedFilter.split('(');\n        const filterName = filterNameWithArgs.trim();\n        this.validateExistingFilter(filterName, lineNumber, expression);\n        this.validateFilterArgs(\n          formattedFilter,\n          filterName,\n          lineNumber,\n          expression\n        );\n      }\n    });\n  }\n}\n","import {\n  JINJA_EXPRESSION_REGEX,\n  REQUIRED_ARGUMENTS_BY_ACTIONS,\n  SUPPORTED_ACTIONS,\n  SUPPORTED_ARGUMENTS_BY_ACTION,\n} from '../../const';\nimport { ValidationError } from '../../errors';\nimport { Action } from '../../types';\nimport ValidatorBase from '../Base';\nimport * as yaml from 'js-yaml';\n\nexport class ActionsValidator extends ValidatorBase {\n  validateActionSupported(action: string) {\n    if (!Object.values(SUPPORTED_ACTIONS).includes(action)) {\n      throw new ValidationError(`Action is not supported ${action}`);\n    }\n  }\n  validateArgSupported(action: string, args: string[]) {\n    const unsupportedArgs = args?.filter(\n      arg => !SUPPORTED_ARGUMENTS_BY_ACTION[action].includes(arg)\n    );\n    if (unsupportedArgs.length) {\n      throw new ValidationError(\n        `Some args are not supported:  ${unsupportedArgs.join(', ')}`\n      );\n    }\n  }\n  validateRequiredArgs(action: string, args: string[]) {\n    const required = REQUIRED_ARGUMENTS_BY_ACTIONS[action];\n    if (!required) {\n      return;\n    }\n    const missingArgs = required.args?.filter(arg => !args.includes(arg));\n    if (\n      (required.all && missingArgs.length) ||\n      (!required.all && !required.args.some(arg => args.includes(arg)))\n    ) {\n      throw new ValidationError(\n        `Some required args are missing for action ${action}: ${missingArgs.join(\n          ', '\n        )}`\n      );\n    }\n  }\n\n  validate(args: any) {\n    const { yamlFile } = args;\n    const safeYamlFile = yamlFile.replace(JINJA_EXPRESSION_REGEX, 'TEMPLATE');\n    const yamlLoaded: any = yaml.load(safeYamlFile);\n    const actions: Action[] = Object.values(yamlLoaded.automations)\n      .flatMap((automation: any) => automation.run)\n      ?.filter(Boolean);\n\n    for (const actionElement of actions) {\n      const { action, args: actionArgs } = actionElement;\n      const existingArgsList = Object.keys(actionArgs ?? {});\n      this.validateActionSupported(action);\n      if (existingArgsList.length) {\n        this.validateArgSupported(action, existingArgsList);\n      }\n      this.validateRequiredArgs(action, existingArgsList);\n    }\n  }\n}\n","import ValidatorBase from '../Base';\nimport * as yaml from 'js-yaml';\nimport Ajv from 'ajv';\nimport { CM_SCHEMA, JINJA_EXPRESSION_REGEX } from '../../const';\nimport { ValidationError } from '../../errors';\n\nconst ajv = new Ajv();\n\nexport class FileStructureValidator extends ValidatorBase {\n  validate(args: any) {\n    const { yamlFile } = args;\n    const docs = yaml.loadAll(\n      yamlFile.replace(JINJA_EXPRESSION_REGEX, ''),\n      undefined,\n      {\n        schema: yaml.JSON_SCHEMA,\n      }\n    );\n    const validateSchema = ajv.compile(CM_SCHEMA);\n    for (const doc of docs) {\n      const isValid = validateSchema(doc);\n      if (!isValid) {\n        throw new ValidationError(\n          `Schema is not valid: ${validateSchema.errors\n            ?.map(error => error.message)\n            .join(', ')}`\n        );\n      }\n    }\n  }\n}\n","import {\n  CM_SCHEMA,\n  JINJA_EXPRESSION_REGEX,\n  VALID_CONTEXT_VARS,\n} from '../../const';\nimport { ValidationError } from '../../errors';\nimport ValidatorBase from '../Base';\nimport * as yaml from 'js-yaml';\n\nexport class SavedWordsValidator extends ValidatorBase {\n  validate(args: any) {\n    const { yamlFile } = args;\n    const doc: any = yaml.load(\n      yamlFile\n        .replace(JINJA_EXPRESSION_REGEX, '')\n        .replace(/{%.*?%}[\\s\\S]*?{% endfor %}/g, '')\n    );\n    const savedWordCustomFilter = Object.keys(doc)\n      .filter(custom => !Object.keys(CM_SCHEMA.properties).includes(custom))\n      .find(custom => VALID_CONTEXT_VARS.includes(custom));\n    if (savedWordCustomFilter) {\n      throw new ValidationError(\n        `Invalid custom context variable: \\`${savedWordCustomFilter}\\` is a built-in context`\n      );\n    }\n  }\n}\n","import { JINJA_EXPRESSION_REGEX, SUPPORTED_TRIGGERS } from '../../const';\nimport { ValidationError } from '../../errors';\nimport ValidatorBase from '../Base';\nimport * as yaml from 'js-yaml';\n\nexport class TriggersValidator extends ValidatorBase {\n  validateSuppertedTriggers(trigger: string) {\n    if (!Object.values(SUPPORTED_TRIGGERS).includes(trigger)) {\n      throw new ValidationError(`${trigger} trigger is not supported`);\n    }\n  }\n\n  validate(args: any) {\n    const { yamlFile } = args;\n    const safeYamlFile = yamlFile.replace(JINJA_EXPRESSION_REGEX, 'TEMPLATE');\n    const yamlLoaded: any = yaml.load(safeYamlFile);\n    const globalTriggerts = yamlLoaded.automations.on || [];\n    const automationTriggers: string[] = Object.values(yamlLoaded.automations)\n      .flatMap((automation: any) => automation.on)\n      .filter(Boolean);\n    const allTriggers = [...globalTriggerts, ...automationTriggers];\n    for (const trigger of allTriggers) {\n      this.validateSuppertedTriggers(trigger);\n    }\n  }\n}\n","import ValidatorBase from '../Base';\nimport ContextVariableValidator from '../ContextValidator';\nimport FiltersValidator from '../FiltersValidators';\nimport ActionsValidator from '../ActionsValidator';\nimport FileStructureValidator from '../FileStructureValidator';\nimport SavedWordsValidator from '../SavedWordsValidator';\nimport { TriggersValidator } from '../TriggersValidator/TriggersValidator';\n\nexport class CMValidator extends ValidatorBase {\n  steps: ValidatorBase[];\n  constructor() {\n    super();\n    this.steps = [\n      new ContextVariableValidator(),\n      new FiltersValidator(),\n      new ActionsValidator(),\n      new FileStructureValidator(),\n      new SavedWordsValidator(),\n      new TriggersValidator(),\n    ];\n  }\n\n  validate(cmFile: string) {\n    const expressions = ValidatorBase.parseJinjaExpressions(cmFile);\n    for (const step of this.steps) {\n      step.validate({ expressions, yamlFile: cmFile });\n    }\n  }\n}\n"],"names":["SUPPORTED_TRIGGERS","COMMIT","PR_CREATED","COMMENT_ADDED","LABEL_ADDED","LABEL_REMOVED","SUPPORTED_ACTIONS","EXPLAIN_CODE_EXPERTS","ADD_COMMENT","ADD_LABEL","ADD_LABELS","ADD_REVIEWERS","APPROVE","MERGE","SET_REQUIRED_APPROVALS","REQUIRE_REVIEWER","REQUEST_CHANGES","UPDATE_CHECK","CLOSE","HTTP_REQUEST","INVOKE_GITHUB_ACTION","SUPPORTED_ACTIONS_BY_PROVIDER","gitlab","SUPPORTED_ARGUMENTS_BY_ACTION","_SUPPORTED_ARGUMENTS_","REQUIRED_ARGUMENTS_BY_ACTIONS","_REQUIRED_ARGUMENTS_B","all","args","VALID_CONTEXT_VARS","VALID_FILTERS","every","filter","includes","map","match","nope","reject","some","allDocs","allImages","allTests","codeExperts","estimatedReviewTime","extensions","extractJitFindings","extractSonarFindings","explainCodeExperts","explainRankByGitBlame","isFirstCommit","isFormattingChange","mapToEnum","matchDiffLines","rankByGitActivity","rankByGitBlame","intersection","difference","JINJA_FILTERS","VALID_VERSIONS","VALID_ACTIONS","_VALID_ACTIONS","comment","type","required","label","color","labels","reviewers","team_reviewers","unless_reviewers_set","fail_on_error","wait_for_all_checks","rebase_on_merge","squash_on_merge","approvals","also_assign","lt","gt","owner","repo","workflow","ref","inputs","check_name","CM_SCHEMA","properties","manifest","version","config","ignore_files","items","ignore_repositories","admin","users","on","Object","values","automations","patternProperties","run","action","keys","JINJA_EXPRESSION_REGEX","REGEX_EXPRESSION","ValidatorBase","_proto","prototype","validate","_args","Error","parseJinjaExpressions","cmFile","lines","split","jinjaExpressions","forEach","line","i","matches","push","expression","lineNumber","ValidationError","_Error","_inheritsLoose","message","_this","call","name","_wrapNativeSuper","UNKNOWN_CONTEXT","ContextVariableValidator","_ValidatorBase","apply","arguments","isValidCustomVariables","customVariable","yamlFile","customs","slice","custom","replace","isValidContextVariable","contextVariable","expressions","expressionsFromCM","_ref","exspressionFilters","_exspressionFilters$s","_exspressionFilters$s2","shift","trim","multipleVariable","_contextVariable$spli","variable","FiltersValidator","validateExistingFilter","filterName","getFilterArgs","indexOf","lastIndexOf","arg","validateFilterArgs","filterArgs","validFilterArgs","_iterator","_createForOfIteratorHelperLoose","_step","done","value","_expression$replace$r","_iterator2","_step2","formattedFilter","_formattedFilter$spli","filterNameWithArgs","ActionsValidator","validateActionSupported","validateArgSupported","unsupportedArgs","length","join","validateRequiredArgs","missingArgs","_required$args","safeYamlFile","yamlLoaded","yaml","actions","_Object$values$flatMa","flatMap","automation","Boolean","actionElement","actionArgs","existingArgsList","ajv","Ajv","FileStructureValidator","docs","undefined","schema","validateSchema","compile","doc","isValid","_validateSchema$error","errors","error","SavedWordsValidator","savedWordCustomFilter","find","TriggersValidator","validateSuppertedTriggers","trigger","globalTriggerts","automationTriggers","allTriggers","concat","CMValidator","steps","step"],"mappings":"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"}