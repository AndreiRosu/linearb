{"version":3,"file":"gitstream-core.cjs.production.min.js","sources":["../src/consts.ts","../src/rules-parser/args.definitions.ts","../src/rules-parser/filters/common.ts","../src/rules-parser/filters/general-filters.ts","../src/rules-parser/filters/high-level-filters.ts","../src/utils/providers.ts","../src/rules-parser/filters/high-level-filters-helper.ts","../src/rules-parser/filters/filter-validators.ts","../src/rules-parser/filters/async-filter-helper.ts","../src/rules-parser/filters/explain-expert-filter-helper.ts","../src/rules-parser/filters/async-filters.ts","../src/utils/formatters.ts","../src/rules-parser/filters/integrations-filters/sonar/helpers.ts","../src/rules-parser/filters/integrations-filters/sonar/sonar.ts","../src/rules-parser/filters/integrations-filters/jit/helpers.ts","../src/rules-parser/filters/integrations-filters/jit/index.ts","../src/rules-parser/filters/integrations-filters/jit/jit.ts","../src/rules-parser/old-filters/filters.ts","../src/rules-parser/types.ts","../src/rules-parser/validators-types.ts","../src/rule-engine/common/notify/amplitude.service.ts","../src/rules-parser/rules.parser.ts","../src/rule-engine/common/const.ts","../src/rule-engine/common/logger.ts","../src/rule-engine/utils/git/const.ts","../src/rule-engine/utils/git/contributorsStatHelper.ts","../src/rule-engine/utils/git/contributersStat.ts","../src/rule-engine/utils/matchContributors.ts","../src/rule-engine/utils/types.ts","../src/rule-engine/utils/error.handler.ts","../src/rule-engine/utils/converters.ts","../src/rule-engine/utils/diffParser.ts","../src/rule-engine/utils/git/diffParserHelper.ts","../src/rule-engine/utils/git.service.ts","../src/rule-engine/utils/cache.ts","../src/rule-engine/api/requests/expertReviewerContext.ts","../src/rule-engine/api/requests/expertReviewerRequest.ts","../src/rule-engine/api/getExpertReviewer.ts","../src/rule-engine/common/notify/segment.service.ts","../src/rule-engine/common/notify/analytics.handler.ts","../src/rule-engine/utils/ruleParser.validator.ts","../src/rule-engine/utils/ruleParser.ts","../src/rule-engine/utils/run.ts","../src/rule-engine/run-ci.ts","../src/rule-engine/providers/index.ts","../src/rule-engine/index.ts"],"sourcesContent":["export const ENVS = {\n  PROD: 'prod',\n  DEV: 'dev',\n  LOCAL: 'local',\n};\nexport const ENV = ENVS.PROD;\nexport const BASE_URL =\n  ENV === ENVS.PROD\n    ? 'https://workerb.linearb.io'\n    : ENV === ENVS.DEV\n    ? 'https://workerb.linearb-dev-03.io'\n    : 'http://localhost:3131';\n\nexport const AWS_BASE_URL =\n  'https://gtxblnqb99.execute-api.us-west-1.amazonaws.com/prod';\n\nexport const API_ENDPOINTS = {\n  REVIEW_TIME: AWS_BASE_URL + '/v1/pulls/review-time',\n  EXPERT_REVIWER: AWS_BASE_URL + '/gs/v1/data-service/expert-reviewer',\n};\n\nconst PACKAGE_NAME = 'gitstream-rules-parser';\n\nexport const ERRORS = {\n  FAILED_RENDER_STRING: PACKAGE_NAME + ' - failed render string',\n  FAILED_YAML_LOAD: PACKAGE_NAME + ' - failed yaml.load',\n  INVALID_CM: PACKAGE_NAME + ' - invalid cm',\n  INVALID_CM_CONTEXT_VARIABLES: PACKAGE_NAME + ' - ContextVariableValidator',\n};\n\nexport const STATUS_CODES = {\n  FAILED_RENDER_STRING: 80,\n  FAILED_YAML_LOAD: 81,\n  INVALID_CM: 82,\n  INVALID_CM_CONTEXT_VARIABLES: 83,\n};\n","export const argsDefinitionsByAction = {\n  'add-comment@v1': { comment: { name: 'comment', type: 'string' } },\n  'add-label@v1': { label: { name: 'label', type: 'string' } },\n  'add-labels@v1': { labels: { name: 'labels', type: 'list' } },\n  'add-reviewers@v1': {\n    reviewers: { name: 'reviewers', type: 'list' },\n    team_reviewers: { name: 'team_reviewers', type: 'list' },\n  },\n  'merge@v1': {\n    wait_for_all_checks: { name: 'wait_for_all_checks', type: 'boolean' },\n    rebase_on_merge: { name: 'rebase_on_merge', type: 'boolean' },\n    squash_on_merge: { name: 'squash_on_merge', type: 'boolean' },\n  },\n  'require-reviewers@v1': { reviewers: { name: 'reviewers', type: 'list' } },\n  'set-required-approvals@v1': {\n    approvals: { name: 'approvals', type: 'number' },\n  },\n  'request-changes@v1': {\n    comment: { name: 'comment', type: 'number' },\n  },\n};\n\nexport const listify = [\n  argsDefinitionsByAction['add-reviewers@v1'].reviewers.name,\n  argsDefinitionsByAction['require-reviewers@v1'].reviewers.name,\n  argsDefinitionsByAction['add-reviewers@v1'].team_reviewers.name,\n  argsDefinitionsByAction['add-labels@v1'].labels.name,\n];\n","import { FiltersUsage } from './filter-types';\n\nexport const internalIncludes = (file: string, searchTerm: string) =>\n  file?.includes(searchTerm);\n\nexport const internalRegex = (\n  file: string,\n  searchTerm: string,\n  multiline: boolean = false\n) => {\n  // possible inputs are regular expressions as 'strings' or /regex/ standard javascript\n  // literals. a 3rd input is a string with a nunjuks 'r/regex/', this happens when a\n  // a nunjucks regex expression is injected back into the context.\n  // this 3rd type is non standard RegExp and therefore should inverted back.\n\n  // if it is a nunjuks regex string, convert it to compatible RegExp string\n  if (typeof searchTerm === 'string' && searchTerm.startsWith('r/')) {\n    // from the nunjuks regex patterns remove the 'r/' and the last '/'\n    searchTerm = searchTerm.substring(2).slice(0, -1);\n    // replace any \\/ back to /\n    searchTerm = searchTerm.replace('\\\\/', '/');\n  }\n\n  const re = new RegExp(searchTerm, multiline ? 'm' : '');\n  return re.test(file);\n};\n\nexport const internalEvery = (arr: boolean[], value: boolean) => {\n  const bools = arr?.map((item) => Boolean(item));\n  return bools?.length ? bools.every((element) => element === value) : false;\n};\n\nexport const formatInputToList = (input: any): any[] => {\n  if (typeof input === 'string') {\n    if (input.includes(',')) {\n      return input.split(',');\n    } else {\n      return [input];\n    }\n  }\n  return input ?? [];\n};\n\nconst PROVIDER = {\n  GITHUB: 'github',\n  GITLAB: 'gitlab',\n  BITBUCKET: 'bitbucket',\n};\n\nexport const PROVIDER_NAME: any = {\n  [PROVIDER.GITHUB]: 'GitHub',\n  [PROVIDER.GITLAB]: 'GitLab',\n  [PROVIDER.BITBUCKET]: 'BitBucket',\n};\n\nexport const DOCS_LINK_COMMENT =\n  '\\n \\nTo learn more about /:\\\\ gitStream - [Visit our Docs](https://docs.gitstream.cm/) \\n \\n';\n\nexport const MONTH: { [key: string]: string } = {\n  '01': 'JAN',\n  '02': 'FEB',\n  '03': 'MAR',\n  '04': 'APR',\n  '05': 'MAY',\n  '06': 'JUN',\n  '07': 'JUL',\n  '08': 'AUG',\n  '09': 'SEP',\n  '10': 'OCT',\n  '11': 'NOV',\n  '12': 'DEC',\n};\n\nexport class FiltersForAnalytics {\n  public static filters: FiltersUsage = {};\n}\n\nexport const handleAnalytics = (filterName: string, filterArgs: any[]) => {\n  FiltersForAnalytics.filters = {\n    ...FiltersForAnalytics.filters,\n    [filterName]: { args: filterArgs },\n  };\n};\n","import _ from 'lodash';\nimport {\n  formatInputToList,\n  handleAnalytics,\n  internalEvery,\n  internalIncludes,\n  internalRegex,\n} from './common';\nimport { filterArgs } from './filter-types';\n\nconst parseSome = (list: boolean[]): boolean => {\n  handleAnalytics(GeneralFilters.some, []);\n  const formattedList = formatInputToList(list)?.map((item) => Boolean(item));\n  return (\n    Boolean(formattedList?.length) &&\n    formattedList.some((match: boolean) => match)\n  );\n};\n\nconst parseEvery = (list: boolean[]): boolean => {\n  handleAnalytics(GeneralFilters.every, []);\n  return internalEvery(formatInputToList(list), true);\n};\n\nconst termRegexOrList = (\n  file: any,\n  attribute: string,\n  term: string,\n  regex: string,\n  list: any[]\n) =>\n  term\n    ? internalIncludes(attribute ? file[attribute] : file, term)\n    : regex\n    ? internalRegex(attribute ? file[attribute] : file, regex)\n    : list.some((search) =>\n        internalIncludes(attribute ? file[attribute] : file, search)\n      );\n\nconst filterList = (\n  files: any,\n  attribute: string,\n  term: string,\n  regex: string,\n  list: any[],\n  isReject: boolean\n) => {\n  return files.filter((file: any) =>\n    isReject\n      ? !termRegexOrList(file, attribute, term, regex, list)\n      : termRegexOrList(file, attribute, term, regex, list)\n  );\n};\n\nconst mapList = (\n  files: any,\n  attribute: string,\n  term: string,\n  regex: string,\n  list: any[],\n  isReject: boolean\n) =>\n  files.map((file: any) =>\n    isReject\n      ? !termRegexOrList(file, attribute, term, regex, list)\n      : termRegexOrList(file, attribute, term, regex, list)\n  );\n\nconst calculateList = (\n  files: any[],\n  args: filterArgs,\n  callbackName: string,\n  isReject: boolean = false\n) => {\n  const attribute: string = args.attr || '';\n  const { term, regex, list } = args;\n  const formattedFiles = formatInputToList(files);\n  if (!term && !regex && !list) {\n    return [];\n  }\n  let formattedList = list;\n  if (list) {\n    formattedList = formatInputToList(list);\n  }\n  return callbackName === 'filterList'\n    ? filterList(\n        formattedFiles,\n        attribute,\n        term,\n        regex,\n        formattedList,\n        isReject\n      )\n    : mapList(formattedFiles, attribute, term, regex, formattedList, isReject);\n};\n\nconst parseFilter = (files: any[], args: filterArgs) => {\n  handleAnalytics(GeneralFilters.filter, [args]);\n  return calculateList(files, args, 'filterList');\n};\n\nconst parseReject = (files: any[], args: filterArgs) => {\n  handleAnalytics(GeneralFilters.reject, [args]);\n  return calculateList(files, args, 'filterList', true);\n};\n\nconst parseMap = (files: any[], { attr }: { attr: string }) => {\n  handleAnalytics(GeneralFilters.map, [{ attr }]);\n  return formatInputToList(files).map((file: any) => file[attr]);\n};\n\nconst parseIncludes = (file: string, args: filterArgs) => {\n  handleAnalytics(GeneralFilters.includes, [args]);\n  const { term, regex, list } = args;\n  if (!term && !regex && !list) {\n    return false;\n  }\n  let formattedList = list;\n  if (list) {\n    formattedList = formatInputToList(list);\n  }\n  return term\n    ? internalIncludes(file, term)\n    : regex\n    ? internalRegex(file, regex)\n    : formattedList.some((term: any) => file.includes(term));\n};\n\nconst parseMatch = (files: any[], args: filterArgs) => {\n  handleAnalytics(GeneralFilters.match, [args]);\n  return calculateList(files, args, 'mapList');\n};\n\nconst parseNope = (arr: boolean[]) => {\n  handleAnalytics(GeneralFilters.match, []);\n  return internalEvery(formatInputToList(arr), false);\n};\n\nconst parseIntersection = (listA: any[], args: { list: any[] }) => {\n  handleAnalytics(GeneralFilters.intersection, [args]);\n  const { list: listB } = args;\n  if (!listB) {\n    return false;\n  }\n  return _.intersection(listA, listB);\n};\n\nconst parseDifference = (listA: any[], args: { list: any[] }) => {\n  handleAnalytics(GeneralFilters.difference, [args]);\n  const { list: listB } = args;\n  if (!listB) {\n    return false;\n  }\n  return _.difference(listA, listB);\n};\n\nexport enum GeneralFilters {\n  some = 'some',\n  every = 'every',\n  filter = 'filter',\n  includes = 'includes',\n  reject = 'reject',\n  map = 'map',\n  match = 'match',\n  nope = 'nope',\n  intersection = 'intersection',\n  difference = 'difference',\n}\n\nexport const GENERAL_FILTERS_HANDLER: any = {\n  [GeneralFilters.some]: parseSome,\n  [GeneralFilters.every]: parseEvery,\n  [GeneralFilters.filter]: parseFilter,\n  [GeneralFilters.reject]: parseReject,\n  [GeneralFilters.map]: parseMap,\n  [GeneralFilters.includes]: parseIncludes,\n  [GeneralFilters.match]: parseMatch,\n  [GeneralFilters.nope]: parseNope,\n  [GeneralFilters.intersection]: parseIntersection,\n  [GeneralFilters.difference]: parseDifference,\n};\n","import { File } from '../context/types';\nimport { handleAnalytics, internalRegex } from './common';\nimport {\n  Metric,\n  matchDiffLinesArgs,\n  rankByGitActivityArgs,\n  rankByLinesArgs,\n  FileMetric,\n  EnumArgs,\n} from './filter-types';\nimport _ from 'lodash';\nimport {\n  calculateFileSumPerAuthorActivity,\n  calculateActivityPerFile,\n  sumAuthorMetrics,\n  validateAndCompare,\n  convertBlameContextToExplain,\n  explainBlameTemplate,\n  convertContributorsAndBlame,\n  convertAndSumContributors,\n} from './high-level-filters-helper';\nimport { isGtLtArgsValid } from './filter-validators';\nimport {\n  estimatedReviewTime,\n  parseCodeExperts,\n  parseExpertReviewer,\n  parseExplainCodeExperts,\n  parseExplainExpertReviewer,\n} from './async-filters';\nimport { format } from '../../utils/formatters';\nimport parseSonarParser from './integrations-filters/sonar';\nimport jitFilter from './integrations-filters/jit';\n\nconst parseExtractSonarFindings = (pr: any): string => {\n  handleAnalytics(HighLevelFilters.extractSonarFindings, []);\n  return parseSonarParser(pr);\n};\n\nconst parserMapToEnum = (key: string, args: EnumArgs) => {\n  handleAnalytics(HighLevelFilters.mapToEnum, [key, args]);\n  const enumArgs = args?.enum;\n  if (enumArgs && Object.keys(enumArgs).length) {\n    return enumArgs[key];\n  }\n};\n\nconst parseFilterAllTests = (files: string[], extensions: string[]) => {\n  const regex = new RegExp(`[^a-zA-Z0-9](${extensions.join('|')})[^a-zA-Z0-9]`);\n  return (\n    Boolean(files.length) &&\n    files\n      .map((filePath: string) => regex.test(filePath || ''))\n      .every((x: boolean) => x)\n  );\n};\n\nconst parseFilterAllFilePath = (files: string[], searchArray: string[]) =>\n  Boolean(files.length) &&\n  files\n    .map((filePath: string) =>\n      searchArray.some((term: string) => (filePath || '').includes(term))\n    )\n    .every((x: boolean) => x);\n\nconst parseFilterAllExtensions = (files: string[], extensions: string[]) =>\n  files.length\n    ? parseFilterAllFilePath(\n        files.map((filePath: string) => filePath.split('.').pop() || ''),\n        extensions\n      )\n    : false;\n\nconst getUniqueExtensions = (files: string[]) => {\n  handleAnalytics(HighLevelFilters.extensions, []);\n  return (\n    files\n      // extensions\n      .map((x: string) => x.split('.').pop())\n      // unique\n      .filter((value, index, array) => array.indexOf(value) === index)\n  );\n};\n\nconst parseIsFormattingChange = (files: File[]) => {\n  try {\n    handleAnalytics(HighLevelFilters.isFormattingChange, []);\n    const allFormatting =\n      Boolean(files.length) &&\n      files.every(\n        ({ new_content, original_content, original_file, new_file }) => {\n          const formattedNew = format(new_content, new_file);\n          const formattedOld = format(original_content, original_file);\n          return formattedNew === formattedOld;\n        }\n      );\n    return allFormatting;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst parseMatchDiffLines = (files: File[], args: matchDiffLinesArgs) => {\n  handleAnalytics(HighLevelFilters.matchDiffLines, [args]);\n  const { regex, ignoreWhiteSpaces } = args;\n  const diffLinesRegex = new RegExp('^[+-]');\n  const emptyLinesRegex = new RegExp('^[+-]\\\\s*$');\n  return !regex\n    ? []\n    : files\n        .map(({ diff }) =>\n          diff\n            .split('\\n')\n            .filter((row) => diffLinesRegex.test(row))\n            .filter((row) =>\n              ignoreWhiteSpaces ? !emptyLinesRegex.test(row) : true\n            )\n            .map((diffRow) => internalRegex(diffRow, regex))\n        )\n        .flat(1);\n};\n\nconst parseIsFirstCommit = (contributors: any, author: string) => {\n  handleAnalytics(HighLevelFilters.isFirstCommit, [{ author }]);\n  return _.get(contributors, author, null) ? false : true;\n};\n\nconst parseRankByGitBlame = (repo: any, args: rankByLinesArgs) => {\n  handleAnalytics(HighLevelFilters.rankByGitBlame, [args]);\n  if (!isGtLtArgsValid(args)) {\n    return [];\n  }\n  const { gt, lt } = args;\n  const { blame } = convertContributorsAndBlame(repo);\n  const blameByAuthor = sumAuthorMetrics(\n    Object.values(repo.git_to_provider_user),\n    blame\n  );\n  const comparedResult = validateAndCompare(blameByAuthor, gt, lt);\n  return Object.keys(comparedResult).length\n    ? [...Array.from(new Set(Object.keys(comparedResult)))]\n    : [];\n};\n\nconst parseRankByGitActivity = (repo: any, args: rankByGitActivityArgs) => {\n  handleAnalytics(HighLevelFilters.rankByGitActivity, [args]);\n  const { gt, lt, weeks } = args;\n  if ((!gt && !lt) || !weeks) {\n    return [];\n  }\n  const weeksArr: string[] = new Array(weeks + 1)\n    .fill(0)\n    .map((_, i) => `week_${i}`);\n\n  const totalsPerFile: FileMetric = calculateActivityPerFile(\n    repo.git_activity,\n    weeksArr\n  );\n  const fileSumPerAuthor: FileMetric = calculateFileSumPerAuthorActivity(\n    repo.git_activity,\n    weeksArr,\n    totalsPerFile\n  );\n  const activityByAuthor: Metric = sumAuthorMetrics(\n    Object.keys(repo.contributors),\n    fileSumPerAuthor\n  );\n  const convertContributors = convertAndSumContributors(\n    activityByAuthor,\n    repo.git_to_provider_user\n  );\n  const comparedResult: Metric = validateAndCompare(\n    convertContributors,\n    gt,\n    lt\n  );\n\n  return Object.keys(comparedResult).length\n    ? [...Array.from(new Set(Object.keys(comparedResult)))]\n    : [];\n};\n\nconst parseExplainRankByGitBlame = (repo: any, args: rankByLinesArgs) => {\n  handleAnalytics(HighLevelFilters.explainRankByGitBlame, [args]);\n  if (!isGtLtArgsValid(args)) {\n    return {};\n  }\n  const parseResult = parseRankByGitBlame(repo, args);\n  const authorFilteredParseResult = _.filter(\n    parseResult,\n    (contributor) => contributor !== repo.pr_author\n  );\n  const authorFilteredParseResultString = authorFilteredParseResult.join(', ');\n  const isNoUserButYou =\n    !authorFilteredParseResult.length && parseResult.length > 0;\n\n  const formattedBlameContext = convertBlameContextToExplain(repo);\n  return `base64: ${Buffer.from(\n    explainBlameTemplate(\n      args,\n      authorFilteredParseResultString,\n      formattedBlameContext,\n      repo.provider,\n      isNoUserButYou\n    )\n  ).toString('base64')}`;\n};\n\nexport enum HighLevelFilters {\n  allDocs = 'allDocs',\n  allImages = 'allImages',\n  allTests = 'allTests',\n  estimatedReviewTime = 'estimatedReviewTime',\n  extensions = 'extensions',\n  isFormattingChange = 'isFormattingChange',\n  matchDiffLines = 'matchDiffLines',\n  isFirstCommit = 'isFirstCommit',\n  rankByGitBlame = 'rankByGitBlame',\n  rankByGitActivity = 'rankByGitActivity',\n  explainRankByGitBlame = 'explainRankByGitBlame',\n  expertReviewer = 'expertReviewer',\n  explainExpertReviewer = 'explainExpertReviewer',\n  codeExperts = 'codeExperts',\n  explainCodeExperts = 'explainCodeExperts',\n  sonarParser = 'sonarParser',\n  mapToEnum = 'mapToEnum',\n  extractSonarFindings = 'extractSonarFindings',\n  extractJitFindings = 'extractJitFindings',\n}\n\nconst FILTERED_OUT_LIST = {\n  [HighLevelFilters.allDocs]: ['requirements.txt'],\n};\n\nexport const FILTERS_EXTENSION_LIST = {\n  [HighLevelFilters.allDocs]: ['md', 'mkdown', 'txt', 'rst', '.adoc'],\n  [HighLevelFilters.allImages]: ['svg', 'png', 'gif'],\n  [HighLevelFilters.allTests]: ['test', 'spec'],\n};\n\nexport const HIGH_LEVEL_FILTERS_HANDLER: any = {\n  [HighLevelFilters.allDocs]: (files: string[]) => {\n    handleAnalytics(HighLevelFilters.allDocs, []);\n    return (\n      Boolean(files.length) &&\n      files.every((file) =>\n        FILTERED_OUT_LIST[HighLevelFilters.allDocs].every(\n          (excludedFile) =>\n            !(file.includes('/' + excludedFile) || file === excludedFile)\n        )\n      ) &&\n      parseFilterAllExtensions(\n        files,\n        FILTERS_EXTENSION_LIST[HighLevelFilters.allDocs]\n      )\n    );\n  },\n  [HighLevelFilters.allImages]: (files: string[]) => {\n    handleAnalytics(HighLevelFilters.allImages, []);\n    return parseFilterAllExtensions(\n      files,\n      FILTERS_EXTENSION_LIST[HighLevelFilters.allImages]\n    );\n  },\n  [HighLevelFilters.allTests]: (files: string[]) => {\n    handleAnalytics(HighLevelFilters.allTests, []);\n    return parseFilterAllTests(\n      files,\n      FILTERS_EXTENSION_LIST[HighLevelFilters.allTests]\n    );\n  },\n  [HighLevelFilters.estimatedReviewTime]: estimatedReviewTime,\n  [HighLevelFilters.extensions]: getUniqueExtensions,\n  [HighLevelFilters.isFormattingChange]: parseIsFormattingChange,\n  [HighLevelFilters.matchDiffLines]: parseMatchDiffLines,\n  [HighLevelFilters.isFirstCommit]: parseIsFirstCommit,\n  [HighLevelFilters.rankByGitBlame]: parseRankByGitBlame,\n  [HighLevelFilters.rankByGitActivity]: parseRankByGitActivity,\n  [HighLevelFilters.explainRankByGitBlame]: parseExplainRankByGitBlame,\n  [HighLevelFilters.expertReviewer]: parseExpertReviewer,\n  [HighLevelFilters.explainExpertReviewer]: parseExplainExpertReviewer,\n  [HighLevelFilters.codeExperts]: parseCodeExperts,\n  [HighLevelFilters.explainCodeExperts]: parseExplainCodeExperts,\n  [HighLevelFilters.sonarParser]: parseSonarParser,\n  [HighLevelFilters.mapToEnum]: parserMapToEnum,\n  [HighLevelFilters.extractSonarFindings]: parseExtractSonarFindings,\n  ...jitFilter,\n};\n\nexport const ASYNC: any = {\n  [HighLevelFilters.estimatedReviewTime]: true,\n  [HighLevelFilters.expertReviewer]: true,\n  [HighLevelFilters.explainExpertReviewer]: true,\n  [HighLevelFilters.codeExperts]: true,\n  [HighLevelFilters.explainCodeExperts]: true,\n};\n","import { ProviderFormating } from '../rules-parser/filters/filter-types';\n\nexport const ADDITIONAL_FORMATTING: ProviderFormating = {\n  github: '',\n  gitlab: '  \\n',\n  default: '',\n};\n","import { ADDITIONAL_FORMATTING } from '../../utils/providers';\nimport { DOCS_LINK_COMMENT } from './common';\nimport {\n  FileMetric,\n  Metric,\n  Activity,\n  ExplainObject,\n  rankByLinesArgs,\n} from './filter-types';\n\nconst calculateSumByAuthor = (\n  authorMetric: FileMetric,\n  author: string\n): Metric =>\n  Object.values(authorMetric).reduce((aa: Metric, item: Metric) => {\n    const precent = item[author];\n    const totalPercent = (precent ?? 0) + (aa[author] ?? 0);\n    return { ...aa, ...(totalPercent && { [author]: totalPercent }) };\n  }, {});\n\nexport const convertAndSumContributors = (\n  contributors: Metric,\n  gitToProviderUser: any\n): Metric => {\n  return Object.keys(contributors).reduce((acc: Metric, gitAuthor: string) => {\n    let score = contributors[gitAuthor];\n    if (acc[gitToProviderUser[gitAuthor]]) {\n      score = contributors[gitAuthor] + acc[gitToProviderUser[gitAuthor]];\n    }\n    const author =\n      gitToProviderUser[gitAuthor]?.includes('@') ||\n      !gitToProviderUser[gitAuthor]\n        ? gitAuthor + '\\\\*'\n        : gitToProviderUser[gitAuthor];\n    return { ...acc, [author]: score };\n  }, {});\n};\n\nexport const convertContributorsAndBlame = (repo: any) => {\n  const blame = Object.keys(repo.blame).reduce(\n    (acc: FileMetric, file: string) => {\n      return {\n        ...acc,\n        [file]: convertAndSumContributors(\n          repo.blame[file],\n          repo.git_to_provider_user\n        ),\n      };\n    },\n    {}\n  );\n  return { blame };\n};\n\nexport const sumAuthorMetrics = (\n  contributors: string[],\n  authorMetric: FileMetric\n): Metric => {\n  const numOfFiles = Object.keys(authorMetric).length;\n  return contributors.reduce((acc: Metric, author: string) => {\n    const sumByAuthor: Metric = calculateSumByAuthor(authorMetric, author);\n    return {\n      ...acc,\n      ...(sumByAuthor[author] && {\n        [author]: sumByAuthor[author] / numOfFiles,\n      }),\n    };\n  }, {});\n};\n\nexport const convertToProviderUser = (repo: any, gitObject: Metric) =>\n  Object.keys(gitObject).reduce((acc: Metric, gitAuthor: string) => {\n    if (repo.git_to_provider_user[gitAuthor]) {\n      return {\n        ...acc,\n        [repo.git_to_provider_user[gitAuthor]]:\n          gitObject[gitAuthor] || gitAuthor,\n      };\n    }\n    return acc;\n  }, {});\n\nexport const calculateActivityPerFile = (\n  activity: Activity,\n  weeksArr: string[]\n): FileMetric =>\n  Object.keys(activity).reduce((acc, file) => {\n    const totalPerFile = Object.values(activity[file]).reduce(\n      (ac: Metric, linesPerWeek: Metric) => {\n        weeksArr.forEach((week) => {\n          const item = linesPerWeek[week];\n          if (item) {\n            ac[week] = (ac[week] ?? 0) + item;\n          }\n        });\n        return { ...ac };\n      },\n      {}\n    );\n    return { ...acc, [file]: totalPerFile };\n  }, {});\n\nexport const calculateFileSumPerAuthorActivity = (\n  activity: Activity,\n  weeksArr: string[],\n  totalsPerFile: FileMetric\n): FileMetric =>\n  Object.keys(activity).reduce((acc: FileMetric, file: string) => {\n    const calcPercent: Metric = Object.keys(activity[file]).reduce(\n      (acAuthor: Metric, author: string) => {\n        let arrSum: number[] = [];\n        weeksArr.forEach((week: string) => {\n          if (totalsPerFile[file][week] && activity[file][author][week]) {\n            arrSum.push(\n              (activity[file][author][week] / totalsPerFile[file][week]) * 100\n            );\n          }\n        });\n        const total: number =\n          arrSum.reduce((a: number, b: number) => a + b, 0) / arrSum.length;\n        return {\n          ...acAuthor,\n          ...(arrSum.length && { [author]: parseInt(total?.toFixed(0)) }),\n        };\n      },\n      {}\n    );\n    return { ...acc, [file]: calcPercent };\n  }, {});\n\nexport const sortObject = (data: any[], object: any) =>\n  data.sort((a: any, b: any) => (object[b] ?? 0) - (object[a] ?? 0));\n\nconst compareThan = (data: Metric, gt: number, lt: number) => {\n  const authors = Object.keys(data).filter((author: string) =>\n    gt !== undefined ? data[author] > gt : data[author] < lt\n  );\n  const sortedAuthors = sortObject(authors, data);\n\n  return sortedAuthors.reduce((acc: any, author: string) => {\n    if (author.includes('*')) {\n      return acc;\n    }\n    return { ...acc, ...{ [author]: data[author] } };\n  }, {});\n};\n\nexport const validateAndCompare = (\n  authorMetrics: Metric,\n  gt: number,\n  lt: number\n): Metric | {} =>\n  Object.keys(authorMetrics).length ? compareThan(authorMetrics, gt, lt) : {};\n\nexport const convertBlameContextToExplain = (repo: any) => {\n  const { blame } = convertContributorsAndBlame(repo);\n  return Object.keys(blame).reduce((acc: any, file: string) => {\n    if (file === '/dev/null') {\n      return acc;\n    }\n    const sortedAuthors = sortObject(Object.keys(blame[file]), blame[file]);\n    const formattedValues = sortedAuthors.reduce(\n      (accAuthor: ExplainObject, author) => {\n        if (!blame[file][author]) {\n          return accAuthor;\n        }\n        const formatGitAuthor = author.replace(/\\\"\\“/g, '').replace('“', '');\n        let formattedValue = `${\n          Math.floor(blame[file][author])\n            ? Math.floor(blame[file][author])\n            : '<1'\n        }%`;\n        if (\n          accAuthor[formatGitAuthor] &&\n          parseInt(accAuthor[formatGitAuthor]) > parseInt(formattedValue)\n        ) {\n          formattedValue = accAuthor[formatGitAuthor];\n        }\n        return { ...accAuthor, [formatGitAuthor]: formattedValue };\n      },\n      {}\n    );\n    return { ...acc, [file]: formattedValues };\n  }, {});\n};\n\nconst suggestedReviewersComment = (\n  authorFilteredParseResult: string,\n  argsTemplate: string,\n  numOfPRFiles: number,\n  isNoUserButYou: boolean\n) => {\n  const formattedComment = authorFilteredParseResult\n    ? ` 👋  **Suggested reviewers: ${authorFilteredParseResult}**\\n \\nThey contributed ${argsTemplate} of the lines on pre-existing files`\n    : ` 👋  **Suggested reviewers: no user ${\n        isNoUserButYou ? 'but you' : ''\n      } matched**\\n \\nNo ${\n        numOfPRFiles ? 'other ' : ''\n      }user contributed ${argsTemplate} of the lines on pre-existing files`;\n  return formattedComment;\n};\n\nexport const explainBlameTemplate = (\n  args: rankByLinesArgs,\n  authorFilteredParseResult: string,\n  formattedBlameContext: any,\n  provider: string,\n  isNoUserButYou: boolean\n) => {\n  const { gt, lt } = args;\n  const argsTemplate = gt ? `more than ${gt}%` : `less than ${lt}%`;\n\n  const numOfPRFiles = Object.keys(formattedBlameContext).length;\n  let parserResultTemplate = suggestedReviewersComment(\n    authorFilteredParseResult,\n    argsTemplate,\n    numOfPRFiles,\n    isNoUserButYou\n  );\n  parserResultTemplate += numOfPRFiles ? ':\\n' : '. \\n ';\n  parserResultTemplate += Object.keys(formattedBlameContext).length\n    ? '<details>\\n <summary>See details</summary>\\n'\n    : '';\n  parserResultTemplate += '\\n';\n  Object.keys(formattedBlameContext).forEach((file) => {\n    if (Object.keys(formattedBlameContext[file]).length === 0) {\n      return;\n    }\n    parserResultTemplate += `\\n\\`${file}\\` \\n${\n      ADDITIONAL_FORMATTING[provider] || ADDITIONAL_FORMATTING.default\n    }`; //Supporting new lines format for gitlab\n    Object.keys(formattedBlameContext[file]).forEach((author) => {\n      parserResultTemplate += `${author}: ${\n        formattedBlameContext[file][author]\n      } \\n${ADDITIONAL_FORMATTING[provider] || ADDITIONAL_FORMATTING.default}`; //Supporting new lines format for gitlab\n    });\n  });\n  parserResultTemplate += '\\n</details>\\n';\n  const isGitUser = Object.values(formattedBlameContext)\n    .map((item: any) => Object.keys(item).some((x) => x.includes('*')))\n    .some((result) => result);\n\n  parserResultTemplate += isGitUser\n    ? ` \\nGit users that could not be automatically mapped are marked with \\`*\\`.\\n${\n        ADDITIONAL_FORMATTING[provider] || ADDITIONAL_FORMATTING.default\n      }To map these users, refer to the instructions [here](https://docs.gitstream.cm/cm-file#config).\\n \\n`\n    : ''; //Supporting new lines format for gitlab\n  parserResultTemplate += DOCS_LINK_COMMENT;\n  return parserResultTemplate;\n};\n","import { rankByLinesArgs } from './filter-types';\n\nexport const isGtLtArgsValid = (args: rankByLinesArgs) => {\n  const { gt, lt } = args;\n  return !!gt || !!lt;\n};\n","import axios from 'axios';\nimport { API_ENDPOINTS } from '../../consts';\nimport { rankByLinesArgs } from './filter-types';\n\n//TODO: map request to object\nexport const getETR = async (request: any) => {\n  const {\n    data: { numericValue },\n  } = await axios.post(API_ENDPOINTS.REVIEW_TIME, request, {\n    headers: {\n      'Content-type': 'application/json',\n    },\n  });\n  return { numericValue };\n};\n\n//TODO: map request to object\nexport const getExpertReviewer = async (request: any) => {\n  if (request) {\n    const { data } = await axios.post(API_ENDPOINTS.EXPERT_REVIWER, request, {\n      headers: {\n        'Content-type': 'application/json',\n      },\n    });\n    return data || {};\n  }\n  return {};\n};\n\nexport const filterExpertResult = (\n  data: any,\n  gt: number,\n  lt: number,\n  filterBy: string\n) => {\n  const thresholdData = Object.keys(data).reduce((acc, user) => {\n    if (\n      gt !== undefined\n        ? data[user][filterBy] > gt / 100\n        : data[user][filterBy] < lt / 100\n    ) {\n      return { ...acc, [user]: data[user] };\n    }\n    return acc;\n  }, {});\n\n  return (\n    Object.keys(thresholdData).filter(\n      (contributor) => !contributor.includes('@') && !contributor.includes('<>')\n    ) || []\n  );\n};\n\nexport const parseExpertReviewerThreshold = (args: rankByLinesArgs): number => {\n  const { gt, lt } = args;\n  return gt ? gt : lt ? lt : 0.1;\n};\n\nexport const getAndFilterExpertReviewer = async (repo: any) => {\n  const data = await getExpertReviewer(\n    repo.data_service?.expert_reviwer_request\n  );\n  if (!Object.keys(data).length) {\n    return { data: {}, dataWithoutIssuer: {}, isIssuerFiltered: false };\n  }\n\n  let isIssuerFiltered = false;\n  const dataWithoutIssuer = Object.keys(data).reduce((acc, author) => {\n    if (author === repo.pr_author) {\n      isIssuerFiltered = true;\n      return acc;\n    }\n    return { ...acc, [author]: data[author] };\n  }, {});\n  return { data, dataWithoutIssuer, isIssuerFiltered };\n};\n","import { MONTH } from './common';\nimport moment from 'moment';\nimport { ActivityExplain, FileMetric } from './filter-types';\nimport { sortObject } from './high-level-filters-helper';\nimport { ADDITIONAL_FORMATTING } from '../../utils/providers';\n\nexport const explainExpertReviewerComment = (\n  expertReviewers: string[],\n  activeUsers: string[],\n  knowledgeUsers: string[],\n  threshold: number,\n  provider: string,\n  isNoUserButYou: boolean\n) => {\n  let comment = '🥷 **Code experts:';\n  comment += expertReviewers.length\n    ? ` ${expertReviewers.join(', ')}** \\n \\n`\n    : ` no user ${\n        isNoUserButYou ? 'but you' : ''\n      } matched threshold ${threshold}** \\n \\n`;\n\n  if (activeUsers.length) {\n    comment += `${activeUsers.join(', ')} ${\n      activeUsers.length === 1 ? 'has' : 'have'\n    } most 👩‍💻 **activity** in the files. \\n${\n      ADDITIONAL_FORMATTING[provider] || ADDITIONAL_FORMATTING.default\n    }`;\n  }\n  if (knowledgeUsers.length) {\n    comment += `${knowledgeUsers.join(', ')} ${\n      knowledgeUsers.length === 1 ? 'has' : 'have'\n    } most 🧠 **knowledge** in the files. \\n`;\n  }\n  return comment;\n};\n\nconst explainActivityByMonth = (\n  activity: any,\n  file: string,\n  activityUsers: string[]\n) => {\n  let monthsComment = '';\n  const months: string[] = [];\n  for (let index = 0; index < 6; index++) {\n    months.push(MONTH[moment().subtract(index, 'months').format('MM')]);\n  }\n  months.forEach((month) => {\n    const user1Value = activity[file][activityUsers[0]][month];\n    const user2Value = activity[file][activityUsers[1]]?.[month];\n    monthsComment += `| ${month} | ${\n      user1Value\n        ? user1Value.additions +\n          ' additions & ' +\n          user1Value.deletions +\n          ' deletions'\n        : ' '\n    } |`;\n    monthsComment += `${\n      user2Value\n        ? user2Value.additions +\n          ' additions & ' +\n          user2Value.deletions +\n          ' deletions |'\n        : ' '\n    } \\n`;\n  });\n  return monthsComment;\n};\n\nconst explainActivityTable = (\n  file: string,\n  activity: any,\n  activityUsers: string[]\n) => {\n  if (!Object.keys(activity).length) {\n    return '\\n\\nNo activity in the last 6 months\\n\\n'; // can be extract to const NO_ACTIVITY_MESSAGE\n  }\n  if (activityUsers.length) {\n    let table = `\\n\\nActivity based on git-commit: \\n\\n |  | ${\n      activityUsers[0] ? activityUsers[0] : ' '\n    } | ${\n      activityUsers[1]\n        ? activityUsers[1] + '| \\n | --- | --- | --- | \\n '\n        : ' \\n | --- | --- | \\n'\n    }`;\n    table += explainActivityByMonth(activity, file, activityUsers);\n    return table;\n  }\n  return '';\n};\n\nconst explainKnowledgeSection = (\n  file: string,\n  knowledge: any,\n  knowledgeUsers: string[],\n  provider: string\n) => {\n  let knowledgeText = '';\n  const sortedAuthors = sortObject(knowledgeUsers, knowledge[file]);\n  sortedAuthors.forEach((author) => {\n    knowledgeText += knowledge[file][author]\n      ? `${author}: ${knowledge[file][author]}% \\n${\n          ADDITIONAL_FORMATTING[provider] || ADDITIONAL_FORMATTING.default\n        }`\n      : '';\n  });\n  return knowledgeText;\n};\n\nexport const explainActivityAndBlameComment = (\n  files: string[],\n  activity: any,\n  knowledge: any,\n  activityUsers: string[],\n  knowledgeUsers: string[],\n  provider: string\n) => {\n  try {\n    let comment = '<details>\\n <summary>See details</summary>\\n\\n';\n    files.forEach((file) => {\n      comment += `\\n\\`${file}\\` \\n ${explainActivityTable(\n        file,\n        activity,\n        activityUsers\n      )} \\n\\nKnowledge based on git-blame: \\n ${\n        ADDITIONAL_FORMATTING[provider] || ADDITIONAL_FORMATTING.default\n      }${explainKnowledgeSection(file, knowledge, knowledgeUsers, provider)}`;\n    });\n    comment += `\\n</details>\\n`;\n    return comment;\n  } catch (error) {\n    console.log('Error in creating explain code experts comment', error);\n    return '';\n  }\n};\n\nconst parseActivityByUserDataForExplain = (\n  activity: any,\n  file: string,\n  user: string\n) => {\n  return Object.keys(activity[file]).reduce((ac, date) => {\n    if (activity[file][date][user]) {\n      const formatedDate: string = MONTH[date.split('-')?.[1]];\n      return {\n        ...ac,\n        [formatedDate]: activity[file][date][user],\n      };\n    }\n    return ac;\n  }, {});\n};\nconst parseActivityByUserForExplain = (\n  activity: any,\n  file: string,\n  activeUsers: string[]\n) => {\n  return activeUsers.reduce((au, user) => {\n    const activityData = parseActivityByUserDataForExplain(\n      activity,\n      file,\n      user\n    );\n    return { ...au, [user]: activityData };\n  }, {});\n};\n\nexport const getExplainActivity = (\n  activity: ActivityExplain,\n  activeUsers: string[]\n) => {\n  return Object.keys(activity || {}).reduce((acc, file) => {\n    const userActivity = parseActivityByUserForExplain(\n      activity,\n      file,\n      activeUsers\n    );\n    return { ...acc, [file]: userActivity };\n  }, {});\n};\n\nexport const getExplainKnowledge = (\n  blame: FileMetric,\n  knowledgeUsers: string[]\n) => {\n  return Object.keys(blame || {}).reduce((acc, file) => {\n    const sortedAuthors = sortObject(knowledgeUsers, blame[file]);\n    const userKnowledge = sortedAuthors.reduce((au, user) => {\n      if (blame[file][user]) {\n        return {\n          ...au,\n          [user]: Math.round(blame[file][user] * 100),\n        };\n      }\n      return au;\n    }, {});\n    return { ...acc, [file]: userKnowledge };\n  }, {});\n};\n","import { rankByLinesArgs } from './filter-types';\nimport { FileMetadata } from '../context/types';\nimport {\n  filterExpertResult,\n  getAndFilterExpertReviewer,\n  getETR,\n  parseExpertReviewerThreshold,\n} from './async-filter-helper';\nimport { DOCS_LINK_COMMENT, handleAnalytics } from './common';\nimport {\n  explainActivityAndBlameComment,\n  explainExpertReviewerComment,\n  getExplainActivity,\n  getExplainKnowledge,\n} from './explain-expert-filter-helper';\nimport { HighLevelFilters } from './high-level-filters';\n\nconst DELETED_PATH = '/dev/null';\n\nexport const estimatedReviewTime = async (branch: any, callback: any) => {\n  handleAnalytics(HighLevelFilters.estimatedReviewTime, []);\n  const numOfFiles = branch.diff?.files_metadata.length;\n  const { additionalLines, deletedLines } = branch.diff?.files_metadata.reduce(\n    (acc: any, file: FileMetadata) => {\n      acc.additionalLines += file.additions;\n      acc.deletedLines += file.deletions;\n      return acc;\n    },\n    { additionalLines: 0, deletedLines: 0 }\n  );\n  const prFiles = branch.diff?.files_metadata.map(\n    (fileMetadata: FileMetadata) => ({\n      file_path:\n        fileMetadata.new_file !== DELETED_PATH\n          ? fileMetadata.new_file\n          : fileMetadata.original_file,\n      additions: fileMetadata.additions,\n      deletions: fileMetadata.deletions,\n    })\n  );\n  const reqBody = {\n    prMetadata: {\n      commits: branch.num_of_commits,\n      files: numOfFiles,\n      lines: additionalLines + deletedLines,\n    },\n    prFiles: prFiles,\n    prAdditionalLines: additionalLines,\n    prDeletedLines: deletedLines,\n    baseBranch: branch.base,\n    request_source: 'gitstream',\n  };\n\n  const { numericValue } = await getETR(reqBody);\n  callback(null, numericValue);\n};\n\nexport const parseExpertReviewer = async (\n  repo: any,\n  { gt = 0, lt = 0 }: rankByLinesArgs,\n  callback: any\n) => {\n  try {\n    handleAnalytics(HighLevelFilters.expertReviewer, [{ gt, lt }]);\n    const { dataWithoutIssuer } = await getAndFilterExpertReviewer(repo);\n    if (!Object.keys(dataWithoutIssuer).length) {\n      callback(null, []);\n    }\n\n    const expertReviewers = filterExpertResult(\n      dataWithoutIssuer,\n      gt,\n      lt,\n      'reviewer_score'\n    ).slice(0, 2);\n    callback(null, expertReviewers);\n  } catch (error) {\n    console.log('error:', error);\n    callback(null, []);\n  }\n};\n\nexport const parseExplainCodeExpertHandler = async (\n  repo: any,\n  args: rankByLinesArgs,\n  callback: any\n) => {\n  try {\n    const { gt, lt } = args;\n    const { data, dataWithoutIssuer, isIssuerFiltered } =\n      await getAndFilterExpertReviewer(repo);\n    if (!Object.keys(data).length || !Object.keys(dataWithoutIssuer).length) {\n      callback(null, []);\n    }\n    const expertReviewers = filterExpertResult(\n      dataWithoutIssuer,\n      gt,\n      lt,\n      'reviewer_score'\n    ).slice(0, 2);\n    const activeUsers = filterExpertResult(\n      data,\n      gt,\n      lt,\n      'avg_activity_score'\n    ).slice(0, 2);\n    const knowledgeUsers = filterExpertResult(\n      data,\n      gt,\n      lt,\n      'avg_blame_perc'\n    ).slice(0, 2);\n\n    const explainActivity = getExplainActivity(\n      data.explain?.activity,\n      activeUsers\n    );\n\n    const explainKnowledge = getExplainKnowledge(\n      data.explain?.blame,\n      knowledgeUsers\n    );\n\n    const explainComment = `${explainExpertReviewerComment(\n      expertReviewers,\n      activeUsers,\n      knowledgeUsers,\n      parseExpertReviewerThreshold(args),\n      repo.provider,\n      isIssuerFiltered && !Object.keys(expertReviewers).length\n    )} ${explainActivityAndBlameComment(\n      Array.from(\n        new Set([\n          ...Object.keys(explainActivity),\n          ...Object.keys(explainKnowledge),\n        ])\n      ),\n      explainActivity,\n      explainKnowledge,\n      activeUsers,\n      knowledgeUsers,\n      repo.provider\n    )} \\n\\n ${DOCS_LINK_COMMENT} \\n`;\n\n    const base64Comment = `base64: ${Buffer.from(explainComment).toString(\n      'base64'\n    )}`;\n\n    callback(null, base64Comment);\n  } catch (error) {\n    console.log('error:', error);\n    callback(``);\n  }\n};\n\nexport const parseCodeExperts = async (\n  repo: any,\n  { gt = 0, lt = 0 }: rankByLinesArgs,\n  callback: any\n) => {\n  handleAnalytics(HighLevelFilters.codeExperts, [{ gt, lt }]);\n  await parseExpertReviewer(repo, { gt, lt }, callback);\n};\n\nexport const parseExplainExpertReviewer = async (\n  repo: any,\n  args: rankByLinesArgs,\n  callback: any\n) => {\n  handleAnalytics(HighLevelFilters.explainExpertReviewer, [args]);\n  await parseExplainCodeExpertHandler(repo, args, callback);\n};\n\nexport const parseExplainCodeExperts = async (\n  repo: any,\n  args: rankByLinesArgs,\n  callback: any\n) => {\n  handleAnalytics(HighLevelFilters.explainCodeExperts, [args]);\n  await parseExplainCodeExpertHandler(repo, args, callback);\n};\n","import _ from 'lodash';\nimport prettier from 'prettier';\nimport { spawnSync } from 'child_process';\n\nconst PYTHON_COMMAND = 'python';\n\nexport const minify = (text: string) =>\n  text.replace(/\\s+/g, ' ').replaceAll(\"'\", '\"').trim();\n\nexport const removeEmptyLines = (text: string) =>\n  text.replace(/^\\s*[\\r\\n]/gm, '');\n\nexport const jsFormatter = (content: string, file: string) => {\n  return minify(\n    prettier.format(content, {\n      semi: false,\n      singleQuote: true,\n      filepath: file,\n    })\n  );\n};\nexport const pyFormatter = (content: string) => {\n  // Format the code with black\n  const blackResult = spawnSync(PYTHON_COMMAND, [\n    '-c',\n    `import black; print(black.format_str(${JSON.stringify(\n      content\n    )}, mode=black.FileMode()))`,\n  ]);\n  const formattedCode = blackResult.stdout.toString();\n  return removeEmptyLines(formattedCode);\n};\n\nconst SUPPORTED_FORMATTERS = {\n  js: jsFormatter,\n  ts: jsFormatter,\n  html: jsFormatter,\n  py: pyFormatter,\n  default: minify,\n};\nexport const format = (content: string, file: string) => {\n  const fileExtension = file.split('.').pop() ?? '';\n  const formatter = _.get(\n    SUPPORTED_FORMATTERS,\n    fileExtension,\n    SUPPORTED_FORMATTERS.default\n  );\n  return formatter(content, file);\n};\n\nexport const convertArgsToString = (args: any) => {\n  return Object.keys(args).map((key) => `${key}=${args[key]}`);\n};\n","export const SONAR_REGEX = {\n  BUGS: /\\[\\d+ Bugs?\\]/g,\n  VULNERABILITIES: /\\[\\d+ Vulnerabilit(?:ies|y)\\]/g,\n  SECURITY_HOTSPOTS: /\\[\\d+ Security Hotspots?\\]/g,\n  CODE_SMELL: /\\[\\d+ Code Smells?\\]/g,\n  DUPLICATIONS: /\\[(\\d+(\\.\\d+)?|\\.\\d+)%\\]/g,\n  COVERAGE: /\\[(\\d+(\\.\\d+)?|\\.\\d+)%\\]/g,\n  RATING: /!\\[([A-Z])\\]/g,\n};\n\nexport const getSonarPropertyRating = (str: string): string => {\n  const rawRating = str.match(SONAR_REGEX.RATING)?.[0];\n  const rating = rawRating?.substring(\n    rawRating.lastIndexOf('[') + 1,\n    rawRating.indexOf(']')\n  );\n  return rating ? rating : '';\n};\n\nexport const getSonarPropertyCount = (\n  row: string,\n  regex: any,\n  isFloat: boolean = false\n): number | null => {\n  const count =\n    (isFloat\n      ? parseFloat(row.match(regex)?.[0].split(/\\s+/)[0].replace('[', '') || '')\n      : parseInt(\n          row.match(regex)?.[0].split(/\\s+/)[0].replace('[', '') || ''\n        )) ?? null;\n  return isNaN(count) ? null : count;\n};\n","import { Sonar } from './types';\nimport {\n  SONAR_REGEX,\n  getSonarPropertyCount,\n  getSonarPropertyRating,\n} from './helpers';\nimport { handleAnalytics } from '../../common';\nimport { HighLevelFilters } from '../../high-level-filters';\n\nexport const parseSonarParser = (pr: any): string => {\n  handleAnalytics(HighLevelFilters.sonarParser, []);\n  let sonarObject: Sonar = {\n    bugs: { count: null, rating: '' },\n    code_smells: { count: null, rating: '' },\n    vulnerabilities: { count: null, rating: '' },\n    security_hotspots: { count: null, rating: '' },\n    duplications: null,\n    coverage: null,\n  };\n  const sonarComment = pr.comments.filter(\n    (comment: any) => comment.commenter === 'sonarcloud'\n  );\n  if (sonarComment.length) {\n    const sonarCommentArray = sonarComment[0].content.split('\\n');\n    sonarObject.bugs = {\n      count: getSonarPropertyCount(sonarCommentArray[2], SONAR_REGEX.BUGS),\n      rating: getSonarPropertyRating(sonarCommentArray[2]),\n    };\n    sonarObject.code_smells = {\n      count: getSonarPropertyCount(\n        sonarCommentArray[5],\n        SONAR_REGEX.CODE_SMELL\n      ),\n      rating: getSonarPropertyRating(sonarCommentArray[5]),\n    };\n\n    sonarObject.vulnerabilities = {\n      count: getSonarPropertyCount(\n        sonarCommentArray[3],\n        SONAR_REGEX.VULNERABILITIES\n      ),\n      rating: getSonarPropertyRating(sonarCommentArray[3]),\n    };\n\n    sonarObject.security_hotspots = {\n      count: getSonarPropertyCount(\n        sonarCommentArray[4],\n        SONAR_REGEX.SECURITY_HOTSPOTS\n      ),\n      rating: getSonarPropertyRating(sonarCommentArray[4]),\n    };\n    sonarObject.duplications = getSonarPropertyCount(\n      sonarCommentArray[8],\n      SONAR_REGEX.DUPLICATIONS,\n      true\n    );\n    sonarObject.coverage = getSonarPropertyCount(\n      sonarCommentArray[7],\n      SONAR_REGEX.COVERAGE,\n      true\n    );\n  }\n\n  return JSON.stringify(sonarObject);\n};\n","import _ from 'lodash';\nimport { Jit, Severity } from './types';\nimport { IPRContext } from '../../../context/types';\n\nconst JIT_USER = 'jit-ci';\n\nexport const parseJitReview = (review: any): Jit => {\n  const parsedReview: Jit = initEmptyJitObject();\n  const conversations = review.conversations;\n  conversations.forEach((conversation: any) => {\n    const content = conversation.content;\n    const lines = content.split('\\n');\n    const security_control = lines[0]?.split('**')[2]?.trim();\n    const type = lines[2]?.split('**')[2]?.trim();\n    const description = lines[4]?.split('**')[2]?.trim();\n    const severity: Severity = lines[6]?.split('**')[2]?.trim();\n    const _summary =\n      lines[10]?.split('<summary>')[1]?.split('</summary>')[0] ?? '';\n    const summary = _summary.replace(/<b>/g, '').replace(/<\\/b>/g, '');\n    parsedReview.vulnerabilities.push({\n      security_control,\n      type,\n      description,\n      severity,\n      summary,\n    });\n    parsedReview.metrics[severity] = (parsedReview.metrics[severity] ?? 0) + 1;\n  });\n  return parsedReview;\n};\n\nexport const unifyReviews = (parsedReviews: Jit[], jitObject: Jit) => {\n  return parsedReviews.reduce(\n    (acc: any, review: any) => {\n      console.log({ acc, review });\n      return {\n        ...acc,\n        vulnerabilities: [...acc.vulnerabilities, ...review.vulnerabilities],\n        metrics: _.mergeWith(\n          acc.metrics,\n          review.metrics,\n          (a, b) => (a || 0) + (b || 0)\n        ),\n      };\n    },\n    { ...jitObject }\n  );\n};\n\nexport const extractJitCommentsFromPR = (pr: IPRContext) => {\n  return pr.reviews.filter(\n    ({ commenter }: { commenter: string }) => commenter === JIT_USER\n  );\n};\n\nexport const initEmptyJitObject = () => {\n  return {\n    vulnerabilities: [],\n    metrics: {\n      HIGH: null,\n      MEDIUM: null,\n      LOW: null,\n      INFO: null,\n    },\n  };\n};\n","import { parseJitComments } from './jit';\nexport default { extractJitFindings: parseJitComments };\n","import { IPRContext } from '../../../context/types';\nimport { handleAnalytics } from '../../common';\nimport { HighLevelFilters } from '../../high-level-filters';\nimport {\n  extractJitCommentsFromPR,\n  initEmptyJitObject,\n  parseJitReview,\n  unifyReviews,\n} from './helpers';\nimport _ from 'lodash';\n\nexport const parseJitComments = (pr: IPRContext): string => {\n  handleAnalytics(HighLevelFilters.extractJitFindings, []);\n  const jitComments = extractJitCommentsFromPR(pr);\n  const jitObject = initEmptyJitObject();\n  if (_.isEmpty(jitComments)) {\n    return JSON.stringify(jitObject);\n  }\n  const parsedReviews = jitComments.map(parseJitReview);\n  return JSON.stringify(unifyReviews(parsedReviews, jitObject));\n};\n","import prettier from 'prettier';\nimport { File } from '../context/types';\n\nconst parseFilterAllFilePath = (files: string[], searchArray: string[]) => {\n  return (\n    files.length &&\n    files\n      .map((filePath: string) =>\n        searchArray.some((term: string) => (filePath || '').includes(term))\n      )\n      .every((x: boolean) => x === true)\n  );\n};\n\nconst parseIsEveryExtension = (files: string[], extensions: string[]) => {\n  return parseFilterAllFilePath(\n    files\n      .map((filePath: string) => filePath.split('.').pop() || '')\n      .filter((value, index, array) => array.indexOf(value) === index),\n    extensions\n  );\n};\n\nconst parseIsEveryExtensionRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  const extensions = files\n    .map((filePath: string) => filePath.split('.').pop() || '')\n    .filter((value, index, array) => array.indexOf(value) === index);\n\n  return (\n    extensions.length > 0 &&\n    extensions\n      .map((filePath: string) => re.test(filePath))\n      .every((match: any) => match)\n  );\n};\n\nconst parseExtractExtensions = (files: string[]) =>\n  files.length &&\n  files\n    // extensions\n    .map((x: string) => x.split('.').pop())\n    // unique\n    .filter((value, index, array) => array.indexOf(value) === index);\n\nconst parseIsStringIncludes = (file: string, terms: string[]) =>\n  terms.some((term: any) => file.includes(term));\n\nconst parseIsStringIncludesRegex = (file: string, filter: string) => {\n  const re = new RegExp(filter);\n  return re.test(file);\n};\n\nconst parseRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  return files.length\n    ? files.map((file: any) => re.test(file)).every((match: any) => match)\n    : false;\n};\n\nconst parseIsEveryInListRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  return files.length\n    ? files.map((file: any) => re.test(file)).every((match: any) => match)\n    : false;\n};\n\nconst parseIsEveryInList = (files: string[], filters: string[]) => {\n  return files.length\n    ? files\n        .filter((file: any) => filters.includes(file))\n        .every((match: any) => match)\n    : false;\n};\n\nconst parseIsSomeInList = (files: string[], searchTerms: string[]) => {\n  return files.length\n    ? files\n        .filter((file: any) => searchTerms.includes(file))\n        .some((match: any) => match)\n    : false;\n};\n\nconst parseIncludesRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  return files.length\n    ? files.map((file: any) => re.test(file)).some((match: any) => match)\n    : false;\n};\n\nconst parseIsSomeInListRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  return files.length\n    ? files.map((file: any) => re.test(file)).some((match: any) => match)\n    : false;\n};\n\nconst parseFilterRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  return files.length ? files.filter((file: any) => re.test(file)) : false;\n};\n\nconst parseFilterListRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  return files.length ? files.filter((file: any) => re.test(file)) : false;\n};\n\nconst parseFilterList = (files: string[], filters: string[]) => {\n  return files.length\n    ? files.filter((file: any) => filters.includes(file))\n    : false;\n};\n\nconst minify = (text: string) =>\n  text.replace(/\\s+/g, ' ').replaceAll(\"'\", '\"').trim();\n\nconst allFormattingChange = (files: File[]) => {\n  try {\n    const allFormatting = files.every(\n      ({ new_content, original_content, original_file, new_file }) => {\n        const formattedNew = prettier.format(new_content, {\n          semi: false,\n          singleQuote: true,\n          filepath: new_file,\n        });\n        const formattedOld = prettier.format(original_content, {\n          semi: false,\n          singleQuote: true,\n          filepath: original_file,\n        });\n        return minify(formattedNew) === minify(formattedOld);\n      }\n    );\n    return allFormatting;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst parseFilterFileDiffRegex = (files: File[], filterRegex: string) => {\n  const re = new RegExp(filterRegex, 'm');\n  return files.length ? files.filter(({ diff }) => re.test(diff)) : false;\n};\n\nconst parseIsEveryLineInFileDiffRegex = (\n  files: File[],\n  filterRegex: string\n) => {\n  const re = new RegExp(filterRegex, 'm');\n  return files.length\n    ? files.map(({ diff }) => re.test(diff)).every((match: any) => match)\n    : false;\n};\n\nconst parseIsSomeLineInFileDiffRegex = (files: File[], filterRegex: string) => {\n  const re = new RegExp(filterRegex, 'm');\n  return files.length\n    ? files.map(({ diff }) => re.test(diff)).some((match: any) => match)\n    : false;\n};\n\nconst parseFilterAllExtensions = (files: string[], extensions: string[]) => {\n  return files.length\n    ? parseFilterAllFilePath(\n        files.map((filePath: string) => filePath.split('.').pop() || ''),\n        extensions\n      )\n    : false;\n};\n\nexport enum Filters {\n  allExtensions = 'allExtensions',\n  includes = 'includes',\n  allPassRegex = 'allPassRegex',\n  allPathIncludes = 'allPathIncludes',\n  filterRegex = 'filterRegex',\n  includesRegex = 'includesRegex',\n  true = 'true',\n  allFormattingChange = 'allFormattingChange',\n  filterList = 'filterList',\n  filterListRegex = 'filterListRegex',\n  isEveryInListRegex = 'isEveryInListRegex',\n  isSomeInList = 'isSomeInList',\n  isSomeInListRegex = 'isSomeInListRegex',\n  isStringIncludes = 'isStringIncludes',\n  isStringIncludesRegex = 'isStringIncludesRegex',\n  isEveryInList = 'isEveryInList',\n  extractExtensions = 'extractExtensions',\n  isEveryExtension = 'isEveryExtension',\n  isEveryExtensionRegex = 'isEveryExtensionRegex',\n  filterFileDiffRegex = 'filterFileDiffRegex',\n  isEveryLineInFileDiffRegex = 'isEveryLineInFileDiffRegex',\n  isSomeLineInFileDiffRegex = 'isSomeLineInFileDiffRegex',\n}\n\nexport const FILTER_HANDLERS: any = {\n  [Filters.filterList]: parseFilterList,\n  [Filters.filterListRegex]: parseFilterListRegex,\n  [Filters.isEveryInListRegex]: parseIsEveryInListRegex,\n  [Filters.isSomeInList]: parseIsSomeInList,\n  [Filters.isSomeInListRegex]: parseIsSomeInListRegex,\n  [Filters.isStringIncludes]: parseIsStringIncludes,\n  [Filters.isStringIncludesRegex]: parseIsStringIncludesRegex,\n  [Filters.isEveryInList]: parseIsEveryInList,\n  [Filters.extractExtensions]: parseExtractExtensions,\n  [Filters.isEveryExtension]: parseIsEveryExtension,\n  [Filters.isEveryExtensionRegex]: parseIsEveryExtensionRegex,\n  [Filters.true]: () => true,\n  [Filters.filterFileDiffRegex]: parseFilterFileDiffRegex,\n  [Filters.isEveryLineInFileDiffRegex]: parseIsEveryLineInFileDiffRegex,\n  [Filters.isSomeLineInFileDiffRegex]: parseIsSomeLineInFileDiffRegex,\n  //TODO: remove soon - those filters are deprecated!\n  [Filters.allExtensions]: parseFilterAllExtensions,\n  [Filters.allPassRegex]: parseRegex,\n  [Filters.allPathIncludes]: parseFilterAllFilePath,\n  [Filters.filterRegex]: parseFilterRegex,\n  [Filters.includesRegex]: parseIncludesRegex,\n  [Filters.allFormattingChange]: allFormattingChange,\n};\n","export enum DefaultParserAttributes {\n  cbLeft = '_GITSTREAM_CB_LEFT_',\n  cbRight = '_GITSTREAM_CB_RIGHT_',\n  automations = 'automations',\n  errors = 'errors',\n  analytics = 'analytics',\n  validatorErrors = 'validatorErrors',\n}\n\nexport type Run = { action: string; args?: any };\n\nexport interface RulesParserError {\n  [statusCode: number]: string;\n}\n","export enum Validators {\n  FiltersValidator = 'FiltersValidator',\n  ActionsValidator = 'ActionsValidator',\n  FileStructureValidator = 'FileStructureValidator',\n  SavedWordsValidator = 'SavedWordsValidator',\n  ContextVariableValidator = 'ContextVariableValidator',\n}\n","// @ts-nocheck\nimport * as Amplitude from '@amplitude/node';\nimport { debug } from '../logger';\nimport { generatePrUrl } from './analytics.handler';\n\nconst FILTER_EVENT_TYPE = 'gitstream-filter-function';\n\nclass AmplitudeEvent {\n  constructor(\n    { owner, repo, pullRequestNumber, hasCmRepo },\n    filterName,\n    args,\n    context\n  ) {\n    this.filterName = filterName;\n    this.user_id = `${context.repo?.provider}/${owner}/${repo}/${pullRequestNumber}`;\n    this.args = args;\n    this.repo = `${context.repo?.provider}/${owner}/${repo}`;\n    this.author = `${context.repo?.provider}/${context.repo?.pr_author}`;\n    this.org = `${context.repo?.provider}/${owner}`;\n    this.pr_url = generatePrUrl(context, {\n      owner,\n      repo,\n      pullRequestNumber,\n    });\n    this.level = hasCmRepo ? 'Org' : 'Repo';\n  }\n  get() {\n    return {\n      event_type: FILTER_EVENT_TYPE,\n      user_id: this.user_id,\n      event_properties: {\n        filter_name: this.filterName,\n        args: this.args,\n        repo: this.repo,\n        author: this.author,\n        org: this.org,\n        pr_url: this.pr_url,\n        level: this.level,\n      },\n    };\n  }\n}\n\nlet client;\nconst initAmplitude = ({ analyticsHttpApiUrl, analyticsKey }) => {\n  client = Amplitude.init(analyticsKey, {\n    serverUrl: analyticsHttpApiUrl,\n  });\n};\n\nexport const sendAmplitudeEvent = async (payload, event, args, context) => {\n  if (!client) {\n    initAmplitude(payload);\n  }\n  try {\n    const ampEvent = new AmplitudeEvent(payload, event, args, context).get();\n    await client.logEvent(ampEvent);\n  } catch (e) {\n    debug(\n      `Sending event to amplitude failed with the following error ${JSON.stringify(\n        e\n      )}`\n    );\n  }\n};\n","import _ from 'lodash';\nimport {\n  validatorsConstants,\n  FiltersValidator,\n  ActionsValidator,\n  FileStructureValidator,\n  SavedWordsValidator,\n  ContextVariableValidator,\n} from '@linearb/gitstream-core-js';\nimport * as yaml from 'js-yaml';\nimport * as nunjucks from 'nunjucks';\nimport { ERRORS, STATUS_CODES } from '../consts';\nimport { listify } from './args.definitions';\nimport { Context } from './context/types';\nimport { GENERAL_FILTERS_HANDLER } from './filters/general-filters';\nimport {\n  ASYNC,\n  HIGH_LEVEL_FILTERS_HANDLER,\n} from './filters/high-level-filters';\nimport { FILTER_HANDLERS } from './old-filters/filters';\nimport { DefaultParserAttributes, RulesParserError, Run } from './types';\nimport { FiltersForAnalytics } from './filters/common';\nimport { convertArgsToString } from '../utils/formatters';\nimport { Validators } from './validators-types';\n\nexport default class RuleParser {\n  private env: nunjucks.Environment;\n  private renderedRuleFile: any = {};\n  private context: Context | {} = {};\n  private ruleFileRawContent: string;\n  private lastParserResult: any = {};\n  private isDebug: boolean | string;\n  private errors: RulesParserError = {};\n  private validatorErrors = {};\n\n  constructor(\n    ruleFileContent: string,\n    context: Context,\n    debugMode: boolean | string\n  ) {\n    this.isDebug = debugMode;\n    this.env = new nunjucks.Environment(\n      new nunjucks.FileSystemLoader(__dirname),\n      { autoescape: false }\n    );\n\n    const allFilters: any = {\n      ...GENERAL_FILTERS_HANDLER,\n      ...HIGH_LEVEL_FILTERS_HANDLER,\n      ...FILTER_HANDLERS,\n    };\n\n    Object.keys(allFilters).forEach((filter: any) => {\n      this.env.addFilter(filter, allFilters[filter], ASYNC[filter]);\n    });\n\n    this.context = context;\n    this.ruleFileRawContent = ruleFileContent;\n    if (this.isDebug) {\n      console.log({\n        context: JSON.stringify(this.context, null, 2),\n        ruleFile: ruleFileContent,\n      });\n    }\n  }\n\n  private async render(\n    context = { ...this.context, ...this.renderedRuleFile }\n  ) {\n    let reRenders = 3;\n    let currentContext = context;\n    while (reRenders) {\n      const dataAsString = this.ruleFileRawContent;\n      await new Promise((resolve, reject) =>\n        this.env.renderString(dataAsString, currentContext, (err, res) => {\n          if (err) {\n            if (this.isDebug) {\n              console.log(ERRORS.FAILED_RENDER_STRING, err);\n            }\n            reject(err);\n            return;\n          }\n          try {\n            this.renderedRuleFile = yaml.load(res!);\n          } catch (error) {\n            if (this.isDebug) {\n              console.log(ERRORS.FAILED_YAML_LOAD, error);\n            }\n            this.renderedRuleFile = {\n              ...this.renderedRuleFile,\n              errors: {\n                ...(Object.keys(this.errors).length && this.errors),\n                [STATUS_CODES.FAILED_YAML_LOAD]: ERRORS.FAILED_YAML_LOAD,\n              },\n            };\n          }\n          resolve(this);\n        })\n      );\n      reRenders -= 1;\n      currentContext = { ...this.context, ...this.renderedRuleFile };\n    }\n  }\n\n  private validateRun(runs: Run[]) {\n    if (!runs) {\n      return runs;\n    }\n    return runs.map((run) => {\n      if (!run.args) {\n        return run;\n      }\n      const newArgs = Object.keys(run.args).reduce((acc: any, arg: string) => {\n        const argValue = run.args[arg];\n        return {\n          ...acc,\n          [arg]:\n            argValue && listify.includes(arg) && typeof argValue === 'string'\n              ? argValue.split(',')\n              : run.args[arg],\n        };\n      }, {});\n      return { ...run, args: newArgs };\n    });\n  }\n\n  private combineMetadataWithRulesResult(resourceName: string) {\n    if (!this.renderedRuleFile[resourceName]) {\n      return {};\n    }\n    return Object.keys(this.renderedRuleFile[resourceName]).reduce(\n      (acc, resource) => {\n        const rules: any = this.renderedRuleFile[resourceName][resource].if.map(\n          (result: any) => {\n            return {\n              passed: result,\n            };\n          }\n        );\n        const passed = rules\n          .map(({ passed }: { passed: any }) => passed)\n          .every((pass: any) =>\n            typeof pass === 'object' ? !!Object.keys(pass || {}).length : !!pass\n          );\n        return {\n          ...acc,\n          [resource]: {\n            if: rules,\n            run: this.validateRun(\n              this.renderedRuleFile[resourceName][resource].run\n            ),\n            passed,\n          },\n        };\n      },\n      {}\n    );\n  }\n\n  private combineMetadataWithResult() {\n    this.lastParserResult = {\n      [DefaultParserAttributes.errors]: {\n        ...(Object.keys(this.errors).length && this.errors),\n      },\n      [DefaultParserAttributes.validatorErrors]: {\n        ...(Object.keys(this.validatorErrors).length && this.validatorErrors),\n      },\n      [DefaultParserAttributes.automations]: {\n        ...this.combineMetadataWithRulesResult(\n          DefaultParserAttributes.automations\n        ),\n      },\n      [DefaultParserAttributes.analytics]: {\n        ...(Object.keys(FiltersForAnalytics.filters).length &&\n          FiltersForAnalytics.filters),\n      },\n    };\n    return this.lastParserResult;\n  }\n\n  clearParserResults() {\n    this.renderedRuleFile = {};\n    this.ruleFileRawContent = '';\n    this.lastParserResult = {};\n  }\n\n  async attachAdditionalArgs() {\n    const latestResults = _.cloneDeep(this.lastParserResult);\n    const newAutomations = { ...latestResults.automations };\n    for (const automation of Object.keys(newAutomations)) {\n      for (const run of newAutomations[automation].run) {\n        if (\n          run.action ===\n          validatorsConstants.SUPPORTED_ACTIONS.EXPLAIN_CODE_EXPERTS\n        ) {\n          this.clearParserResults();\n          this.ruleFileRawContent = `comment: |\n          {{ repo | explainCodeExperts(${convertArgsToString(run.args)}) }}`;\n          await this.render();\n          run.args.comment = this.renderedRuleFile.comment;\n        }\n      }\n    }\n    this.lastParserResult = { ...latestResults, automations: newAutomations };\n    return this.lastParserResult;\n  }\n\n  validateCM(): void {\n    //TODO: in the near future we will add operational validators\n    // which will break gitstream\n    const validators: any = {\n      [Validators.FiltersValidator]: new FiltersValidator(),\n      [Validators.ActionsValidator]: new ActionsValidator(),\n      [Validators.FileStructureValidator]: new FileStructureValidator(),\n      [Validators.SavedWordsValidator]: new SavedWordsValidator(),\n      [Validators.ContextVariableValidator]: new ContextVariableValidator(),\n    };\n    Object.keys(validators).forEach((validator) => {\n      try {\n        validators[validator].validate({ yamlFile: this.ruleFileRawContent });\n      } catch (error) {\n        if (this.isDebug) {\n          console.log(`${validator} error: `, error);\n        }\n        this.validatorErrors = {\n          ...(Object.keys(this.validatorErrors).length && this.validatorErrors),\n          [validator]: `${error}`,\n        };\n      }\n    });\n  }\n\n  async parseStreams() {\n    this.validateCM();\n    await this.render();\n    this.combineMetadataWithResult();\n    await this.attachAdditionalArgs();\n\n    return this.lastParserResult;\n  }\n}\n","export const RULES_RESOLVER_URL = process.env.RULES_RESOLVER_URL;\nexport const HEAD_REF = process.env.HEAD_REF;\nexport const BASE_REF = process.env.BASE_REF;\nexport const CLIENT_PAYLOAD = process.env.CLIENT_PAYLOAD || '{}';\nexport const RESOLVER_TOKEN = process.env.RULES_RESOLVER_TOKEN;\nexport const DEBUG_MODE = process.env.DEBUG_MODE === 'true';\nexport const USE_CACHE = process.env.USE_CACHE === 'true';\nexport const ERRORS = {\n  SYNTAX_ERROR: 'syntax error',\n  RULE_FILE_NOT_FOUND: 'Rule file not found',\n  FAILED_TO_EXTRACT_ADMINS:\n    'gitstream.cm file not found - failed to extract admins',\n  SEND_RESULTS_TO_RESOLVER_FAILED:\n    'Failed sending evaluated rules to the resolver.',\n  SEND_RESULTS_TO_RESOLVER_SUCCEEDED:\n    'Sending evaluated rules to the resolver succeeded',\n  FAILED_TO_GET_CONTEXT: 'Failed getting PR context.',\n  FAILED_PARSE_CM_FILE: 'Failed while parsing CM file, to extract CM config',\n  MISSING_KEYWORD: 'Missing `automations` keyword in *.cm',\n  MALFORMED_EXPRESSION:\n    'There are spaces between the currly braces { { and } }',\n  FAILED_TO_PARSE_CM: 'Failed to parse cm',\n  FAILED_TO_GET_WATCHERS: 'Failed to get watchers from rules files',\n  GIT_COMMAND_FAILED: 'Git command failed. reason:',\n  INTERNAL_ERROR: 'gitstream-rules-engine internal error',\n  INVALID_CACHE: 'Invalid cache',\n  VALIDATOR_ERROR: 'Validator error',\n  FAILED_PARSE_RULES_PARSER_ERRORS: 'Failed parse rules parser errors',\n};\n\nexport const STATUS_CODES = {\n  SEND_RESULTS_TO_RESOLVER_FAILED: 50,\n  FAILED_TO_GET_CONTEXT: 40,\n  SYNTAX_ERROR: 60,\n  MISSING_KEYWORD: 61,\n  UNSUPPORTED_ACTION: 62,\n  UNSUPPORTED_ARGUMENT: 63,\n  MALFORMED_EXPRESSION: 64,\n  MISSING_REQUIRED_FIELDS: 65,\n  FAILED_TO_PARSE_CM: 66,\n  BAD_REVISION: 67,\n  INTERNAL_ERROR: 68,\n  RULE_FILE_NOT_FOUND: 70,\n  FAILED_TO_GET_WATCHERS: 71,\n  INVALID_CACHE: 72,\n  FAILED_PARSE_RULES_PARSER_ERRORS: 73,\n};\n\nexport const NOT_FOUND_FILE_PATH = '/dev/null';\n\nexport const IGNORE_PATTERNS_IN_DRY_RUN = [/.*.cm$/];\n\nexport const GIT_PROVIDER = {\n  GITHUB: 'github',\n  GITLAB: 'gitlab',\n};\n\nexport const ORG_LEVEL_REPO = 'cm';\n\nexport const WATCH_PR_EVENTS = {\n  APPROVALS: 'approvals',\n  CHECKS: 'checks',\n  DRAFT: 'draft',\n  DESCRIPTION: 'description',\n  REVIEWERS: 'reviewers',\n  STATUS: 'status',\n  TITLE: 'title',\n  LABELS: 'labels',\n};\n\nexport const WATCH_FILTERS = {\n  sonarParser: /\\bpr\\s*\\|\\s*sonarParser\\b/g,\n  extractSonarFindings: /\\bpr\\s*\\|\\s*extractSonarFindings\\b/g,\n};\n\nexport const RULES_PARSER_STATUS_CODES = {\n  FAILED_RENDER_STRING: 80,\n  FAILED_YAML_LOAD: 81,\n  INVALID_CM: 82,\n  INVALID_CM_CONTEXT_VARIABLES: 83,\n};\n","// @ts-nocheck\nimport axios from 'axios';\nimport { CLIENT_PAYLOAD, DEBUG_MODE } from './const';\n\nconst sendLogToDD = async (logData) => {\n  const { ddApiKey, env } = JSON.parse(CLIENT_PAYLOAD);\n  const data = {\n    ...logData,\n    env,\n    ddtags: `env:${env}`,\n    host: 'gitstream-github-action',\n  };\n  try {\n    const res = await axios({\n      method: 'post',\n      url: `https://http-intake.logs.datadoghq.com//api/v2/logs?dd-api-key=${ddApiKey}&ddsource=nodejs&service=gitstream-rules-engine`,\n      data,\n      headers: { 'Content-type': 'application/json' },\n    });\n    return res;\n  } catch (error) {\n    console.error(`Failed sending logs to datadog`);\n  }\n};\n\nexport const debug = (message) => {\n  if (DEBUG_MODE) {\n    console.log(message);\n  }\n};\n\nexport const prepareSendingLogsToDD = async (\n  level,\n  message,\n  payload,\n  extraData = {},\n  shouldReport = false\n) => {\n  if (DEBUG_MODE || shouldReport) {\n    const { owner, repo, pullRequestNumber, branch, triggeredBy } = payload;\n    await sendLogToDD({\n      level,\n      message,\n      data: {\n        ...(Object.keys(extraData).length && extraData),\n        org: owner,\n        repo,\n        pullRequestNumber,\n        branch,\n        triggeredBy,\n      },\n    });\n  }\n};\n","// @ts-nocheck\nexport const ACTIVITY_SINCE = '52 weeks ago';\n\nexport const gitCommands = {\n  GIT_BLAME: ({ branch, file }) =>\n    `git blame '${branch}' --line-porcelain -- '${file}'`,\n  GIT_LOG: ({ file }) => `git log -- '${file}'`,\n  GIT_BLAME_AUTHORS_FORMAT: () =>\n    `| grep '^author-mail\\\\|^author ' | sed '$!N;s/\\\\n/ /'`,\n  GIT_BLAME_STRING: () => `| sed -n '/^author /,/^author-mail /p'`,\n  COMMITER_PER_FILE: ({ file }) =>\n    `git shortlog -s -n --all --no-merges '${file}'`,\n  COMMITS_DATE_BY_AUTHOR: ({ branch, author }) =>\n    `git log '${branch}' --author='${author}' --format='%as' | sort | uniq`,\n  GIT_ACTIVITY: ({ branch, file, since }) =>\n    `git log --no-merges '${branch}' --since='${since}' --pretty=tformat:'%an <%ae>,%ad' --numstat -- '${file}'`,\n  AUTHORS_COUNT: () => `git log --format='%an <%ae>' | sort | uniq`,\n  REPO_FILES_COUNT: () => `git ls-files | wc -l`,\n  FIRST_COMMIT: ({ branch }) =>\n    `git rev-list --max-parents=0 '${branch}' --format=\"%cs\"`,\n};\n\nexport const GIT_ERRORS = {\n  GETTING_ALL_AUTHORS: 'Failed getting all authors of file',\n  GETTING_AUTHOR_LINES: 'Failed getting author lines of file',\n  GETTING_GIT_BLAME: 'Failed getting git blame of file',\n};\n\nexport const GIT_INFO = {\n  RAW_GIT_COMMANDS: 'Raw git commands for file in pr',\n  NO_DATA_FROM_GIT: 'No data returned from git in pr',\n};\n\nexport const REPO_FOLDER = {\n  DEFAULT: 'repo',\n  CM: 'cm',\n};\n\nexport const GIT_ERROR_TYPE = {\n  BAD_REVISION: 'bad revision',\n};\n\nexport const MAIN_RULES_FILE = 'gitstream.cm';\n","// @ts-nocheck\nimport { DEBUG_MODE, NOT_FOUND_FILE_PATH } from '../../common/const';\nimport { debug, prepareSendingLogsToDD } from '../../common/logger';\nimport { executeGitCommand, readRemoteFile } from '../git.service';\nimport { ACTIVITY_SINCE, gitCommands, GIT_ERRORS, GIT_INFO } from './const';\nimport _ from 'lodash';\n\nexport const groupByWeek = (activity) => {\n  const weekSum = activity.reduce((acc, cur, i) => {\n    const item =\n      i > 0 &&\n      acc.find(\n        ({ git_user, week }) => git_user === cur.git_user && week === cur.week\n      );\n    if (item) {\n      item.changes += cur.changes;\n      item.week = cur.week;\n    } else {\n      acc.push({\n        git_user: cur.git_user,\n        week: cur.week,\n        changes: cur.changes,\n      });\n    }\n    return acc;\n  }, []);\n\n  return weekSum.reduce((accSum, { git_user, week, changes }) => {\n    accSum[git_user] = accSum[git_user] || {};\n    accSum[git_user] = { ...accSum[git_user], [`week_${week}`]: changes };\n    return { ...accSum };\n  }, {});\n};\n\nexport const calculateLinesPercentage = (authorLines, allLinesCount) =>\n  authorLines && allLinesCount\n    ? authorLines >= allLinesCount\n      ? 100\n      : parseFloat(authorLines / allLinesCount) * 100\n    : 0;\n\nexport const formatDateToDays = async (date, context, payload) => {\n  if (!date) {\n    const { owner, repo, pullRequestNumber } = payload;\n    debug(\n      `Couldn't find git dates for author: ${context.branch.author}, base branch: ${context.branch.base}, head branch: ${context.branch.name}`\n    );\n    await prepareSendingLogsToDD(\n      'info',\n      `${GIT_INFO.NO_DATA_FROM_GIT} ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      {\n        author: context.branch.author,\n        baseBranch: context.branch.base,\n        headBranch: context.branch.name,\n      },\n      DEBUG_MODE\n    );\n    return 0;\n  }\n  const today = new Date();\n  const formattedDate = new Date(date);\n  return Math.abs(\n    parseInt((formattedDate - today) / (1000 * 60 * 60 * 24), 10)\n  );\n};\n\n//report git logs to DD - use carefully because it's the user's data\nexport const reportGitCommandsAndResults = async (file, branch, payload) => {\n  if (file === NOT_FOUND_FILE_PATH) {\n    //old file\n    return;\n  }\n  const { owner, repo, pullRequestNumber } = payload;\n  const gitBlameCommand = gitCommands.GIT_BLAME({ file, branch });\n  const gitActivityCommand = gitCommands.GIT_ACTIVITY({\n    file,\n    branch,\n    since: ACTIVITY_SINCE,\n  });\n  const gitLogCommand = gitCommands.GIT_LOG({ file });\n\n  try {\n    const gitBlame = executeGitCommand(gitBlameCommand)?.replace(/\\n/g, '\\\\n');\n    const gitActivity = executeGitCommand(gitActivityCommand)\n      ?.split('\\n')\n      ?.filter(Boolean);\n    const gitLog = executeGitCommand(gitLogCommand)?.replace(/\\n/g, '\\\\n');\n\n    const extraData = {\n      file,\n      gitBlameCommand,\n      gitActivityCommand,\n      gitLogCommand,\n      gitBlame,\n      gitActivity,\n      gitLog,\n    };\n    await prepareSendingLogsToDD(\n      'info',\n      `${GIT_INFO.RAW_GIT_COMMANDS} ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      extraData,\n      DEBUG_MODE\n    );\n  } catch (error) {\n    return;\n  }\n};\n\nexport const getAllAuthorsOfFile = (file, branch) => {\n  try {\n    const gitCommand = `${gitCommands.GIT_BLAME({\n      file,\n      branch,\n    })} ${gitCommands.GIT_BLAME_AUTHORS_FORMAT()}`;\n    const rawAuthors = executeGitCommand(gitCommand);\n\n    const authors = [\n      ...Array.from(\n        new Set(\n          rawAuthors\n            ?.replaceAll('author ', '')\n            .replaceAll('author-mail ', '')\n            .split('\\n')\n        )\n      ),\n    ]?.filter(Boolean);\n\n    return authors;\n  } catch (error) {\n    console.log(`${GIT_ERRORS.GETTING_ALL_AUTHORS} ${file}. ${error}`);\n    return [];\n  }\n};\n\nconst getAuthorLines = (allAuthors, author, file) => {\n  try {\n    const authorFormatted = `author ${author\n      ?.substring(0, author.indexOf('<') - 1)\n      ?.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\nauthor-mail ${author\n      ?.substring(author.indexOf('<'), author.indexOf('>') + 1)\n      .replace('+', '\\\\+')}`;\n\n    const regex = new RegExp(authorFormatted, 'g');\n\n    debug(\n      `formatted author: ${authorFormatted}. matches: ${\n        (allAuthors.match(regex) || []).length\n      }`\n    );\n\n    return (allAuthors.match(regex) || []).length;\n  } catch (error) {\n    console.log(`${GIT_ERRORS.GETTING_AUTHOR_LINES} ${file}. ${error}`);\n    return '0';\n  }\n};\n\nexport const getGitBlameString = (file, branch) => {\n  try {\n    const gitCommand = `${gitCommands.GIT_BLAME({\n      file,\n      branch,\n    })} ${gitCommands.GIT_BLAME_STRING()}`;\n    const allAuthors = executeGitCommand(gitCommand);\n    return allAuthors;\n  } catch (error) {\n    console.log(`${GIT_ERRORS.GETTING_GIT_BLAME} ${file}. ${error}`);\n    return '0';\n  }\n};\n\nexport const calculateStatisticsForBlame = (\n  allAuthors,\n  author,\n  file,\n  branch\n) => {\n  const authorLines = parseInt(getAuthorLines(allAuthors, author, file)) || '';\n  const allLinesCount = parseInt(getCodeLinesCount(file, branch));\n  debug(`calculateStatisticsForBlame: ${authorLines}, ${allLinesCount}`);\n  return { authorLines, allLinesCount };\n};\n\nconst readRemoteFileAndSplit = (file, branch) =>\n  readRemoteFile(file, branch)?.split(/\\r\\n|\\r|\\n/);\n\nconst isLastRowEmpty = (file, branch) => {\n  const allRows = readRemoteFileAndSplit(file, branch);\n  debug(\n    `all rows: ${allRows.length}. isEmpty: ${\n      allRows?.[allRows?.length - 1] === '' ? true : false\n    }`\n  );\n  return allRows?.[allRows?.length - 1] === '' ? true : false;\n};\n\nconst getCodeLinesCount = (file, branch) =>\n  isLastRowEmpty(file, branch)\n    ? readRemoteFileAndSplit(file, branch)?.length - 1\n    : readRemoteFileAndSplit(file, branch)?.length;\n\nexport const extractStatsFromRawItems = (rawItems) =>\n  rawItems?.reduce((acc, item) => {\n    const author = {\n      [item.replace(/ /g, '').trim().split('\\t')[1]]: {\n        count: item.replace(/ /g, '').trim().split('\\t')[0],\n      },\n    };\n    return { ...acc, ...author };\n  }, {});\n\nexport const splitDsAndBlameObjects = (blames) => {\n  let formattedBlame = _.cloneDeep(blames);\n  const dsBlame = Object.keys(formattedBlame).reduce((ac, key) => {\n    return { ...ac, [key]: formattedBlame[key].dsBlame };\n  }, {});\n\n  Object.keys(formattedBlame).forEach((file) => {\n    if (formattedBlame[file].dsBlame) {\n      delete formattedBlame[file].dsBlame;\n    }\n  });\n  return { formattedBlame, dsBlame };\n};\n\nexport const splitDsAndActivity = (gitActivity) => {\n  const formattedActivity = _.cloneDeep(gitActivity);\n  const dsActivity = Object.keys(formattedActivity).reduce((ac, key) => {\n    return { ...ac, [key]: formattedActivity[key].dsActivity };\n  }, {});\n\n  Object.keys(formattedActivity).forEach((file) => {\n    if (formattedActivity[file].dsActivity) {\n      delete formattedActivity[file].dsActivity;\n    }\n  });\n  return { formattedActivity, dsActivity };\n};\n","// @ts-nocheck\nimport { executeGitCommand } from '../git.service';\nimport moment from 'moment';\nimport {\n  calculateLinesPercentage,\n  calculateStatisticsForBlame,\n  extractStatsFromRawItems,\n  getAllAuthorsOfFile,\n  getGitBlameString,\n  groupByWeek,\n} from './contributorsStatHelper';\nimport { gitCommands } from './const';\nimport { debug } from '../../common/logger';\n\n//1. How many commiters per file → Single commiter (file changed by a single person)\nexport const commitersPerFile = (files) => ({\n  ...files.reduce((acc, file) => {\n    const rawItems = executeGitCommand(gitCommands.COMMITER_PER_FILE({ file }))\n      ?.split('\\n')\n      ?.filter(Boolean);\n    const stat = extractStatsFromRawItems(rawItems);\n    return { ...acc, ...{ [file]: { ...stat } } };\n  }, {}),\n});\n\n// 2. First commit date → New in repo = Welcome, add to PRs reviews for knowlede\n// 3. Last commit date → Retired = keep them up to date\nexport const commitsDateByAuthor = (author, branchName) => {\n  return executeGitCommand(\n    gitCommands.COMMITS_DATE_BY_AUTHOR({ author, branch: branchName })\n  )\n    ?.split('\\n')\n    ?.filter(Boolean);\n};\n\nconst buildTempActivity = (raw) => {\n  const activity = [];\n\n  for (let i = 0; i < raw.length; i += 2) {\n    const changes = raw[i + 1]?.split('\\t');\n    const authorData = raw[i]?.split(',');\n\n    if (authorData.length && changes.length) {\n      const date = authorData[1];\n      const weekChanges = parseInt(changes[0]) + parseInt(changes[1]);\n      if (date && weekChanges) {\n        const dateObject = new Date(date);\n        const momentDate = moment(dateObject).format('YYYY-MM-DD');\n        const weekNum = moment().diff(momentDate, 'weeks');\n        activity.push({\n          git_user: authorData[0],\n          week: weekNum,\n          changes: weekChanges,\n        });\n      }\n    }\n  }\n  return activity;\n};\n\n// 4. Recent activity (lines commited in a given time) → No-noob\nexport const recentAuthorActivity = (branchName, since, file) => {\n  const raw = executeGitCommand(\n    gitCommands.GIT_ACTIVITY({ branch: branchName, since, file })\n  );\n  const rawList = raw?.split('\\n')?.filter(Boolean);\n\n  const activity = buildTempActivity(rawList);\n  debug(`temp activity: ${JSON.stringify(activity)}`);\n  return { dsActivity: raw, groupByWeek: groupByWeek(activity) };\n};\n\n// 6. How many authors in repo → complexity\nexport const countAuthosInRepo = () =>\n  executeGitCommand(gitCommands.AUTHORS_COUNT())?.split('\\n')?.filter(Boolean);\n\n// 7. How many files in repo → complexity\nexport const countFilesInRepo = () =>\n  executeGitCommand(gitCommands.REPO_FILES_COUNT())?.trim();\n\n// 8. Repo first commit date → complexity (if long time)\nexport const getRepoFirstCommitDate = (branchName = 'develop') =>\n  executeGitCommand(gitCommands.FIRST_COMMIT({ branch: branchName }))?.split(\n    '\\n'\n  )?.[1];\n\nexport const blameByAuthor = (files, branch) => {\n  return {\n    ...files.reduce((acc, file) => {\n      const authors = getAllAuthorsOfFile(file, branch);\n      debug(`files authors: ${JSON.stringify(authors)}`);\n      const allAuthorsString = getGitBlameString(file, branch);\n      return {\n        ...acc,\n        ...{\n          [file]: authors.reduce((prevAuthor, author) => {\n            const { authorLines, allLinesCount } = calculateStatisticsForBlame(\n              allAuthorsString,\n              author,\n              file,\n              branch\n            );\n            return {\n              ...prevAuthor,\n              [author]: calculateLinesPercentage(authorLines, allLinesCount),\n              dsBlame: allAuthorsString.replaceAll(\n                '\\nauthor-mail',\n                ' author-mail'\n              ),\n            };\n          }, {}),\n        },\n      };\n    }, {}),\n  };\n};\n","// @ts-nocheck\nimport { prepareSendingLogsToDD } from '../common/logger';\n\nconst matchByEmail = (\n  contributorEmail,\n  providerUserLogin,\n  providerUserName\n) => {\n  if (!contributorEmail || typeof contributorEmail !== 'string') {\n    return null;\n  }\n  let email = contributorEmail.includes('@')\n    ? contributorEmail.split('@')[0]\n    : contributorEmail;\n  email = email?.includes('+') ? email.split('+')[1] : email;\n  email = email.replace(/\\./g, '');\n  return (\n    email.includes(providerUserName) ||\n    email.includes(providerUserLogin) ||\n    providerUserLogin?.includes(email) ||\n    providerUserName === email\n  );\n};\n\nconst matchByName = (contributorFullName, providerUserName) => {\n  if (\n    !providerUserName ||\n    !contributorFullName ||\n    typeof contributorFullName !== 'string' ||\n    typeof providerUserName !== 'string'\n  ) {\n    return false;\n  }\n  const formattedProviderName = providerUserName.trim().toLowerCase();\n  const formattedGitName = contributorFullName.trim().toLowerCase();\n  return formattedGitName?.includes(formattedProviderName);\n};\n\nconst formatProviderContributors = (providerContributors) =>\n  providerContributors\n    .map(({ login, name }) => ({ login, name }))\n    .filter(({ login, name }) => login || name);\n\nconst formatGitContributors = (gitContributors) =>\n  Object.keys(gitContributors).map((contributor) => {\n    const contributorMap = contributor.split(' ');\n    return {\n      email: contributorMap.pop(),\n      login: contributorMap.join(''),\n      name: contributorMap[0],\n      lastName: contributorMap[1],\n      fullName: contributorMap.join(' '),\n      reversedName: (contributorMap[1] || '') + contributorMap[0],\n      contributor,\n      contributions: gitContributors[contributor],\n    };\n  });\n\nconst getUserMappingFromConfig = async (rules, payload) => {\n  try {\n    const userMapping =\n      rules?.config?.user_mapping?.reduce((acc, authorObject) => {\n        const key = Object.keys(authorObject)[0];\n        const value = authorObject[key] ?? key;\n        return {\n          ...acc,\n          [key]: value,\n        };\n      }, {}) || {};\n    return userMapping;\n  } catch (error) {\n    const { owner, repo, pullRequestNumber } = payload;\n    await prepareSendingLogsToDD(\n      'info',\n      `Failed to parse user_mapping for pr ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      { error: e?.message },\n      true\n    );\n    console.log('Failed to parse user_mapping: ', e);\n    return {};\n  }\n};\n\nconst matchContributorsFromProviderData = async (\n  providerContributors,\n  gitContributors,\n  payload\n) => {\n  try {\n    const providerContributorsFormatted =\n      formatProviderContributors(providerContributors);\n    const gitContributorsFormatted = formatGitContributors(gitContributors);\n    const matchContributionsList = {};\n    let unmachedContributors = [];\n    // round 1 - match by git email || match by git login\n    gitContributorsFormatted.forEach((contributor) => {\n      const match = providerContributorsFormatted.find(({ name, login }) => {\n        return (\n          matchByEmail(contributor.email, login, name) ||\n          matchByName(contributor.login, login)\n        );\n      });\n      if (match) {\n        matchContributionsList[contributor.contributor] = match.login;\n      } else {\n        unmachedContributors.push(contributor);\n      }\n    });\n    const fallback1 = [...unmachedContributors];\n    unmachedContributors = [];\n    // round 2 - match by git fullName || match by git reversedName\n    fallback1.forEach((contributor) => {\n      const match = providerContributorsFormatted.find(\n        ({ name }) =>\n          matchByName(contributor.fullName, name) ||\n          matchByName(contributor.reversedName, name)\n      );\n      if (match) {\n        matchContributionsList[contributor.contributor] = match.login;\n      } else {\n        unmachedContributors.push(contributor);\n      }\n    });\n    // round 3 - no matched provider. keep git signature (contributor)\n    unmachedContributors.forEach((contributor) => {\n      matchContributionsList[contributor.contributor] = contributor.contributor;\n    });\n    return matchContributionsList;\n  } catch (e) {\n    const { owner, repo, pullRequestNumber } = payload;\n    await prepareSendingLogsToDD(\n      'info',\n      `Failed to match contributors for pr: ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      { error: e?.message },\n      true\n    );\n    console.error('Failed to match contributors', e);\n    return {};\n  }\n};\n\nconst mergeResults = (configContributors, matchedProviderContributors) =>\n  Object.keys(matchedProviderContributors).reduce((acc, authorKey) => {\n    return {\n      ...acc,\n      [authorKey]:\n        configContributors[authorKey] ?? matchedProviderContributors[authorKey],\n    };\n  }, {});\n\n// Example of git object (contributor):\n// {\n//   email: '<dekel.bayazi@tikalk.com>',\n//   login: 'DekelBayazi',\n//   name: 'Dekel',\n//   lastName: 'Bayazi',\n//   fullName: 'Dekel Bayazi',\n//   reversedName: 'BayaziDekel',\n//   contributor: 'Dekel Bayazi <dekel.bayazi@tikalk.com>',\n//   contributions: 1\n// }\n// ####################################################\n\n// Example of provider object (name, login):\n// {\n//   login: 'yeelali14',\n//   name: 'Yeela Lifshitz'\n// }\n// ####################################################\n\nexport const matchContributors = async (\n  providerContributors,\n  gitContributors,\n  payload,\n  rulesObj\n) => {\n  const { owner, repo, pullRequestNumber } = payload;\n\n  if (!providerContributors || !gitContributors) {\n    console.error('matchContributors failed: not provided data');\n    return {};\n  }\n\n  await prepareSendingLogsToDD(\n    'info',\n    `Gitstream matchContributors got contributors for pr: ${owner}/${repo}/${pullRequestNumber}`,\n    payload,\n    { providerContributors, gitContributors },\n    true\n  );\n  const matchContributorsFromProvider = await matchContributorsFromProviderData(\n    providerContributors,\n    gitContributors,\n    payload\n  );\n  const userMappingFromConfig = await getUserMappingFromConfig(\n    rulesObj,\n    payload\n  );\n  if (Object.keys(userMappingFromConfig).length) {\n    await prepareSendingLogsToDD(\n      'info',\n      `got contributors from config for pr: ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      { userMappingFromConfig },\n      true\n    );\n\n    return mergeResults(userMappingFromConfig, matchContributorsFromProvider);\n  }\n\n  return matchContributorsFromProvider;\n};\n","export interface RulesEngineError {\n  [statusCode: number]: string;\n}\n\nexport let rulesEngineErrors: RulesEngineError[] = [];\n","// @ts-nocheck\nimport * as core from '@actions/core';\nimport axios from 'axios';\nimport { CLIENT_PAYLOAD } from '../common/const';\nimport { isExecutePlayground } from '..';\nimport { rulesEngineErrors } from './types';\n\nconst callWebhookOnError = async (payload) => {\n  const { repo, owner, pullRequestNumber } = payload;\n  const { gitlabCustomWebhookToken, webhook_url } = payload || {};\n  const body = {\n    context: payload,\n    status: 'failed',\n    repo,\n    owner,\n    pullRequestNumber,\n    webhookEvent: 'checkUpdate',\n    event_type: 'gs_custom_checkfail',\n  };\n  try {\n    await axios.post(webhook_url, JSON.stringify(body), {\n      headers: {\n        'Content-Type': 'application/json',\n        'x-gitlab-token': `${gitlabCustomWebhookToken}`,\n        'x-gitlab-event': 'checkUpdate',\n      },\n    });\n  } catch (error) {\n    console.error(`Failed sending inner webhook to gitstream-sls-pipeline`);\n  }\n};\nconst handleErrorByProvider = {\n  github: (message, payload, ruleFile) => {\n    const details = {\n      message,\n      owner: payload?.owner,\n      repo: payload?.repo,\n      branch: payload?.branch,\n    };\n    core.setFailed(JSON.stringify(details, null, 2));\n  },\n  gitlab: async (message, payload, ruleFile) => {\n    await callWebhookOnError(payload);\n    const decodedMessage = message.replace(/%0A/g, '\\n');\n    console.error(decodedMessage);\n  },\n  default: (message) => console.error(message),\n};\n\nexport const handleValidationErrors = async (\n  message,\n  statusCode,\n  payload,\n  ruleFile = ''\n) => {\n  const fullMessage = ruleFile\n    ? `Error in ${ruleFile.trim()} - ${message}`\n    : message;\n  if (!isExecutePlayground) {\n    const clientPayload = JSON.parse(CLIENT_PAYLOAD);\n    const { source } = payload || clientPayload || {};\n    const getErrorHandlerCb =\n      handleErrorByProvider[source] || handleErrorByProvider.default;\n    await getErrorHandlerCb(fullMessage, payload, ruleFile);\n    process.exit(statusCode);\n  } else {\n    console.log(`gitstream-core error: ${message}`);\n    rulesEngineErrors.push({ [statusCode]: `${message}` });\n  }\n};\n","// @ts-nocheck\nexport const fromBase64String = (base64string) => {\n  return Buffer.from(base64string, 'base64').toString('utf-8');\n};\n\nexport const toBase64String = (string) => {\n  return Buffer.from(string).toString('base64');\n};\n\nexport const convertRuleFileToStringSafe = (ruleFile) => {\n  const replacers = {\n    'pr.description': 'pr.description | nl2br | dump | safe',\n  };\n  return Object.keys(replacers).reduce((acc, toReplace) => {\n    return acc.replaceAll(toReplace, replacers[toReplace]);\n  }, ruleFile);\n};\n\nexport const convertPRContextFromBase64 = (prContext) => {\n  return {\n    ...prContext,\n    description: fromBase64String(prContext.description),\n    // deprecated\n    general_comments: prContext.general_comments?.map((generalComment) => ({\n      ...generalComment,\n      content: fromBase64String(generalComment.content),\n    })),\n    // deprecated\n    line_comments: prContext.line_comments?.map((lineComments) => ({\n      ...lineComments,\n      content: fromBase64String(lineComments.content),\n    })),\n    comments: prContext.comments?.map((comment) => ({\n      ...comment,\n      content: fromBase64String(comment.content),\n    })),\n    reviews: prContext.reviews?.map((comment) => ({\n      ...comment,\n      content: fromBase64String(comment.content),\n      conversations: comment.conversations?.map((conversation) => ({\n        ...conversation,\n        content: fromBase64String(conversation.content),\n      })),\n    })),\n    conversations: prContext.conversations?.map((comment) => ({\n      ...comment,\n      content: fromBase64String(comment.content),\n    })),\n  };\n};\n","// @ts-nocheck\nimport parse from 'parse-diff';\nimport {\n  DEBUG_MODE,\n  ERRORS,\n  IGNORE_PATTERNS_IN_DRY_RUN,\n  NOT_FOUND_FILE_PATH,\n  STATUS_CODES,\n} from '../common/const';\nimport { debug, prepareSendingLogsToDD } from '../common/logger';\nimport {\n  getCommitsNumberOnBranch,\n  getContributorsStatistics,\n  getDiff,\n  getContent,\n  getCheckoutCommit,\n  getAuthorName,\n} from './git.service';\nimport * as yaml from 'js-yaml';\nimport {\n  blameByAuthor,\n  commitsDateByAuthor,\n  getRepoFirstCommitDate,\n  recentAuthorActivity,\n} from './git/contributersStat';\nimport { matchContributors } from './matchContributors';\nimport { handleValidationErrors } from './error.handler';\nimport { convertPRContextFromBase64, toBase64String } from './converters';\nimport { ACTIVITY_SINCE } from './git/const';\nimport {\n  formatDateToDays,\n  reportGitCommandsAndResults,\n  splitDsAndActivity,\n  splitDsAndBlameObjects,\n} from './git/contributorsStatHelper';\nimport { findGitAuthorsWithFallback } from './git/diffParserHelper';\n\nconst filteredOutCMFilesFunc = ({ to }) =>\n  IGNORE_PATTERNS_IN_DRY_RUN.every((ignorePattern) => !to.match(ignorePattern));\n\nconst formatFilesToSourceFiles = (baseBranch, refBranch, files) =>\n  files.map(({ from, to, chunks }) => ({\n    original_file: from === NOT_FOUND_FILE_PATH ? '' : from,\n    new_file: to,\n    diff: chunks.reduce((acc, { changes, content }) => {\n      return (\n        acc + content + '\\n' + changes.map(({ content }) => content).join('\\n')\n      );\n    }, ''),\n    original_content: getContent(\n      getCheckoutCommit(refBranch, baseBranch),\n      from\n    ),\n    new_content: getContent(refBranch, to),\n  }));\n\nconst extractMetadataFromFiles = (files) =>\n  files.map(({ to, from, deletions, additions }) => ({\n    original_file: from === NOT_FOUND_FILE_PATH ? '' : from,\n    new_file: to,\n    file: to !== NOT_FOUND_FILE_PATH ? to : from,\n    deletions,\n    additions,\n  }));\n\nconst getDiffSize = (files) =>\n  files?.reduce(\n    (acc, { additions, deletions }) => acc + additions + deletions,\n    0\n  ) || 0;\n\nexport const parseCMFile = async (payload, rules, ruleFile) => {\n  try {\n    const rulesObj = yaml.load(\n      rules.replaceAll(/{{(.*?)}}|{(.*?)}|{%.*%}((.|\\n)*){% endfor %}/g, '')\n    );\n    debug(`cm parse result: ${JSON.stringify(rulesObj)}`);\n    return rulesObj;\n  } catch (error) {\n    const { owner, repo, pullRequestNumber } = payload;\n    await prepareSendingLogsToDD(\n      'error',\n      `${ERRORS.FAILED_TO_PARSE_CM} in pr ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      { error: error?.message, rules, ruleFile },\n      true\n    );\n    console.error(ERRORS.FAILED_PARSE_CM_FILE);\n    await handleValidationErrors(\n      error?.message,\n      STATUS_CODES.SYNTAX_ERROR,\n      payload,\n      ruleFile\n    );\n  }\n};\n\nexport const contributersStatContext = async (context, payload) => {\n  try {\n    const blames = blameByAuthor(context.files, context.branch.base);\n    const { formattedBlame, dsBlame } = splitDsAndBlameObjects(blames);\n    const age = await formatDateToDays(\n      getRepoFirstCommitDate(context.branch.base),\n      context,\n      payload\n    );\n    const author_age = await formatDateToDays(\n      commitsDateByAuthor(context.branch.author, context.branch.base)?.[0],\n      context,\n      payload\n    );\n    return {\n      age,\n      author_age,\n      blame: formattedBlame,\n      ds_blame: dsBlame,\n    };\n  } catch (error) {\n    debug(`Error extracting blame: ${error.message}`);\n    await handleValidationErrors(\n      ERRORS.FAILED_TO_GET_CONTEXT,\n      STATUS_CODES.FAILED_TO_GET_CONTEXT,\n      payload\n    );\n  }\n};\n\nconst contributersActivityContext = async (context) => {\n  try {\n    const gitActivity = context.files.reduce((acc, file) => {\n      if (file === NOT_FOUND_FILE_PATH) {\n        return acc;\n      }\n      const { dsActivity, groupByWeek } = recentAuthorActivity(\n        context.branch.base,\n        ACTIVITY_SINCE,\n        file\n      );\n      return {\n        ...acc,\n        [file]: { ...groupByWeek, dsActivity },\n      };\n    }, {});\n\n    const { formattedActivity, dsActivity } = splitDsAndActivity(gitActivity);\n    return {\n      git_activity: formattedActivity,\n      ds_activity: dsActivity,\n    };\n  } catch (error) {\n    debug(`Error extrating activity: ${error.message}`);\n    await handleValidationErrors(\n      ERRORS.FAILED_TO_GET_CONTEXT,\n      STATUS_CODES.FAILED_TO_GET_CONTEXT,\n      context.payload\n    );\n  }\n};\n\nconst filterOutFiles = async (diff, isCmChanged, diffCommand, payload) => {\n  const { owner, repo, pullRequestNumber } = payload;\n  let files = parse(diff);\n  if (isCmChanged) {\n    files = files?.filter(filteredOutCMFilesFunc);\n  }\n  if (!files?.length) {\n    await prepareSendingLogsToDD(\n      'warn',\n      `No files changed in rules-engine context for pr: ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      { diff, diffCommand },\n      isCmChanged\n    );\n  }\n  return files;\n};\n\nconst getTheRightGitAuthor = (context, gitToProviderUser) => {\n  try {\n    const fallbacks = findGitAuthorsWithFallback(context, gitToProviderUser);\n    if (Object.keys(fallbacks).length) {\n      const gitName = `${fallbacks.author.split('<')[0].replace(/\\s*$/, '')}\\n`;\n      const gitEmail = `<${fallbacks.author.split('<')[1]}`;\n      return { gitName, gitEmail, fullName: fallbacks.author };\n    }\n    return fallbacks;\n  } catch (error) {\n    debug(`Failed getting the right author. Error: ${error}`);\n    return {};\n  }\n};\n\nexport const getContext = async (\n  baseBranch,\n  refBranch,\n  payload,\n  rules,\n  ruleFile,\n  isCmChanged = false\n) => {\n  const { owner, repo, pullRequestNumber } = payload;\n  try {\n    const rulesObj = await parseCMFile(payload, rules, ruleFile);\n    const { diff, diffCommand } = getDiff(baseBranch, refBranch, rulesObj);\n    let files = await filterOutFiles(diff, isCmChanged, diffCommand, payload);\n    const commitsNumber = getCommitsNumberOnBranch(baseBranch);\n    const contributors = getContributorsStatistics(baseBranch);\n    const { fullAuthorName, authorName, authorEmail } = getAuthorName(\n      baseBranch,\n      refBranch\n    );\n    const context = {\n      branch: {\n        name: refBranch,\n        base: baseBranch,\n        author: fullAuthorName,\n        autor_name: authorName,\n        author_email: authorEmail,\n        diff: {\n          size: getDiffSize(files),\n          files_metadata: extractMetadataFromFiles(files),\n        },\n        num_of_commits: commitsNumber,\n      },\n      source: {\n        diff: {\n          files: formatFilesToSourceFiles(baseBranch, refBranch, files),\n        },\n      },\n      repo: {\n        name: repo,\n        contributors,\n        owner,\n      },\n      files: files.map(({ to }) => to),\n      pr: convertPRContextFromBase64(payload.prContext),\n    };\n    const contributorsMap = await matchContributors(\n      context.pr.contributors,\n      context.repo.contributors,\n      payload,\n      rulesObj\n    );\n\n    const gitAuthor = getTheRightGitAuthor(context, contributorsMap);\n    if (Object.keys(gitAuthor).length) {\n      context.branch.author = gitAuthor.fullName;\n      context.branch.author_name = gitAuthor.gitName;\n      context.branch.author_email = gitAuthor.gitEmail;\n    }\n\n    debug(`context.branch: ${JSON.stringify(context.branch, null, 2)}`);\n    const contributorsStats = await contributersStatContext(context, payload);\n    const contributorsActivity = await contributersActivityContext(context);\n\n    context.repo = {\n      ...context.repo,\n      provider: payload.source,\n      git_to_provider_user: contributorsMap,\n      ...contributorsStats,\n      ...contributorsActivity,\n      pr_author: context.pr.author,\n    };\n\n    debug(`context.repo: ${JSON.stringify(context.repo, null, 2)}`);\n    if (DEBUG_MODE) {\n      for (const file of context.files) {\n        await reportGitCommandsAndResults(file, baseBranch, payload);\n      }\n    }\n    const reducedContext = toBase64String(\n      JSON.stringify({\n        context: {\n          repo: context.repo,\n          files: context.files,\n          branch: context.branch,\n          pr: { contributors: context.pr?.contributors },\n        },\n      })\n    );\n    await prepareSendingLogsToDD(\n      'info',\n      `rules-engine context for pr: ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      { reducedContext, diffCommand },\n      DEBUG_MODE\n    );\n    return context;\n  } catch (error) {\n    //TODO: remove console\n    console.log({ error });\n    await prepareSendingLogsToDD(\n      'error',\n      ERRORS.FAILED_TO_GET_CONTEXT,\n      payload,\n      { error: error?.message, ruleFile },\n      true\n    );\n    await handleValidationErrors(\n      ERRORS.FAILED_TO_GET_CONTEXT,\n      STATUS_CODES.FAILED_TO_GET_CONTEXT,\n      payload,\n      ruleFile\n    );\n  }\n};\n","// @ts-nocheck\nimport { debug } from '../../common/logger';\nimport { commitsDateByAuthor } from './contributersStat';\n\nexport const findGitAuthorsWithFallback = (context, gitToProviderUser) => {\n  const fullGitName = context.branch.author;\n  let authorResult = { author: fullGitName, prevResults: [] };\n  try {\n    if (!Object.keys(context.repo.contributors).includes(fullGitName)) {\n      const gitNames = Object.keys(gitToProviderUser).filter(\n        (gitUser) => gitToProviderUser[gitUser] === context.pr.author\n      );\n      gitNames.forEach((contributor) => {\n        const authorDates = commitsDateByAuthor(\n          contributor,\n          context.branch.base\n        );\n        if (authorDates.length === 1) {\n          authorResult = { author: contributor, prevResults: authorDates };\n        }\n        if (\n          gitNames.length > 1 &&\n          authorResult.prevResults.length <= authorDates.length\n        ) {\n          authorResult = { author: contributor, prevResults: authorDates };\n        }\n      });\n    }\n    return authorResult;\n  } catch (error) {\n    debug(`Failed getting the right author. Error: ${error}`);\n    return {};\n  }\n};\n","// @ts-nocheck\nimport { execSync } from 'child_process';\nimport { readFileSync } from 'fs';\nimport {\n  ERRORS,\n  NOT_FOUND_FILE_PATH,\n  ORG_LEVEL_REPO,\n  STATUS_CODES,\n} from '../common/const';\nimport { debug } from '../common/logger';\nimport { parseCMFile } from './diffParser';\nimport { handleValidationErrors } from './error.handler';\nimport { GIT_ERROR_TYPE, REPO_FOLDER } from './git/const';\n\nexport const SOURCE_CODE_WORKING_DIRECTORY = './code';\nexport const CWD = { cwd: SOURCE_CODE_WORKING_DIRECTORY };\n\nexport const executeGitCommand = (command, folder = REPO_FOLDER.DEFAULT) => {\n  debug(`Execute: ${command}`);\n  try {\n    const cdCommand = `cd ${folder} && `;\n    const gitResult = execSync(cdCommand + command, {\n      ...CWD,\n      maxBuffer: 500 * 1024 * 1024,\n    }).toString();\n    return gitResult;\n  } catch (e) {\n    debug(`${ERRORS.GIT_COMMAND_FAILED} ${e?.message || 'unknown error'}`);\n    if ((e?.toString() || '').includes(GIT_ERROR_TYPE.BAD_REVISION)) {\n      handleValidationErrors(\n        `${ERRORS.GIT_COMMAND_FAILED} ${e?.message || 'unknown error'}`,\n        STATUS_CODES.BAD_REVISION\n      );\n    }\n    throw e;\n  }\n};\n\nexport const getCheckoutCommit = (refBranch, baseBranch) => {\n  try {\n    const checkoutCommit = executeGitCommand(\n      `git rev-list --boundary '${refBranch}'...'${baseBranch}' | grep \"^-\" | cut -c2- | tail -1`\n    );\n    return checkoutCommit.trim() || baseBranch;\n  } catch (e) {\n    return baseBranch;\n  }\n};\n\nexport const getContent = (branch, file) => {\n  try {\n    if (file === NOT_FOUND_FILE_PATH) {\n      return '';\n    }\n    const fileContent = executeGitCommand(\n      `git show '${branch.trim()}':'${file.trim()}'`\n    );\n    return fileContent;\n  } catch (e) {\n    return '';\n  }\n};\n\nexport const getDiff = (baseBranch, refBranch, rules) => {\n  try {\n    const ignoreFiles = rules?.config?.ignore_files\n      ?.map((file) => `':(exclude)${file}'`)\n      ?.join(' ');\n    const diffCommand = `git diff '${baseBranch}'...'${refBranch}' ${\n      ignoreFiles ? ignoreFiles : ''\n    }`;\n    const diff = executeGitCommand(diffCommand);\n    debug({\n      diff,\n      logs: executeGitCommand(`git log`),\n      currBranch: executeGitCommand(`git branch --show-current`),\n    });\n    return { diff, diffCommand };\n  } catch (e) {\n    console.log(`error getting diff: ${e}`);\n    return '';\n  }\n};\n\nexport const readRemoteFile = (file, branch, folder = REPO_FOLDER.DEFAULT) => {\n  executeGitCommand(`git config --global --add safe.directory '*'`);\n  try {\n    if (folder === REPO_FOLDER.DEFAULT) {\n      executeGitCommand(`git show '${branch}':'${file}' > '${file}'`);\n    }\n    return readFileSync(\n      `${SOURCE_CODE_WORKING_DIRECTORY}/${folder}/${file}`,\n      'utf8'\n    );\n  } catch {\n    return '';\n  }\n};\n\nconst getCMFilesList = (baseBranch, repo) => {\n  executeGitCommand(`git checkout '${baseBranch}'`);\n  const cmFiles =\n    repo?.toLowerCase() === ORG_LEVEL_REPO\n      ? executeGitCommand(`git ls-files '*.cm'`)\n      : executeGitCommand(`git ls-files '.cm/*.cm'`);\n\n  executeGitCommand(`git checkout -`);\n  return cmFiles.split('\\n').filter(Boolean);\n};\n\nexport const getExcludedOrgCMFilesBasedOnRepo = async (\n  orgRules,\n  repo,\n  payload\n) => {\n  const excludedRulesFiles = [];\n  for (const ruleFile of Object.keys(orgRules)) {\n    const rulesObj = await parseCMFile(payload, orgRules[ruleFile], ruleFile);\n    const excludedRepos = rulesObj?.config?.ignore_repositories || [];\n    if (excludedRepos.includes(repo)) {\n      excludedRulesFiles.push(ruleFile);\n    }\n  }\n  return excludedRulesFiles;\n};\n\nexport const getOrgCmFiles = (baseBranch) => {\n  executeGitCommand(`git checkout ${baseBranch}`, REPO_FOLDER.CM);\n  const cmFiles = executeGitCommand(`git ls-files '*.cm'`, REPO_FOLDER.CM);\n  executeGitCommand(`git checkout -`, REPO_FOLDER.CM);\n  const orgCmFiles = cmFiles.split('\\n').filter(Boolean);\n  if (Object.keys(orgCmFiles).length) {\n    return orgCmFiles.reduce(\n      (acc, cmFile) => ({\n        ...acc,\n        [cmFile]: readRemoteFile(cmFile, baseBranch, REPO_FOLDER.CM),\n      }),\n      {}\n    );\n  }\n\n  return [];\n};\n\nexport const getRuleFiles = async (baseBranch, repo) => {\n  const cmFiles = getCMFilesList(baseBranch, repo);\n  if (Object.keys(cmFiles).length > 0) {\n    const ruleFiles = cmFiles.reduce(\n      (acc, cmFile) => ({\n        ...acc,\n        [cmFile]: readRemoteFile(cmFile, baseBranch),\n      }),\n      {}\n    );\n    return ruleFiles;\n  }\n  return {};\n};\n\nexport const getCommitsNumberOnBranch = (baseBranch) => {\n  return Number(\n    executeGitCommand(`git rev-list --count HEAD ^${baseBranch}`).trim()\n  );\n};\n\nexport const getContributorsStatistics = (branch) => {\n  const contributorsString = executeGitCommand(\n    `git shortlog ${branch} -s -n -e`\n  );\n  return contributorsString.split('\\n').reduce((acc, contributorStats) => {\n    const [commits, contributor] = contributorStats.trim().split('\\t');\n\n    return {\n      ...acc,\n      ...(contributor && { [contributor]: parseInt(commits) }),\n    };\n  }, {});\n};\n\nexport const getAuthorName = (baseBranch, refBranch) => {\n  try {\n    const authorName = executeGitCommand(\n      `git log '${baseBranch}'..'${refBranch}' --format=\"%an\" | tail -1`\n    );\n    const authorEmail = executeGitCommand(\n      `git log '${baseBranch}'..'${refBranch}' --format=\"%ae\" | tail -1`\n    );\n    const fullAuthorName = `${authorName?.trim()} <${authorEmail?.trim()}>`;\n    debug({\n      fullAuthorName,\n      currBranch: executeGitCommand(`git branch --show-current`),\n    });\n    return { fullAuthorName, authorName, authorEmail };\n  } catch (e) {\n    console.log(`error getting branch author name: ${e}`);\n    return '';\n  }\n};\n\nexport const isCmChanged = (refBranch, baseBranch, repo) => {\n  executeGitCommand(`git config --global --add safe.directory '*'`);\n  if (repo?.toLowerCase() === ORG_LEVEL_REPO) {\n    return Boolean(\n      executeGitCommand(`git diff '${baseBranch}'...'${refBranch}' -- *.cm`)\n    );\n  }\n  return Boolean(\n    executeGitCommand(`git diff '${baseBranch}'...'${refBranch}' -- .cm/*.cm`)\n  );\n};\n\nexport const hasNonRuleFilesChanges = (refBranch, baseBranch, repo) => {\n  executeGitCommand(`git config --global --add safe.directory '*'`);\n  if (repo?.toLowerCase() === ORG_LEVEL_REPO) {\n    return Boolean(\n      executeGitCommand(`git diff '${baseBranch}'...'${refBranch}' -- ':!*.cm'`)\n    );\n  }\n  return Boolean(\n    executeGitCommand(\n      `git diff '${baseBranch}'...'${refBranch}' -- ':!.cm/*.cm'`\n    )\n  );\n};\n","// @ts-nocheck\nimport { readFileSync, writeFileSync } from 'fs';\nimport { SOURCE_CODE_WORKING_DIRECTORY } from './git.service';\nexport const saveResultsInCache = (results) => {\n  try {\n    writeFileSync(\n      `${SOURCE_CODE_WORKING_DIRECTORY}/cache.json`,\n      JSON.stringify(results)\n    );\n  } catch (e) {\n    console.log('error saving cache', e);\n  }\n};\n\nexport const loadCacheResults = () => {\n  try {\n    const cacheResults = readFileSync(\n      `${SOURCE_CODE_WORKING_DIRECTORY}/cache.json`\n    ).toString();\n    return JSON.parse(cacheResults);\n  } catch (e) {\n    console.warn('error loading from cache', e);\n    return {};\n  }\n};\n","// @ts-nocheck\nexport class ExpertReviewerContext {\n  constructor({ owner, repo, pullRequestNumber, branch, triggeredBy }) {\n    this.org = owner;\n    this.repo = repo;\n    this.pullRequestNumber = pullRequestNumber;\n    this.branch = branch;\n    this.triggeredBy = triggeredBy;\n  }\n  get() {\n    return {\n      org: this.org,\n      repo: this.repo,\n      pullRequestNumber: this.pullRequestNumber,\n      branch: this.branch,\n      triggeredBy: this.triggeredBy,\n    };\n  }\n}\n","// @ts-nocheck\n\nexport class ExpertReviewerRequest {\n  constructor(gitToProvider, prFiles, context) {\n    this.merge_dict = gitToProvider;\n    this.pr_files = prFiles;\n    this.context = context;\n  }\n  get() {\n    return {\n      merge_dict: this.merge_dict,\n      pr_files: this.pr_files,\n      context: this.context,\n    };\n  }\n}\n","// @ts-nocheck\n\nimport { NOT_FOUND_FILE_PATH } from '../common/const';\nimport { ExpertReviewerContext } from './requests/expertReviewerContext';\nimport { ExpertReviewerRequest } from './requests/expertReviewerRequest';\n\nconst buildPrFiles = (repo, files) => {\n  const tempPrFiles = files.reduce((acc, file) => {\n    if (file === NOT_FOUND_FILE_PATH) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [file]: {\n        ...{ blame: repo.ds_blame?.[file] || '' },\n        ...{ activity: repo.ds_activity?.[file] || '' },\n      },\n    };\n  }, {});\n  return Object.keys(tempPrFiles).reduce((acc, file) => {\n    if (!Object.keys(tempPrFiles[file]).length) {\n      return acc;\n    }\n    return { ...acc, [file]: tempPrFiles[file] };\n  }, {});\n};\n\nexport const getExpertReviewer = (repo, files, payload) => {\n  const context = new ExpertReviewerContext(payload).get();\n  const prFiles = buildPrFiles(repo, files);\n  return new ExpertReviewerRequest(\n    repo.git_to_provider_user,\n    prFiles,\n    context\n  ).get();\n};\n","import { SegmentClient } from '@linearb/linode-common';\nimport { prepareSendingLogsToDD } from '../logger';\nimport { generatePrUrl } from './analytics.handler';\n\nconst FILTER_EVENT_TYPE = 'action_filter';\n\nclass SegmentEvent {\n  filter_name: String;\n  user_id: String;\n  args: String;\n  repo: String;\n  provider: String;\n  author: String;\n  org: String;\n  pr_url: String;\n  is_org_level: String;\n  trigger_id: string;\n\n  constructor(\n    { owner, repo, pullRequestNumber, hasCmRepo, trigger_id }: any,\n    filterName: String,\n    args: any,\n    context: any\n  ) {\n    this.filter_name = filterName;\n    this.user_id = `${context.repo?.provider}-${context.repo?.pr_author}`;\n    this.args = args;\n    this.repo = repo;\n    this.author = context.repo?.pr_author;\n    this.org = owner;\n    this.provider = context.repo?.provider;\n    this.pr_url = generatePrUrl(context, {\n      owner,\n      repo,\n      pullRequestNumber,\n    });\n    this.is_org_level = hasCmRepo;\n    this.trigger_id = trigger_id;\n  }\n  get() {\n    return {\n      userId: this.user_id,\n      event: FILTER_EVENT_TYPE,\n      properties: {\n        filter_name: this.filter_name,\n        args: this.args,\n        repo: this.repo,\n        author: this.author,\n        git_org_name: this.org,\n        git_provider: this.provider,\n        pr_url: this.pr_url,\n        is_org_level: this.is_org_level,\n        trigger_id: this.trigger_id,\n      },\n    };\n  }\n}\n\nexport const sendSegmentEvent = async (\n  payload: any,\n  filterName: String,\n  args: any,\n  context: any\n) => {\n  try {\n    const segment = new SegmentClient({\n      segmentServiceUrl: payload.segmentServiceUrl,\n      segment_write_key: payload.segmentWriteKey,\n    });\n    const segmentEvent = new SegmentEvent(\n      payload,\n      filterName,\n      args,\n      context\n    ).get();\n    await segment.track(segmentEvent);\n  } catch (error) {\n    console.error(`Unable to call segment`, error);\n    if (error instanceof Error) {\n      await prepareSendingLogsToDD(\n        'warn',\n        `Unable to call segment for pr ${payload?.owner}/${payload?.repo}/${payload?.pullRequestNumber}`,\n        payload,\n        { error: error?.message },\n        true\n      );\n    }\n  }\n};\n","import { GIT_PROVIDER } from '../const';\nimport { sendAmplitudeEvent } from './amplitude.service';\nimport { sendSegmentEvent } from './segment.service';\n\nexport const generatePrUrl = (\n  context: any,\n  { owner, repo, pullRequestNumber }: any\n): String => {\n  return context.repo?.provider === GIT_PROVIDER.GITHUB\n    ? `${GIT_PROVIDER.GITHUB}.com/${owner}/${repo}/pull/${pullRequestNumber}`\n    : `${GIT_PROVIDER.GITLAB}.com/${owner}/${repo}/-/merge_requests/${pullRequestNumber}`;\n};\n\nexport const filterAnalyticsHandler = async (\n  analytics: any,\n  payload: any,\n  context: any\n) => {\n  for (const filterName of Object.keys(analytics) || {}) {\n    await sendAmplitudeEvent(\n      payload,\n      filterName,\n      analytics[filterName].args,\n      context\n    );\n\n    await sendSegmentEvent(\n      payload,\n      filterName,\n      analytics[filterName].args,\n      context\n    );\n  }\n};\n","// @ts-nocheck\nimport * as yaml from 'js-yaml';\nimport { ERRORS, STATUS_CODES } from '../common/const';\nimport { handleValidationErrors } from './error.handler';\nimport {\n  SavedWordsValidator,\n  validatorsConstants,\n} from '@linearb/gitstream-core-js';\n\nconst COMMENT_REGEX = /^.*#.*$/gm;\nconst EMPTY_LINE_REGEX = /^\\s*\\n/gm;\nconst ACTIONS_LINE_REGEX = /-.*action( )*:.*/gi;\nconst ACTIONS_PREFIX_REGEX = /-.*action.*: /gi;\nconst AUTOMATION_KEYWORD = 'automations:';\nconst MALFORMED_EXPRESSION_REGEX = /{[\\s]+{|}[\\s]+}/gi;\n\nconst validateKeyword = async (rules, ruleFile, payload) => {\n  if (!rules.includes(AUTOMATION_KEYWORD)) {\n    await handleValidationErrors(\n      ERRORS.MISSING_KEYWORD,\n      STATUS_CODES.MISSING_KEYWORD,\n      payload,\n      ruleFile\n    );\n  }\n};\n\nconst validateActions = async (actions, ruleFile, payload) => {\n  const supportedActions = Object.values(\n    validatorsConstants.SUPPORTED_ACTIONS_BY_PROVIDER[payload.source] ||\n      validatorsConstants.SUPPORTED_ACTIONS_BY_PROVIDER.default\n  );\n  const notSupportedActions = actions.filter(\n    (action) => !supportedActions.includes(action)\n  );\n  if (notSupportedActions.length) {\n    await handleValidationErrors(\n      `The following actions are not supported: ${notSupportedActions\n        .map((action) => `\\`${action}\\``)\n        .join(\n          ', '\n        )} [Supported actions](https://docs.gitstream.cm/automation-actions/)`,\n      STATUS_CODES.UNSUPPORTED_ACTION,\n      payload,\n      ruleFile\n    );\n  }\n};\nconst validateExpressions = async (rules, ruleFile, payload) => {\n  if (rules.match(MALFORMED_EXPRESSION_REGEX)) {\n    await handleValidationErrors(\n      ERRORS.MALFORMED_EXPRESSION,\n      STATUS_CODES.MALFORMED_EXPRESSION,\n      payload,\n      ruleFile\n    );\n  }\n};\n\nconst validateRequiredArgs = async (runs, ruleFile, payload) => {\n  runs.forEach(async ({ action, args }) => {\n    const existingArgs = Object.keys(args || {});\n    const requiredArgsExists = (requireArg) =>\n      existingArgs.includes(requireArg);\n    if (!validatorsConstants.REQUIRED_ARGUMENTS_BY_ACTIONS[action]) {\n      return;\n    }\n    const missingArgs = validatorsConstants.REQUIRED_ARGUMENTS_BY_ACTIONS[\n      action\n    ].all\n      ? !validatorsConstants.REQUIRED_ARGUMENTS_BY_ACTIONS[action].args.every(\n          requiredArgsExists\n        )\n      : !validatorsConstants /\n        validatorsConstants.REQUIRED_ARGUMENTS_BY_ACTIONS[action].args.some(\n          requiredArgsExists\n        );\n    if (missingArgs) {\n      await handleValidationErrors(\n        `Missing required args for action: \\`${action}\\`: [${\n          validatorsConstants /\n          validatorsConstants.REQUIRED_ARGUMENTS_BY_ACTIONS[action].args\n            .filter((arg) => !existingArgs.includes(arg))\n            .map((arg) => `${arg}`)\n            .join(', ')\n        }]`,\n        STATUS_CODES.MISSING_REQUIRED_FIELDS,\n        payload,\n        ruleFile\n      );\n    }\n  });\n};\nconst validateSupportedArgs = async (runs, ruleFile, payload) =>\n  runs.forEach(async ({ action, args }) => {\n    const unsupportedArgs = Object.keys(args || {}).filter(\n      (arg) =>\n        !validatorsConstants.SUPPORTED_ARGUMENTS_BY_ACTION[action]?.includes(\n          arg\n        )\n    );\n    if (unsupportedArgs?.length) {\n      await handleValidationErrors(\n        `These arguments are not supported for \\`${action}\\`: [${unsupportedArgs\n          .map((arg) => `${arg}`)\n          .join(', ')}]`,\n        STATUS_CODES.UNSUPPORTED_ARGUMENT,\n        payload,\n        ruleFile\n      );\n    }\n  });\n\nconst validateArgs = async (rules, ruleFile, provider) => {\n  const rulesObj = yaml.load(\n    rules.replaceAll(/{{(.*?)}}|{(.*?)}|{%.*%}((.|\\n)*){% endfor %}/g, '')\n  );\n  const runs = Object.values(rulesObj.automations).flatMap(({ run }) => run);\n  await validateSupportedArgs(runs, ruleFile, provider);\n  await validateRequiredArgs(runs, ruleFile, provider);\n};\n\nconst validateSavedWords = async (rules, ruleFile, payload) => {\n  try {\n    new SavedWordsValidator().validate({ yamlFile: rules });\n  } catch (e) {\n    await handleValidationErrors(\n      e.message,\n      STATUS_CODES.SYNTAX_ERROR,\n      payload,\n      ruleFile\n    );\n  }\n};\n\nexport const validateRuleFile = async (rules, ruleFile, payload) => {\n  const rulesWithoutComments = rules\n    .replace(COMMENT_REGEX, '')\n    .replace(EMPTY_LINE_REGEX, '');\n  await validateKeyword(rulesWithoutComments, ruleFile, payload);\n  await validateExpressions(rulesWithoutComments, ruleFile, payload);\n  const actions = rulesWithoutComments\n    .match(ACTIONS_LINE_REGEX)\n    ?.map((action) => action.replace(ACTIONS_PREFIX_REGEX, '').trim());\n  await validateActions(actions, ruleFile, payload);\n  await validateArgs(rulesWithoutComments, ruleFile, payload);\n  await validateSavedWords(rules, ruleFile, payload);\n};\n","// @ts-nocheck\nimport { RuleParser } from '../../rules-parser/index';\nimport { getExpertReviewer } from '../api/getExpertReviewer';\nimport {\n  DEBUG_MODE,\n  ERRORS,\n  ORG_LEVEL_REPO,\n  RULES_PARSER_STATUS_CODES,\n  STATUS_CODES,\n  WATCH_FILTERS,\n  WATCH_PR_EVENTS,\n} from '../common/const';\nimport { debug, prepareSendingLogsToDD } from '../common/logger';\nimport { filterAnalyticsHandler } from '../common/notify/analytics.handler';\nimport {\n  convertPRContextFromBase64,\n  convertRuleFileToStringSafe,\n} from './converters';\nimport { getContext, parseCMFile } from './diffParser';\nimport { handleValidationErrors } from './error.handler';\nimport {\n  CWD,\n  getExcludedOrgCMFilesBasedOnRepo,\n  getOrgCmFiles,\n  getRuleFiles,\n  hasNonRuleFilesChanges,\n  isCmChanged,\n  readRemoteFile,\n} from './git.service';\nimport { MAIN_RULES_FILE, REPO_FOLDER } from './git/const';\nimport { validateRuleFile } from './ruleParser.validator';\nimport { rulesEngineErrors } from './types';\n\nexport const parseRules = async (rules, prContext, payload, ruleFile) => {\n  const { repo } = payload;\n  try {\n    await validateRuleFile(rules, ruleFile, payload);\n    const parser = new RuleParser(rules, prContext, DEBUG_MODE);\n    const results = await parser.parseStreams();\n    if (results.automations) {\n      const passedAutomationNames = Object.keys(results.automations).filter(\n        (automation) => results.automations[automation].passed\n      );\n      const totalAutomations = Object.keys(results?.automations).length;\n      await prepareSendingLogsToDD(\n        'info',\n        `${passedAutomationNames.length} out of ${totalAutomations} automations have passed for repo ${repo}`,\n        payload,\n        {\n          passedAutomations: passedAutomationNames.length,\n          passedAutomationNames,\n          totalAutomations,\n        }\n      );\n    }\n    return results;\n  } catch (error) {\n    const { owner, repo, pullRequestNumber } = payload;\n    debug(`error in parseRules: ${error}`);\n    await prepareSendingLogsToDD(\n      'error',\n      `${ERRORS.FAILED_TO_PARSE_CM} in pr ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      { error: error?.message, rules, ruleFile }\n    );\n    await handleValidationErrors(\n      error?.message,\n      STATUS_CODES.SYNTAX_ERROR,\n      payload,\n      ruleFile\n    );\n  }\n};\n\nconst removeDSObjects = (context) => {\n  const { ds_blame, ds_activity, ...repo } = context.repo || {};\n  return { ...context, repo };\n};\n\nexport const executeOneRuleFile = async ({\n  ruleFileContent,\n  payload,\n  baseBranch,\n  refBranch,\n  ruleFile = 'playground.cm',\n  cloneRepoPath,\n}) => {\n  CWD.cwd = cloneRepoPath;\n  let context;\n\n  const tempContext = await getContext(\n    baseBranch,\n    refBranch,\n    payload,\n    ruleFileContent,\n    ruleFile,\n    isCmChanged\n  );\n  const expertRequest = getExpertReviewer(\n    tempContext.repo,\n    tempContext.files,\n    payload\n  );\n  debug(\n    `expertRequest for cm file: ${ruleFile}: ${JSON.stringify(\n      expertRequest,\n      null,\n      2\n    )}`\n  );\n  context = removeDSObjects(tempContext);\n  context.repo = {\n    ...context.repo,\n    data_service: { expert_reviwer_request: expertRequest },\n  };\n  const stringSafeRuleFile = convertRuleFileToStringSafe(ruleFileContent);\n  const results = await parseRules(\n    stringSafeRuleFile,\n    context,\n    payload,\n    ruleFile\n  );\n  return { results, context, errors: rulesEngineErrors };\n};\n\nexport const executeCached = async ({\n  ruleFileContent,\n  payload,\n  ruleFile = 'playground.cm',\n  cachedContext,\n}) => {\n  const stringSafeRuleFile = convertRuleFileToStringSafe(ruleFileContent);\n  const results = await parseRules(\n    stringSafeRuleFile,\n    cachedContext,\n    payload,\n    ruleFile\n  );\n  return { results, context: cachedContext, errors: rulesEngineErrors };\n};\n\nconst parseRulesParserErrors = async (\n  results,\n  ruleFile,\n  stringSafeRuleFile,\n  payload\n) => {\n  const { owner, repo, pullRequestNumber } = payload;\n  try {\n    const validatorErrors = results?.validatorErrors;\n    const parserErrors = results?.errors;\n    //If VALIDATOR error - send to DD only, other errors - fail gitstream\n    if (Object.keys(validatorErrors || {}).length) {\n      for (const validator of Object.keys(validatorErrors)) {\n        debug(\n          `${ERRORS.VALIDATOR_ERROR} - ${validator}: ${validatorErrors[validator]}`\n        );\n        await prepareSendingLogsToDD(\n          'warn',\n          `${ERRORS.VALIDATOR_ERROR} - ${validator} in pr ${owner}/${repo}/${pullRequestNumber}`,\n          payload,\n          {\n            error: `${validatorErrors[validator]}`,\n            ruleFile,\n            cmContent: stringSafeRuleFile,\n          },\n          true\n        );\n      }\n    }\n    if (Object.keys(parserErrors || {}).length) {\n      for (const statusCode of Object.keys(parserErrors)) {\n        debug(`Error: ${parserErrors[statusCode]}`);\n        await handleValidationErrors(\n          parserErrors[statusCode],\n          statusCode,\n          payload,\n          ruleFile\n        );\n      }\n      return true;\n    }\n  } catch (error) {\n    debug(`Error in parseRulesParserErrors ${error?.message}`);\n    await prepareSendingLogsToDD(\n      'warn',\n      `${ERRORS.FAILED_PARSE_RULES_PARSER_ERRORS} in pr ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      { error: `${error?.message}`, ruleFile },\n      true\n    );\n    await handleValidationErrors(\n      `${ERRORS.FAILED_PARSE_RULES_PARSER_ERRORS}: ${error?.message}`,\n      STATUS_CODES.FAILED_PARSE_RULES_PARSER_ERRORS,\n      payload,\n      ruleFile\n    );\n    return true;\n  }\n};\n\nexport const parseMultipleRuleFiles = async (\n  rules,\n  baseBranch,\n  refBranch,\n  payload,\n  isCmChanged,\n  cache = null\n) => {\n  let combinedResults = {};\n  const contextPerRuleFile = {};\n  for (const ruleFile of Object.keys(rules)) {\n    try {\n      let context;\n      if (cache) {\n        context = {\n          ...cache[ruleFile],\n          pr: convertPRContextFromBase64(payload.prContext),\n        };\n      } else {\n        const tempContext = await getContext(\n          baseBranch,\n          refBranch,\n          payload,\n          rules[ruleFile],\n          ruleFile,\n          isCmChanged\n        );\n        const expertRequest = getExpertReviewer(\n          tempContext.repo,\n          tempContext.files,\n          payload\n        );\n        debug(\n          `expertRequest for cm file: ${ruleFile}: ${JSON.stringify(\n            expertRequest,\n            null,\n            2\n          )}`\n        );\n\n        context = removeDSObjects(tempContext);\n        context.repo = {\n          ...context.repo,\n          data_service: { expert_reviwer_request: expertRequest },\n        };\n      }\n      context.env = process.env;\n      contextPerRuleFile[ruleFile] = context;\n      const stringSafeRuleFile = convertRuleFileToStringSafe(rules[ruleFile]);\n      const results = await parseRules(\n        stringSafeRuleFile,\n        context,\n        payload,\n        `${ruleFile}`\n      );\n      const breakGitstream = await parseRulesParserErrors(\n        results,\n        ruleFile,\n        stringSafeRuleFile,\n        payload\n      );\n      if (breakGitstream) {\n        return {};\n      }\n      await filterAnalyticsHandler(results.analytics, payload, context);\n      combinedResults = Object.keys(results.automations).reduce(\n        (acc, automation) => {\n          const ruleFileName =\n            ruleFile?.replace('.cm/', '')?.replace('.cm', '') || ruleFile;\n          const isOrgLevel = !ruleFile?.includes('.cm/');\n          return {\n            ...acc,\n            [`${ruleFileName}/${automation}`]: {\n              ...results.automations[automation],\n              is_org_level: isOrgLevel,\n              provider_repository_id: isOrgLevel\n                ? payload.cmRepoId\n                : payload.providerRepoId,\n            },\n          };\n        },\n        combinedResults\n      );\n    } catch (error) {\n      debug(`parseMultipleRuleFiles error: ${error.message}`);\n      const { owner, repo, pullRequestNumber } = payload;\n      await prepareSendingLogsToDD(\n        'error',\n        `${ERRORS.FAILED_TO_PARSE_CM} in pr ${owner}/${repo}/${pullRequestNumber}`,\n        payload,\n        {\n          error: error?.message,\n          rules,\n          ruleFile,\n        }\n      );\n      await handleValidationErrors(\n        ERRORS.FAILED_TO_PARSE_CM,\n        STATUS_CODES.FAILED_TO_PARSE_CM,\n        payload,\n        ruleFile\n      );\n    }\n  }\n  return { automations: combinedResults, contextPerFile: contextPerRuleFile };\n};\n\nexport const extractAdmins = async (\n  baseBranch,\n  isCmRepoFullyInstalled,\n  payload\n) => {\n  try {\n    const { cmRepoRef, repo } = payload;\n    const repoCmFile =\n      repo?.toLowerCase() === ORG_LEVEL_REPO ? '' : '.cm/' + MAIN_RULES_FILE;\n    const rules = readRemoteFile(repoCmFile, baseBranch);\n    const rulesObj = await parseCMFile(payload, rules, repoCmFile);\n    let admins = rulesObj?.config?.admin?.users || [];\n\n    if (isCmRepoFullyInstalled) {\n      const OrgLevelRules = readRemoteFile(\n        MAIN_RULES_FILE,\n        cmRepoRef,\n        REPO_FOLDER.CM\n      );\n      const orgRulesObj = await parseCMFile(\n        payload,\n        OrgLevelRules,\n        MAIN_RULES_FILE\n      );\n\n      admins = admins.concat(orgRulesObj?.config?.admin?.users || []);\n    }\n    const adminArray = Array.from(new Set(admins));\n    return adminArray;\n  } catch (e) {\n    const { owner, repo, pullRequestNumber } = payload;\n    await prepareSendingLogsToDD(\n      'warn',\n      `${ERRORS.FAILED_TO_EXTRACT_ADMINS} in pr ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      { error: e?.message },\n      true\n    );\n    console.warn(ERRORS.FAILED_TO_EXTRACT_ADMINS);\n    return [];\n  }\n};\n\nexport const getCMChanged = (refBranch, baseBranch, repo) => {\n  const cmChanged = isCmChanged(refBranch, baseBranch, repo);\n  const isDryRun =\n    cmChanged && hasNonRuleFilesChanges(refBranch, baseBranch, repo);\n  return { cmChanged, isDryRun };\n};\n\nconst getRules = async (\n  cmChanged,\n  refBranch,\n  baseBranch,\n  payload,\n  isCmRepoFullyInstalled\n) => {\n  // In case there are changes in the cm then get the cm from the local branch\n  try {\n    const { repo, cmRepoRef } = payload;\n    let rules = await getRuleFiles(cmChanged ? refBranch : baseBranch, repo);\n    //If the user has org level then get the rules also from the cm repo\n    if (isCmRepoFullyInstalled && repo?.toLowerCase() !== ORG_LEVEL_REPO) {\n      const orgRules = getOrgCmFiles(cmRepoRef);\n      const orgRulesToExclude = await getExcludedOrgCMFilesBasedOnRepo(\n        orgRules,\n        repo,\n        payload\n      );\n      for (const ruleFile of orgRulesToExclude) {\n        delete orgRules[ruleFile];\n      }\n      rules = { ...orgRules, ...rules };\n    }\n    return rules;\n  } catch (error) {\n    debug(error.message);\n    return {};\n  }\n};\n\nexport const getRulesAndValidate = async (\n  cmChanged,\n  refBranch,\n  baseBranch,\n  payload,\n  isCmRepoFullyInstalled\n) => {\n  const rules = await getRules(\n    cmChanged,\n    refBranch,\n    baseBranch,\n    payload,\n    isCmRepoFullyInstalled\n  );\n  if (!Object.keys(rules).length) {\n    await prepareSendingLogsToDD(\n      'warn',\n      ERRORS.RULE_FILE_NOT_FOUND,\n      payload,\n      { error: ERRORS.RULE_FILE_NOT_FOUND },\n      true\n    );\n    await handleValidationErrors(\n      ERRORS.RULE_FILE_NOT_FOUND,\n      STATUS_CODES.RULE_FILE_NOT_FOUND,\n      payload\n    );\n  }\n  return rules;\n};\n\nconst getPREventsInRuleFile = (rules, file) => {\n  return Object.values(WATCH_PR_EVENTS).reduce((ac, event) => {\n    if (rules[file].includes(`pr.${event}`)) {\n      return { ...ac, [event]: true };\n    }\n    return ac;\n  }, {});\n};\n\nconst getFiltersInRuleFile = (rules, file) => {\n  return Object.keys(WATCH_FILTERS).reduce((ac, filter) => {\n    if (WATCH_FILTERS[filter].test(rules[file])) {\n      return { ...ac, [filter]: true };\n    }\n    return ac;\n  }, {});\n};\n\nexport const getWatchers = async (rules, payload): any => {\n  try {\n    const watchers = Object.keys(rules).reduce((acc, file) => {\n      const events = getPREventsInRuleFile(rules, file);\n      const filters = getFiltersInRuleFile(rules, file);\n      return {\n        events: { ...acc?.events, ...events },\n        filters: { ...acc?.filters, ...filters },\n      };\n    }, {});\n    return watchers;\n  } catch (error) {\n    const { owner, repo, pullRequestNumber } = payload;\n    await prepareSendingLogsToDD(\n      'warn',\n      `${ERRORS.FAILED_TO_GET_WATCHERS} in pr ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      { error: error?.message },\n      true\n    );\n    await handleValidationErrors(\n      ERRORS.FAILED_TO_GET_WATCHERS,\n      STATUS_CODES.FAILED_TO_GET_WATCHERS,\n      payload\n    );\n  }\n};\n\nexport const executeParser = async ({ context, ruleFileContent, payload }) => {\n  const ruleFile = 'playground.cm';\n  const stringSafeRuleFile = convertRuleFileToStringSafe(ruleFileContent);\n  const results = await parseRules(\n    stringSafeRuleFile,\n    context,\n    payload,\n    ruleFile\n  );\n  return { results, errors: rulesEngineErrors };\n};\n","// @ts-nocheck\nimport axios from 'axios';\nimport {\n  ERRORS,\n  RESOLVER_TOKEN,\n  RULES_RESOLVER_URL,\n  STATUS_CODES,\n  USE_CACHE,\n} from '../common/const';\nimport { prepareSendingLogsToDD } from '../common/logger';\nimport { loadCacheResults } from './cache';\nimport { handleValidationErrors } from './error.handler';\nimport { executeGitCommand } from './git.service';\nimport { REPO_FOLDER } from './git/const';\nimport { extractAdmins, getCMChanged, getRulesAndValidate } from './ruleParser';\n\nexport const validateDefaultFolder = () => {\n  try {\n    executeGitCommand(`git config --global --add safe.directory '*'`);\n    return true;\n  } catch (e) {\n    REPO_FOLDER.DEFAULT = '.';\n    return false;\n  }\n};\n\nexport const calculateRunData = async (\n  payload,\n  refBranch,\n  baseBranch,\n  isCmRepoFullyInstalled\n) => {\n  const { repo } = payload;\n  const cmState = getCMChanged(refBranch, baseBranch, repo);\n  const rules = await getRulesAndValidate(\n    cmState.cmChanged,\n    refBranch,\n    baseBranch,\n    payload,\n    isCmRepoFullyInstalled\n  );\n  const admins = await extractAdmins(\n    baseBranch,\n    isCmRepoFullyInstalled,\n    payload\n  );\n  return { cmState, rules, admins, cache: {} };\n};\n\nexport const loadRunData = async (\n  payload,\n  refBranch,\n  baseBranch,\n  isCmRepoFullyInstalled\n): any => {\n  if (USE_CACHE) {\n    const cache = loadCacheResults();\n    if (!Object.keys(cache)) {\n      return await handleValidationErrors(\n        ERRORS.INVALID_CACHE,\n        STATUS_CODES.INVALID_CACHE,\n        {}\n      );\n    }\n    const rules = cache.rules;\n    const admins = cache.admins;\n    const cmState = cache.cmState;\n    return { cache, rules, admins, cmState };\n  }\n  const { rules, admins, cmState, cache } = await calculateRunData(\n    payload,\n    refBranch,\n    baseBranch,\n    isCmRepoFullyInstalled\n  );\n  return { rules, admins, cmState, cache };\n};\n\nexport const sendResultsToResolver = async (body, payload, automations) => {\n  try {\n    await axios.post(RULES_RESOLVER_URL, JSON.stringify(body), {\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': RESOLVER_TOKEN,\n      },\n    });\n\n    await prepareSendingLogsToDD(\n      'info',\n      ERRORS.SEND_RESULTS_TO_RESOLVER_SUCCEEDED,\n      payload\n    );\n\n    console.log({ parserResults: JSON.stringify(automations) });\n  } catch (error) {\n    await prepareSendingLogsToDD(\n      'error',\n      ERRORS.SEND_RESULTS_TO_RESOLVER_FAILED,\n      payload,\n      {\n        error: error?.message,\n        body,\n      }\n    );\n    console.error(ERRORS.SEND_RESULTS_TO_RESOLVER_FAILED, { error });\n    await handleValidationErrors(\n      error?.message,\n      STATUS_CODES.SEND_RESULTS_TO_RESOLVER_FAILED,\n      payload\n    );\n  }\n};\n","import {\n  BASE_REF,\n  CLIENT_PAYLOAD,\n  ERRORS,\n  HEAD_REF,\n  STATUS_CODES,\n} from './common/const';\nimport { prepareSendingLogsToDD } from './common/logger';\nimport { attachAdditionalContextByProvider } from './providers';\nimport { saveResultsInCache } from './utils/cache';\nimport { handleValidationErrors } from './utils/error.handler';\nimport { getWatchers, parseMultipleRuleFiles } from './utils/ruleParser';\nimport {\n  loadRunData,\n  sendResultsToResolver,\n  validateDefaultFolder,\n} from './utils/run';\n\nexport const runCI = async () => {\n  const refBranch = (HEAD_REF || '').trim();\n  const baseBranch = (BASE_REF || '').trim();\n  const payload =\n    typeof JSON.parse(CLIENT_PAYLOAD) === 'string'\n      ? JSON.parse(JSON.parse(CLIENT_PAYLOAD))\n      : JSON.parse(CLIENT_PAYLOAD);\n\n  try {\n    const { repo, owner, pullRequestNumber, headSha, hasCmRepo } = payload;\n    //Check if the user has a cm repo (in gitlab the repo should also have a rules file) and the yml supports org level.\n    const isCmRepoFullyInstalled = validateDefaultFolder() && hasCmRepo;\n    console.log(\n      `PR: ${owner}/${repo}/pull/${pullRequestNumber}\\ncommit: ${headSha}`\n    );\n    const { rules, admins, cmState, cache } = await loadRunData(\n      payload,\n      refBranch,\n      baseBranch,\n      isCmRepoFullyInstalled\n    );\n    const { automations, contextPerFile } = await parseMultipleRuleFiles(\n      rules,\n      baseBranch,\n      refBranch,\n      payload,\n      cmState.cmChanged,\n      cache.contextPerFile\n    );\n    saveResultsInCache({ contextPerFile, rules, admins, cmState });\n    const watchers = await getWatchers(rules, payload);\n\n    // Send evaluated rules to the resolver\n    const body = {\n      automations,\n      context: {\n        watchPREvents: watchers.events,\n        watchFilters: watchers.filters,\n        ...payload,\n        admins,\n        dryRun: cmState.isDryRun,\n        onlyRulesFilesChanges: cmState.cmChanged && !cmState.isDryRun,\n        ...attachAdditionalContextByProvider(payload.source, {\n          baseBranch,\n        }),\n      },\n    };\n    await sendResultsToResolver(body, payload, automations);\n  } catch (error) {\n    const { owner, repo, pullRequestNumber } = payload;\n    console.error(ERRORS.INTERNAL_ERROR, { error });\n    await prepareSendingLogsToDD(\n      'warn',\n      `${ERRORS.INTERNAL_ERROR} for pr ${owner}/${repo}/${pullRequestNumber}`,\n      payload,\n      {\n        error: error?.toString(),\n      }\n    );\n    await handleValidationErrors(\n      error?.toString(),\n      STATUS_CODES.INTERNAL_ERROR,\n      payload\n    );\n  }\n};\n","// @ts-nocheck\nimport yaml from 'js-yaml';\nimport { readRemoteFile } from '../utils/git.service';\n\nexport const attachAdditionalContextByProvider = (provider, context) => {\n  const attachContextByProvider = {\n    gitlab: (context) => {\n      return {\n        performNonSoftCommands: false,\n      };\n    },\n  };\n  const getContextCb = attachContextByProvider[provider];\n  const additionalContext = getContextCb ? getContextCb(context) : null;\n  return additionalContext || {};\n};\n","// @ts-nocheck\nimport { runCI } from './run-ci';\nimport {\n  executeOneRuleFile,\n  executeCached,\n  executeParser,\n} from './utils/ruleParser';\n\nconsole.log('Running gitstream-rules-engine 1.2.3');\n\nexport let isExecutePlayground = false;\n\nexport const RulesEngine = (isPlayground = false) => {\n  isExecutePlayground = isPlayground;\n  return {\n    run: runCI,\n    executeOneRuleFile,\n    executeCached,\n    executeParser,\n  };\n};\n"],"names":["AWS_BASE_URL","API_ENDPOINTS","REVIEW_TIME","EXPERT_REVIWER","PACKAGE_NAME","ERRORS","FAILED_RENDER_STRING","FAILED_YAML_LOAD","INVALID_CM","INVALID_CM_CONTEXT_VARIABLES","listify","internalIncludes","file","searchTerm","includes","internalRegex","multiline","startsWith","substring","slice","replace","RegExp","test","internalEvery","arr","value","bools","map","item","Boolean","length","every","element","formatInputToList","input","split","DOCS_LINK_COMMENT","MONTH","01","02","03","04","05","06","07","08","09","10","11","12","FiltersForAnalytics","GeneralFilters","handleAnalytics","filterName","filterArgs","filters","args","termRegexOrList","attribute","term","regex","list","some","search","calculateList","files","callbackName","isReject","attr","formattedFiles","formattedList","filter","filterList","mapList","HighLevelFilters","GENERAL_FILTERS_HANDLER","_formatInputToList","match","reject","nope","intersection","listA","listB","_","difference","ADDITIONAL_FORMATTING","github","gitlab","default","convertAndSumContributors","contributors","gitToProviderUser","Object","keys","reduce","acc","gitAuthor","score","convertContributorsAndBlame","repo","blame","git_to_provider_user","sumAuthorMetrics","authorMetric","numOfFiles","author","sumByAuthor","values","aa","precent","totalPercent","calculateSumByAuthor","sortObject","data","object","sort","a","b","validateAndCompare","authorMetrics","gt","lt","authors","undefined","compareThan","isGtLtArgsValid","getETR","request","_context","axios","post","headers","Content-type","numericValue","getExpertReviewer","_context2","filterExpertResult","filterBy","thresholdData","user","contributor","parseExpertReviewerThreshold","getAndFilterExpertReviewer","_context3","data_service","_repo$data_service","expert_reviwer_request","dataWithoutIssuer","isIssuerFiltered","pr_author","explainExpertReviewerComment","expertReviewers","activeUsers","knowledgeUsers","threshold","provider","isNoUserButYou","comment","join","explainActivityAndBlameComment","activity","knowledge","activityUsers","forEach","monthsComment","months","index","push","moment","subtract","format","month","user1Value","user2Value","_activity$file$activi","additions","deletions","explainActivityByMonth","explainActivityTable","knowledgeText","explainKnowledgeSection","error","console","log","getExplainActivity","userActivity","au","activityData","ac","date","_date$split","parseActivityByUserDataForExplain","parseActivityByUserForExplain","getExplainKnowledge","userKnowledge","Math","round","estimatedReviewTime","branch","callback","diff","_branch$diff","files_metadata","_branch$diff$files_me","_branch$diff2","additionalLines","deletedLines","prFiles","_branch$diff3","fileMetadata","file_path","new_file","original_file","reqBody","prMetadata","commits","num_of_commits","lines","prAdditionalLines","prDeletedLines","baseBranch","base","request_source","parseExpertReviewer","_ref2$gt","expertReviewer","parseExplainCodeExpertHandler","_yield$getAndFilterEx2","explainActivity","explain","_data$explain","explainKnowledge","_data$explain2","explainComment","Array","from","Set","base64Comment","Buffer","toString","parseCodeExperts","codeExperts","_ref5$gt","_context4","parseExplainExpertReviewer","explainExpertReviewer","_context5","parseExplainCodeExperts","explainCodeExperts","_context6","minify","text","replaceAll","trim","jsFormatter","content","prettier","semi","singleQuote","filepath","SUPPORTED_FORMATTERS","js","ts","html","py","spawnSync","JSON","stringify","stdout","fileExtension","pop","get","formatter","convertArgsToString","key","SONAR_REGEX","getSonarPropertyRating","str","rawRating","_str$match","lastIndexOf","indexOf","getSonarPropertyCount","row","isFloat","count","parseFloat","parseInt","isNaN","parseSonarParser","pr","sonarParser","sonarObject","bugs","rating","code_smells","vulnerabilities","security_hotspots","duplications","coverage","sonarComment","comments","commenter","sonarCommentArray","parseJitReview","review","parsedReview","initEmptyJitObject","conversations","conversation","security_control","_lines$","_lines$$split$","type","_lines$2","_lines$2$split$","description","_lines$3","_lines$3$split$","severity","_lines$4","_lines$4$split$","summary","_lines$5","_lines$5$split$","metrics","HIGH","MEDIUM","LOW","INFO","extractJitFindings","jitComments","reviews","extractJitCommentsFromPR","jitObject","isEmpty","parsedReviews","mergeWith","unifyReviews","parseFilterAllExtensions","extensions","searchArray","filePath","x","parseFilterAllFilePath","parseRankByGitBlame","rankByGitBlame","blameByAuthor","comparedResult","Filters","FILTERED_OUT_LIST","allDocs","FILTERS_EXTENSION_LIST","allImages","allTests","HIGH_LEVEL_FILTERS_HANDLER","excludedFile","parseFilterAllTests","array","isFormattingChange","original_content","new_content","e","matchDiffLines","ignoreWhiteSpaces","diffLinesRegex","emptyLinesRegex","diffRow","flat","isFirstCommit","rankByGitActivity","weeks","weeksArr","fill","i","totalsPerFile","totalPerFile","linesPerWeek","week","calculateActivityPerFile","git_activity","fileSumPerAuthor","calcPercent","acAuthor","arrSum","total","toFixed","calculateFileSumPerAuthorActivity","activityByAuthor","convertContributors","explainRankByGitBlame","parseResult","authorFilteredParseResult","authorFilteredParseResultString","formattedBlameContext","formattedValues","accAuthor","formatGitAuthor","formattedValue","floor","convertBlameContextToExplain","argsTemplate","numOfPRFiles","parserResultTemplate","suggestedReviewersComment","isGitUser","result","explainBlameTemplate","mapToEnum","enumArgs","extractSonarFindings","jitFilter","ASYNC","DefaultParserAttributes","Validators","FILTER_HANDLERS","filterListRegex","re","isEveryInListRegex","isSomeInList","searchTerms","isSomeInListRegex","isStringIncludes","terms","isStringIncludesRegex","isEveryInList","extractExtensions","isEveryExtension","isEveryExtensionRegex","filterFileDiffRegex","filterRegex","isEveryLineInFileDiffRegex","isSomeLineInFileDiffRegex","allExtensions","allPassRegex","allPathIncludes","includesRegex","allFormattingChange","formattedNew","formattedOld","client","RuleParser","ruleFileContent","context","debugMode","this","isDebug","env","nunjucks","__dirname","autoescape","allFilters","_this","addFilter","ruleFileRawContent","ruleFile","render","renderedRuleFile","reRenders","currentContext","_loop","dataAsString","_this2","Promise","resolve","renderString","err","res","yaml","errors","validateRun","runs","run","newArgs","arg","argValue","combineMetadataWithRulesResult","resourceName","resource","rules","_this3","passed","pass","if","combineMetadataWithResult","lastParserResult","validatorErrors","automations","analytics","clearParserResults","attachAdditionalArgs","latestResults","cloneDeep","newAutomations","_i","_iterator","action","validatorsConstants","SUPPORTED_ACTIONS","EXPLAIN_CODE_EXPERTS","validateCM","validators","FiltersValidator","ActionsValidator","FileStructureValidator","SavedWordsValidator","ContextVariableValidator","validator","validate","yamlFile","_this4","parseStreams","RULES_RESOLVER_URL","process","HEAD_REF","BASE_REF","CLIENT_PAYLOAD","RESOLVER_TOKEN","RULES_RESOLVER_TOKEN","DEBUG_MODE","USE_CACHE","IGNORE_PATTERNS_IN_DRY_RUN","WATCH_PR_EVENTS","APPROVALS","CHECKS","DRAFT","DESCRIPTION","REVIEWERS","STATUS","TITLE","LABELS","WATCH_FILTERS","sendLogToDD","logData","_JSON$parse","parse","ddApiKey","ddtags","host","method","url","debug","message","prepareSendingLogsToDD","level","payload","extraData","shouldReport","owner","pullRequestNumber","triggeredBy","org","gitCommands","since","REPO_FOLDER","DEFAULT","CM","groupByWeek","cur","find","git_user","changes","accSum","formatDateToDays","name","GIT_INFO","headBranch","today","Date","formattedDate","abs","reportGitCommandsAndResults","gitBlameCommand","gitActivityCommand","gitLogCommand","gitBlame","executeGitCommand","_executeGitCommand","gitActivity","_executeGitCommand2","_executeGitCommand2$s","gitLog","_executeGitCommand3","readRemoteFileAndSplit","readRemoteFile","_readRemoteFile","splitDsAndBlameObjects","blames","formattedBlame","dsBlame","splitDsAndActivity","formattedActivity","dsActivity","commitsDateByAuthor","branchName","recentAuthorActivity","raw","_raw","authorData","_raw$i","weekChanges","dateObject","momentDate","weekNum","buildTempActivity","_raw$split","gitCommand","rawAuthors","_ref5","GIT_ERRORS","getAllAuthorsOfFile","allAuthorsString","getGitBlameString","prevAuthor","authorLines","allLinesCount","allAuthors","authorFormatted","_author$substring","getAuthorLines","allRows","isLastRowEmpty","_readRemoteFileAndSpl2","getCodeLinesCount","calculateStatisticsForBlame","matchByEmail","contributorEmail","providerUserLogin","providerUserName","email","matchByName","contributorFullName","formattedProviderName","toLowerCase","formattedGitName","formatProviderContributors","providerContributors","login","formatGitContributors","gitContributors","contributorMap","lastName","fullName","reversedName","contributions","getUserMappingFromConfig","userMapping","config","user_mapping","authorObject","_e","matchContributorsFromProviderData","providerContributorsFormatted","gitContributorsFormatted","matchContributionsList","unmachedContributors","fallback1","mergeResults","configContributors","matchedProviderContributors","authorKey","matchContributors","rulesObj","matchContributorsFromProvider","userMappingFromConfig","rulesEngineErrors","callWebhookOnError","gitlabCustomWebhookToken","_ref2","webhook_url","body","status","webhookEvent","event_type","Content-Type","x-gitlab-token","x-gitlab-event","handleErrorByProvider","core","decodedMessage","handleValidationErrors","statusCode","fullMessage","isExecutePlayground","clientPayload","getErrorHandlerCb","source","exit","fromBase64String","base64string","convertRuleFileToStringSafe","replacers","pr.description","toReplace","convertPRContextFromBase64","prContext","general_comments","_prContext$general_co","generalComment","line_comments","_prContext$line_comme","lineComments","_prContext$comments","_prContext$reviews","_comment$conversation","_prContext$conversati","filteredOutCMFilesFunc","to","ignorePattern","formatFilesToSourceFiles","refBranch","chunks","getContent","getCheckoutCommit","extractMetadataFromFiles","getDiffSize","parseCMFile","contributersStatContext","_splitDsAndBlameObjec","_executeGitCommand5","_executeGitCommand5$s","age","_commitsDateByAuthor","author_age","ds_blame","contributersActivityContext","_splitDsAndActivity","ds_activity","filterOutFiles","isCmChanged","diffCommand","_files","_files2","getTheRightGitAuthor","fallbacks","fullGitName","authorResult","prevResults","gitNames","gitUser","authorDates","findGitAuthorsWithFallback","gitName","gitEmail","getContext","_getDiff","getDiff","commitsNumber","getCommitsNumberOnBranch","getContributorsStatistics","_getAuthorName","getAuthorName","fullAuthorName","autor_name","authorName","author_email","authorEmail","size","contributorsMap","author_name","contributorsStats","string","_context$pr","reducedContext","CWD","cwd","command","folder","execSync","maxBuffer","_rules$config","ignore_files","_rules$config$ignore_","_rules$config$ignore_2","logs","currBranch","readFileSync","SOURCE_CODE_WORKING_DIRECTORY","getCMFilesList","cmFiles","getExcludedOrgCMFilesBasedOnRepo","orgRules","excludedRulesFiles","ignore_repositories","getOrgCmFiles","orgCmFiles","cmFile","getRuleFiles","ruleFiles","Number","contributorStats","saveResultsInCache","results","writeFileSync","loadCacheResults","cacheResults","warn","ExpertReviewerContext","ExpertReviewerRequest","gitToProvider","merge_dict","pr_files","tempPrFiles","buildPrFiles","AmplitudeEvent","hasCmRepo","user_id","_context$repo","_context$repo2","_context$repo3","_context$repo4","_context$repo5","pr_url","generatePrUrl","event_properties","filter_name","sendAmplitudeEvent","event","Amplitude","analyticsKey","serverUrl","analyticsHttpApiUrl","ampEvent","logEvent","SegmentEvent","trigger_id","is_org_level","userId","properties","git_org_name","git_provider","sendSegmentEvent","segment","SegmentClient","segmentServiceUrl","segment_write_key","segmentWriteKey","segmentEvent","track","Error","GIT_PROVIDER","filterAnalyticsHandler","COMMENT_REGEX","EMPTY_LINE_REGEX","ACTIONS_LINE_REGEX","ACTIONS_PREFIX_REGEX","MALFORMED_EXPRESSION_REGEX","validateKeyword","validateActions","actions","supportedActions","SUPPORTED_ACTIONS_BY_PROVIDER","notSupportedActions","validateExpressions","validateRequiredArgs","existingArgs","requiredArgsExists","requireArg","REQUIRED_ARGUMENTS_BY_ACTIONS","all","validateSupportedArgs","unsupportedArgs","SUPPORTED_ARGUMENTS_BY_ACTION","_validatorsConstants$","validateArgs","flatMap","_context8","validateSavedWords","_context9","validateRuleFile","rulesWithoutComments","_context10","_rulesWithoutComments","parseRules","parser","passedAutomationNames","automation","totalAutomations","passedAutomations","removeDSObjects","executeOneRuleFile","cloneRepoPath","expertRequest","tempContext","stringSafeRuleFile","executeCached","cachedContext","parseRulesParserErrors","parserErrors","cmContent","_i2","parseMultipleRuleFiles","cache","combinedResults","contextPerRuleFile","v","ruleFileName","isOrgLevel","provider_repository_id","cmRepoId","providerRepoId","_i3","_ret","contextPerFile","extractAdmins","isCmRepoFullyInstalled","_context7","cmRepoRef","repoCmFile","admins","admin","users","OrgLevelRules","concat","orgRulesObj","adminArray","getCMChanged","cmChanged","isDryRun","hasNonRuleFilesChanges","getRules","getRulesAndValidate","getPREventsInRuleFile","getFiltersInRuleFile","getWatchers","watchers","events","executeParser","_context11","validateDefaultFolder","calculateRunData","cmState","loadRunData","_yield$calculateRunDa","sendResultsToResolver","x-api-key","parserResults","runCI","headSha","_yield$loadRunData","_yield$parseMultipleR","watchPREvents","watchFilters","dryRun","onlyRulesFilesChanges","getContextCb","performNonSoftCommands","isPlayground"],"mappings":"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"}