{"version":3,"file":"gitstream-rule-parser.cjs.production.min.js","sources":["../src/consts.ts","../src/rules-parser/args.definitions.ts","../src/rules-parser/filters/common.ts","../src/rules-parser/filters/general-filters.ts","../src/rules-parser/filters/high-level-filters.ts","../src/utils/providers.ts","../src/rules-parser/filters/high-level-filters-helper.ts","../src/rules-parser/filters/filter-validators.ts","../src/rules-parser/filters/async-filter-helper.ts","../src/rules-parser/filters/explain-expert-filter-helper.ts","../src/rules-parser/filters/async-filters.ts","../src/utils/formatters.ts","../src/rules-parser/filters/integrations-filters/sonar/helpers.ts","../src/rules-parser/filters/integrations-filters/sonar/sonar.ts","../src/rules-parser/filters/integrations-filters/jit/helpers.ts","../src/rules-parser/filters/integrations-filters/jit/index.ts","../src/rules-parser/filters/integrations-filters/jit/jit.ts","../src/rules-parser/old-filters/filters.ts","../src/rules-parser/types.ts","../src/rules-parser/rules.parser.ts"],"sourcesContent":["export const ENVS = {\n  PROD: 'prod',\n  DEV: 'dev',\n  LOCAL: 'local',\n};\nexport const ENV = ENVS.PROD;\nexport const BASE_URL =\n  ENV === ENVS.PROD\n    ? 'https://workerb.linearb.io'\n    : ENV === ENVS.DEV\n    ? 'https://workerb.linearb-dev-03.io'\n    : 'http://localhost:3131';\nexport const API_ENDPOINTS = {\n  REVIEW_TIME: BASE_URL + '/v1/pulls/review-time',\n  EXPERT_REVIWER: BASE_URL + '/gs/v1/data-service/expert-reviewer',\n};\n\nconst PACKAGE_NAME = 'gitstream-rules-parser';\n\nexport const ERRORS = {\n  FAILED_RENDER_STRING: PACKAGE_NAME + ' - failed render string',\n  FAILED_YAML_LOAD: PACKAGE_NAME + ' - failed yaml.load',\n};\n\nexport const STATUS_CODES = {\n  FAILED_RENDER_STRING: 80,\n  FAILED_YAML_LOAD: 81,\n};\n","export const argsDefinitionsByAction = {\n  'add-comment@v1': { comment: { name: 'comment', type: 'string' } },\n  'add-label@v1': { label: { name: 'label', type: 'string' } },\n  'add-labels@v1': { labels: { name: 'labels', type: 'list' } },\n  'add-reviewers@v1': {\n    reviewers: { name: 'reviewers', type: 'list' },\n    team_reviewers: { name: 'team_reviewers', type: 'list' },\n  },\n  'merge@v1': {\n    wait_for_all_checks: { name: 'wait_for_all_checks', type: 'boolean' },\n    rebase_on_merge: { name: 'rebase_on_merge', type: 'boolean' },\n    squash_on_merge: { name: 'squash_on_merge', type: 'boolean' },\n  },\n  'require-reviewers@v1': { reviewers: { name: 'reviewers', type: 'list' } },\n  'set-required-approvals@v1': {\n    approvals: { name: 'approvals', type: 'number' },\n  },\n  'request-changes@v1': {\n    comment: { name: 'comment', type: 'number' },\n  },\n};\n\nexport const listify = [\n  argsDefinitionsByAction['add-reviewers@v1'].reviewers.name,\n  argsDefinitionsByAction['require-reviewers@v1'].reviewers.name,\n  argsDefinitionsByAction['add-reviewers@v1'].team_reviewers.name,\n  argsDefinitionsByAction['add-labels@v1'].labels.name,\n];\n","import { FiltersUsage } from './filter-types';\n\nexport const internalIncludes = (file: string, searchTerm: string) =>\n  file?.includes(searchTerm);\n\nexport const internalRegex = (\n  file: string,\n  searchTerm: string,\n  multiline: boolean = false\n) => {\n  // possible inputs are regular expressions as 'strings' or /regex/ standard javascript\n  // literals. a 3rd input is a string with a nunjuks 'r/regex/', this happens when a\n  // a nunjucks regex expression is injected back into the context.\n  // this 3rd type is non standard RegExp and therefore should inverted back.\n\n  // if it is a nunjuks regex string, convert it to compatible RegExp string\n  if (typeof searchTerm === 'string' && searchTerm.startsWith('r/')) {\n    // from the nunjuks regex patterns remove the 'r/' and the last '/'\n    searchTerm = searchTerm.substring(2).slice(0, -1);\n    // replace any \\/ back to /\n    searchTerm = searchTerm.replace('\\\\/', '/');\n  }\n\n  const re = new RegExp(searchTerm, multiline ? 'm' : '');\n  return re.test(file);\n};\n\nexport const internalEvery = (arr: boolean[], value: boolean) => {\n  const bools = arr?.map((item) => Boolean(item));\n  return bools?.length ? bools.every((element) => element === value) : false;\n};\n\nexport const formatInputToList = (input: any): any[] => {\n  if (typeof input === 'string') {\n    if (input.includes(',')) {\n      return input.split(',');\n    } else {\n      return [input];\n    }\n  }\n  return input ?? [];\n};\n\nconst PROVIDER = {\n  GITHUB: 'github',\n  GITLAB: 'gitlab',\n  BITBUCKET: 'bitbucket',\n};\n\nexport const PROVIDER_NAME: any = {\n  [PROVIDER.GITHUB]: 'GitHub',\n  [PROVIDER.GITLAB]: 'GitLab',\n  [PROVIDER.BITBUCKET]: 'BitBucket',\n};\n\nexport const DOCS_LINK_COMMENT =\n  '\\n \\nTo learn more about /:\\\\ gitStream - [Visit our Docs](https://docs.gitstream.cm/) \\n \\n';\n\nexport const MONTH: { [key: string]: string } = {\n  '01': 'JAN',\n  '02': 'FEB',\n  '03': 'MAR',\n  '04': 'APR',\n  '05': 'MAY',\n  '06': 'JUN',\n  '07': 'JUL',\n  '08': 'AUG',\n  '09': 'SEP',\n  '10': 'OCT',\n  '11': 'NOV',\n  '12': 'DEC',\n};\n\nexport class FiltersForAnalytics {\n  public static filters: FiltersUsage = {};\n}\n\nexport const handleAnalytics = (filterName: string, filterArgs: any[]) => {\n  FiltersForAnalytics.filters = {\n    ...FiltersForAnalytics.filters,\n    [filterName]: { args: filterArgs },\n  };\n};\n","import {\n  formatInputToList,\n  handleAnalytics,\n  internalEvery,\n  internalIncludes,\n  internalRegex,\n} from './common';\nimport { filterArgs } from './filter-types';\n\nconst parseSome = (list: boolean[]): boolean => {\n  handleAnalytics(GeneralFilters.some, []);\n  const formattedList = formatInputToList(list)?.map((item) => Boolean(item));\n  return (\n    Boolean(formattedList?.length) &&\n    formattedList.some((match: boolean) => match)\n  );\n};\n\nconst parseEvery = (list: boolean[]): boolean => {\n  handleAnalytics(GeneralFilters.every, []);\n  return internalEvery(formatInputToList(list), true);\n};\n\nconst termRegexOrList = (\n  file: any,\n  attribute: string,\n  term: string,\n  regex: string,\n  list: any[]\n) =>\n  term\n    ? internalIncludes(attribute ? file[attribute] : file, term)\n    : regex\n    ? internalRegex(attribute ? file[attribute] : file, regex)\n    : list.some((search) =>\n        internalIncludes(attribute ? file[attribute] : file, search)\n      );\n\nconst filterList = (\n  files: any,\n  attribute: string,\n  term: string,\n  regex: string,\n  list: any[],\n  isReject: boolean\n) => {\n  return files.filter((file: any) =>\n    isReject\n      ? !termRegexOrList(file, attribute, term, regex, list)\n      : termRegexOrList(file, attribute, term, regex, list)\n  );\n};\n\nconst mapList = (\n  files: any,\n  attribute: string,\n  term: string,\n  regex: string,\n  list: any[],\n  isReject: boolean\n) =>\n  files.map((file: any) =>\n    isReject\n      ? !termRegexOrList(file, attribute, term, regex, list)\n      : termRegexOrList(file, attribute, term, regex, list)\n  );\n\nconst calculateList = (\n  files: any[],\n  args: filterArgs,\n  callbackName: string,\n  isReject: boolean = false\n) => {\n  const attribute: string = args.attr || '';\n  const { term, regex, list } = args;\n  const formattedFiles = formatInputToList(files);\n  if (!term && !regex && !list) {\n    return [];\n  }\n  let formattedList = list;\n  if (list) {\n    formattedList = formatInputToList(list);\n  }\n  return callbackName === 'filterList'\n    ? filterList(\n        formattedFiles,\n        attribute,\n        term,\n        regex,\n        formattedList,\n        isReject\n      )\n    : mapList(formattedFiles, attribute, term, regex, formattedList, isReject);\n};\n\nconst parseFilter = (files: any[], args: filterArgs) => {\n  handleAnalytics(GeneralFilters.filter, [args]);\n  return calculateList(files, args, 'filterList');\n};\n\nconst parseReject = (files: any[], args: filterArgs) => {\n  handleAnalytics(GeneralFilters.reject, [args]);\n  return calculateList(files, args, 'filterList', true);\n};\n\nconst parseMap = (files: any[], { attr }: { attr: string }) => {\n  handleAnalytics(GeneralFilters.map, [{ attr }]);\n  return formatInputToList(files).map((file: any) => file[attr]);\n};\n\nconst parseIncludes = (file: string, args: filterArgs) => {\n  handleAnalytics(GeneralFilters.includes, [args]);\n  const { term, regex, list } = args;\n  if (!term && !regex && !list) {\n    return false;\n  }\n  let formattedList = list;\n  if (list) {\n    formattedList = formatInputToList(list);\n  }\n  return term\n    ? internalIncludes(file, term)\n    : regex\n    ? internalRegex(file, regex)\n    : formattedList.some((term: any) => file.includes(term));\n};\n\nconst parseMatch = (files: any[], args: filterArgs) => {\n  handleAnalytics(GeneralFilters.match, [args]);\n  return calculateList(files, args, 'mapList');\n};\n\nconst parseNope = (arr: boolean[]) => {\n  handleAnalytics(GeneralFilters.match, []);\n  return internalEvery(formatInputToList(arr), false);\n};\n\nexport enum GeneralFilters {\n  some = 'some',\n  every = 'every',\n  filter = 'filter',\n  includes = 'includes',\n  reject = 'reject',\n  map = 'map',\n  match = 'match',\n  nope = 'nope',\n}\n\nexport const GENERAL_FILTERS_HANDLER: any = {\n  [GeneralFilters.some]: parseSome,\n  [GeneralFilters.every]: parseEvery,\n  [GeneralFilters.filter]: parseFilter,\n  [GeneralFilters.reject]: parseReject,\n  [GeneralFilters.map]: parseMap,\n  [GeneralFilters.includes]: parseIncludes,\n  [GeneralFilters.match]: parseMatch,\n  [GeneralFilters.nope]: parseNope,\n};\n","import { File } from '../context/types';\nimport { handleAnalytics, internalRegex } from './common';\nimport {\n  Metric,\n  matchDiffLinesArgs,\n  rankByGitActivityArgs,\n  rankByLinesArgs,\n  FileMetric,\n  EnumArgs,\n} from './filter-types';\nimport _ from 'lodash';\nimport {\n  calculateFileSumPerAuthorActivity,\n  calculateActivityPerFile,\n  sumAuthorMetrics,\n  validateAndCompare,\n  convertBlameContextToExplain,\n  explainBlameTemplate,\n  convertContributorsAndBlame,\n  convertAndSumContributors,\n} from './high-level-filters-helper';\nimport { isGtLtArgsValid } from './filter-validators';\nimport {\n  estimatedReviewTime,\n  parseCodeExperts,\n  parseExpertReviewer,\n  parseExplainCodeExperts,\n  parseExplainExpertReviewer,\n} from './async-filters';\nimport { format } from '../../utils/formatters';\nimport parseSonarParser from './integrations-filters/sonar';\nimport jitFilter from './integrations-filters/jit';\n\nconst parseExtractSonarFindings = (pr: any): string => {\n  handleAnalytics(HighLevelFilters.extractSonarFindings, []);\n  return parseSonarParser(pr);\n};\n\nconst parserMapToEnum = (key: string, args: EnumArgs) => {\n  handleAnalytics(HighLevelFilters.mapToEnum, [key, args]);\n  const enumArgs = args?.enum;\n  if (enumArgs && Object.keys(enumArgs).length) {\n    return enumArgs[key];\n  }\n};\n\nconst parseFilterAllTests = (files: string[], extensions: string[]) => {\n  const regex = new RegExp(`[^a-zA-Z0-9](${extensions.join('|')})[^a-zA-Z0-9]`);\n  return (\n    Boolean(files.length) &&\n    files\n      .map((filePath: string) => regex.test(filePath || ''))\n      .every((x: boolean) => x)\n  );\n};\n\nconst parseFilterAllFilePath = (files: string[], searchArray: string[]) =>\n  Boolean(files.length) &&\n  files\n    .map((filePath: string) =>\n      searchArray.some((term: string) => (filePath || '').includes(term))\n    )\n    .every((x: boolean) => x);\n\nconst parseFilterAllExtensions = (files: string[], extensions: string[]) =>\n  files.length\n    ? parseFilterAllFilePath(\n        files.map((filePath: string) => filePath.split('.').pop() || ''),\n        extensions\n      )\n    : false;\n\nconst getUniqueExtensions = (files: string[]) => {\n  handleAnalytics(HighLevelFilters.extensions, []);\n  return (\n    files\n      // extensions\n      .map((x: string) => x.split('.').pop())\n      // unique\n      .filter((value, index, array) => array.indexOf(value) === index)\n  );\n};\n\nconst parseIsFormattingChange = (files: File[]) => {\n  try {\n    handleAnalytics(HighLevelFilters.isFormattingChange, []);\n    const allFormatting =\n      Boolean(files.length) &&\n      files.every(\n        ({ new_content, original_content, original_file, new_file }) => {\n          const formattedNew = format(new_content, new_file);\n          const formattedOld = format(original_content, original_file);\n          return formattedNew === formattedOld;\n        }\n      );\n    return allFormatting;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst parseMatchDiffLines = (files: File[], args: matchDiffLinesArgs) => {\n  handleAnalytics(HighLevelFilters.matchDiffLines, [args]);\n  const { regex, ignoreWhiteSpaces } = args;\n  const diffLinesRegex = new RegExp('^[+-]');\n  const emptyLinesRegex = new RegExp('^[+-]\\\\s*$');\n  return !regex\n    ? []\n    : files\n        .map(({ diff }) =>\n          diff\n            .split('\\n')\n            .filter((row) => diffLinesRegex.test(row))\n            .filter((row) =>\n              ignoreWhiteSpaces ? !emptyLinesRegex.test(row) : true\n            )\n            .map((diffRow) => internalRegex(diffRow, regex))\n        )\n        .flat(1);\n};\n\nconst parseIsFirstCommit = (contributors: any, author: string) => {\n  handleAnalytics(HighLevelFilters.isFirstCommit, [{ author }]);\n  return _.get(contributors, author, null) ? false : true;\n};\n\nconst parseRankByGitBlame = (repo: any, args: rankByLinesArgs) => {\n  handleAnalytics(HighLevelFilters.rankByGitBlame, [args]);\n  if (!isGtLtArgsValid(args)) {\n    return [];\n  }\n  const { gt, lt } = args;\n  const { blame } = convertContributorsAndBlame(repo);\n  const blameByAuthor = sumAuthorMetrics(\n    Object.values(repo.git_to_provider_user),\n    blame\n  );\n  const comparedResult = validateAndCompare(blameByAuthor, gt, lt);\n  return Object.keys(comparedResult).length\n    ? [...Array.from(new Set(Object.keys(comparedResult)))]\n    : [];\n};\n\nconst parseRankByGitActivity = (repo: any, args: rankByGitActivityArgs) => {\n  handleAnalytics(HighLevelFilters.rankByGitActivity, [args]);\n  const { gt, lt, weeks } = args;\n  if ((!gt && !lt) || !weeks) {\n    return [];\n  }\n  const weeksArr: string[] = new Array(weeks + 1)\n    .fill(0)\n    .map((_, i) => `week_${i}`);\n\n  const totalsPerFile: FileMetric = calculateActivityPerFile(\n    repo.git_activity,\n    weeksArr\n  );\n  const fileSumPerAuthor: FileMetric = calculateFileSumPerAuthorActivity(\n    repo.git_activity,\n    weeksArr,\n    totalsPerFile\n  );\n  const activityByAuthor: Metric = sumAuthorMetrics(\n    Object.keys(repo.contributors),\n    fileSumPerAuthor\n  );\n  const convertContributors = convertAndSumContributors(\n    activityByAuthor,\n    repo.git_to_provider_user\n  );\n  const comparedResult: Metric = validateAndCompare(\n    convertContributors,\n    gt,\n    lt\n  );\n\n  return Object.keys(comparedResult).length\n    ? [...Array.from(new Set(Object.keys(comparedResult)))]\n    : [];\n};\n\nconst parseExplainRankByGitBlame = (repo: any, args: rankByLinesArgs) => {\n  handleAnalytics(HighLevelFilters.explainRankByGitBlame, [args]);\n  if (!isGtLtArgsValid(args)) {\n    return {};\n  }\n  const parseResult = parseRankByGitBlame(repo, args);\n  const authorFilteredParseResult = _.filter(\n    parseResult,\n    (contributor) => contributor !== repo.pr_author\n  );\n  const authorFilteredParseResultString = authorFilteredParseResult.join(', ');\n  const isNoUserButYou =\n    !authorFilteredParseResult.length && parseResult.length > 0;\n\n  const formattedBlameContext = convertBlameContextToExplain(repo);\n  return `base64: ${Buffer.from(\n    explainBlameTemplate(\n      args,\n      authorFilteredParseResultString,\n      formattedBlameContext,\n      repo.provider,\n      isNoUserButYou\n    )\n  ).toString('base64')}`;\n};\n\nexport enum HighLevelFilters {\n  allDocs = 'allDocs',\n  allImages = 'allImages',\n  allTests = 'allTests',\n  estimatedReviewTime = 'estimatedReviewTime',\n  extensions = 'extensions',\n  isFormattingChange = 'isFormattingChange',\n  matchDiffLines = 'matchDiffLines',\n  isFirstCommit = 'isFirstCommit',\n  rankByGitBlame = 'rankByGitBlame',\n  rankByGitActivity = 'rankByGitActivity',\n  explainRankByGitBlame = 'explainRankByGitBlame',\n  expertReviewer = 'expertReviewer',\n  explainExpertReviewer = 'explainExpertReviewer',\n  codeExperts = 'codeExperts',\n  explainCodeExperts = 'explainCodeExperts',\n  sonarParser = 'sonarParser',\n  mapToEnum = 'mapToEnum',\n  extractSonarFindings = 'extractSonarFindings',\n  extractJitFindings = 'extractJitFindings',\n}\n\nconst FILTERED_OUT_LIST = {\n  [HighLevelFilters.allDocs]: ['requirements.txt'],\n};\n\nexport const FILTERS_EXTENSION_LIST = {\n  [HighLevelFilters.allDocs]: ['md', 'mkdown', 'txt', 'rst', '.adoc'],\n  [HighLevelFilters.allImages]: ['svg', 'png', 'gif'],\n  [HighLevelFilters.allTests]: ['test', 'spec'],\n};\n\nexport const HIGH_LEVEL_FILTERS_HANDLER: any = {\n  [HighLevelFilters.allDocs]: (files: string[]) => {\n    handleAnalytics(HighLevelFilters.allDocs, []);\n    return (\n      Boolean(files.length) &&\n      files.every((file) =>\n        FILTERED_OUT_LIST[HighLevelFilters.allDocs].every(\n          (excludedFile) =>\n            !(file.includes('/' + excludedFile) || file === excludedFile)\n        )\n      ) &&\n      parseFilterAllExtensions(\n        files,\n        FILTERS_EXTENSION_LIST[HighLevelFilters.allDocs]\n      )\n    );\n  },\n  [HighLevelFilters.allImages]: (files: string[]) => {\n    handleAnalytics(HighLevelFilters.allImages, []);\n    return parseFilterAllExtensions(\n      files,\n      FILTERS_EXTENSION_LIST[HighLevelFilters.allImages]\n    );\n  },\n  [HighLevelFilters.allTests]: (files: string[]) => {\n    handleAnalytics(HighLevelFilters.allTests, []);\n    return parseFilterAllTests(\n      files,\n      FILTERS_EXTENSION_LIST[HighLevelFilters.allTests]\n    );\n  },\n  [HighLevelFilters.estimatedReviewTime]: estimatedReviewTime,\n  [HighLevelFilters.extensions]: getUniqueExtensions,\n  [HighLevelFilters.isFormattingChange]: parseIsFormattingChange,\n  [HighLevelFilters.matchDiffLines]: parseMatchDiffLines,\n  [HighLevelFilters.isFirstCommit]: parseIsFirstCommit,\n  [HighLevelFilters.rankByGitBlame]: parseRankByGitBlame,\n  [HighLevelFilters.rankByGitActivity]: parseRankByGitActivity,\n  [HighLevelFilters.explainRankByGitBlame]: parseExplainRankByGitBlame,\n  [HighLevelFilters.expertReviewer]: parseExpertReviewer,\n  [HighLevelFilters.explainExpertReviewer]: parseExplainExpertReviewer,\n  [HighLevelFilters.codeExperts]: parseCodeExperts,\n  [HighLevelFilters.explainCodeExperts]: parseExplainCodeExperts,\n  [HighLevelFilters.sonarParser]: parseSonarParser,\n  [HighLevelFilters.mapToEnum]: parserMapToEnum,\n  [HighLevelFilters.extractSonarFindings]: parseExtractSonarFindings,\n  ...jitFilter,\n};\n\nexport const ASYNC: any = {\n  [HighLevelFilters.estimatedReviewTime]: true,\n  [HighLevelFilters.expertReviewer]: true,\n  [HighLevelFilters.explainExpertReviewer]: true,\n  [HighLevelFilters.codeExperts]: true,\n  [HighLevelFilters.explainCodeExperts]: true,\n};\n","import { ProviderFormating } from '../rules-parser/filters/filter-types';\n\nexport const ADDITIONAL_FORMATTING: ProviderFormating = {\n  github: '',\n  gitlab: '  \\n',\n  default: '',\n};\n","import { ADDITIONAL_FORMATTING } from '../../utils/providers';\nimport { DOCS_LINK_COMMENT } from './common';\nimport {\n  FileMetric,\n  Metric,\n  Activity,\n  ExplainObject,\n  rankByLinesArgs,\n} from './filter-types';\n\nconst calculateSumByAuthor = (\n  authorMetric: FileMetric,\n  author: string\n): Metric =>\n  Object.values(authorMetric).reduce((aa: Metric, item: Metric) => {\n    const precent = item[author];\n    const totalPercent = (precent ?? 0) + (aa[author] ?? 0);\n    return { ...aa, ...(totalPercent && { [author]: totalPercent }) };\n  }, {});\n\nexport const convertAndSumContributors = (\n  contributors: Metric,\n  gitToProviderUser: any\n): Metric => {\n  return Object.keys(contributors).reduce((acc: Metric, gitAuthor: string) => {\n    let score = contributors[gitAuthor];\n    if (acc[gitToProviderUser[gitAuthor]]) {\n      score = contributors[gitAuthor] + acc[gitToProviderUser[gitAuthor]];\n    }\n    const author =\n      gitToProviderUser[gitAuthor]?.includes('@') ||\n      !gitToProviderUser[gitAuthor]\n        ? gitAuthor + '\\\\*'\n        : gitToProviderUser[gitAuthor];\n    return { ...acc, [author]: score };\n  }, {});\n};\n\nexport const convertContributorsAndBlame = (repo: any) => {\n  const blame = Object.keys(repo.blame).reduce(\n    (acc: FileMetric, file: string) => {\n      return {\n        ...acc,\n        [file]: convertAndSumContributors(\n          repo.blame[file],\n          repo.git_to_provider_user\n        ),\n      };\n    },\n    {}\n  );\n  return { blame };\n};\n\nexport const sumAuthorMetrics = (\n  contributors: string[],\n  authorMetric: FileMetric\n): Metric => {\n  const numOfFiles = Object.keys(authorMetric).length;\n  return contributors.reduce((acc: Metric, author: string) => {\n    const sumByAuthor: Metric = calculateSumByAuthor(authorMetric, author);\n    return {\n      ...acc,\n      ...(sumByAuthor[author] && {\n        [author]: sumByAuthor[author] / numOfFiles,\n      }),\n    };\n  }, {});\n};\n\nexport const convertToProviderUser = (repo: any, gitObject: Metric) =>\n  Object.keys(gitObject).reduce((acc: Metric, gitAuthor: string) => {\n    if (repo.git_to_provider_user[gitAuthor]) {\n      return {\n        ...acc,\n        [repo.git_to_provider_user[gitAuthor]]:\n          gitObject[gitAuthor] || gitAuthor,\n      };\n    }\n    return acc;\n  }, {});\n\nexport const calculateActivityPerFile = (\n  activity: Activity,\n  weeksArr: string[]\n): FileMetric =>\n  Object.keys(activity).reduce((acc, file) => {\n    const totalPerFile = Object.values(activity[file]).reduce(\n      (ac: Metric, linesPerWeek: Metric) => {\n        weeksArr.forEach((week) => {\n          const item = linesPerWeek[week];\n          if (item) {\n            ac[week] = (ac[week] ?? 0) + item;\n          }\n        });\n        return { ...ac };\n      },\n      {}\n    );\n    return { ...acc, [file]: totalPerFile };\n  }, {});\n\nexport const calculateFileSumPerAuthorActivity = (\n  activity: Activity,\n  weeksArr: string[],\n  totalsPerFile: FileMetric\n): FileMetric =>\n  Object.keys(activity).reduce((acc: FileMetric, file: string) => {\n    const calcPercent: Metric = Object.keys(activity[file]).reduce(\n      (acAuthor: Metric, author: string) => {\n        let arrSum: number[] = [];\n        weeksArr.forEach((week: string) => {\n          if (totalsPerFile[file][week] && activity[file][author][week]) {\n            arrSum.push(\n              (activity[file][author][week] / totalsPerFile[file][week]) * 100\n            );\n          }\n        });\n        const total: number =\n          arrSum.reduce((a: number, b: number) => a + b, 0) / arrSum.length;\n        return {\n          ...acAuthor,\n          ...(arrSum.length && { [author]: parseInt(total?.toFixed(0)) }),\n        };\n      },\n      {}\n    );\n    return { ...acc, [file]: calcPercent };\n  }, {});\n\nexport const sortObject = (data: any[], object: any) =>\n  data.sort((a: any, b: any) => (object[b] ?? 0) - (object[a] ?? 0));\n\nconst compareThan = (data: Metric, gt: number, lt: number) => {\n  const authors = Object.keys(data).filter((author: string) =>\n    gt !== undefined ? data[author] > gt : data[author] < lt\n  );\n  const sortedAuthors = sortObject(authors, data);\n\n  return sortedAuthors.reduce((acc: any, author: string) => {\n    if (author.includes('*')) {\n      return acc;\n    }\n    return { ...acc, ...{ [author]: data[author] } };\n  }, {});\n};\n\nexport const validateAndCompare = (\n  authorMetrics: Metric,\n  gt: number,\n  lt: number\n): Metric | {} =>\n  Object.keys(authorMetrics).length ? compareThan(authorMetrics, gt, lt) : {};\n\nexport const convertBlameContextToExplain = (repo: any) => {\n  const { blame } = convertContributorsAndBlame(repo);\n  return Object.keys(blame).reduce((acc: any, file: string) => {\n    if (file === '/dev/null') {\n      return acc;\n    }\n    const sortedAuthors = sortObject(Object.keys(blame[file]), blame[file]);\n    const formattedValues = sortedAuthors.reduce(\n      (accAuthor: ExplainObject, author) => {\n        if (!blame[file][author]) {\n          return accAuthor;\n        }\n        const formatGitAuthor = author.replace(/\\\"\\“/g, '').replace('“', '');\n        let formattedValue = `${\n          Math.floor(blame[file][author])\n            ? Math.floor(blame[file][author])\n            : '<1'\n        }%`;\n        if (\n          accAuthor[formatGitAuthor] &&\n          parseInt(accAuthor[formatGitAuthor]) > parseInt(formattedValue)\n        ) {\n          formattedValue = accAuthor[formatGitAuthor];\n        }\n        return { ...accAuthor, [formatGitAuthor]: formattedValue };\n      },\n      {}\n    );\n    return { ...acc, [file]: formattedValues };\n  }, {});\n};\n\nconst suggestedReviewersComment = (\n  authorFilteredParseResult: string,\n  argsTemplate: string,\n  numOfPRFiles: number,\n  isNoUserButYou: boolean\n) => {\n  const formattedComment = authorFilteredParseResult\n    ? ` 👋  **Suggested reviewers: ${authorFilteredParseResult}**\\n \\nThey contributed ${argsTemplate} of the lines on pre-existing files`\n    : ` 👋  **Suggested reviewers: no user ${\n        isNoUserButYou ? 'but you' : ''\n      } matched**\\n \\nNo ${\n        numOfPRFiles ? 'other ' : ''\n      }user contributed ${argsTemplate} of the lines on pre-existing files`;\n  return formattedComment;\n};\n\nexport const explainBlameTemplate = (\n  args: rankByLinesArgs,\n  authorFilteredParseResult: string,\n  formattedBlameContext: any,\n  provider: string,\n  isNoUserButYou: boolean\n) => {\n  const { gt, lt } = args;\n  const argsTemplate = gt ? `more than ${gt}%` : `less than ${lt}%`;\n\n  const numOfPRFiles = Object.keys(formattedBlameContext).length;\n  let parserResultTemplate = suggestedReviewersComment(\n    authorFilteredParseResult,\n    argsTemplate,\n    numOfPRFiles,\n    isNoUserButYou\n  );\n  parserResultTemplate += numOfPRFiles ? ':\\n' : '. \\n ';\n  parserResultTemplate += Object.keys(formattedBlameContext).length\n    ? '<details>\\n <summary>See details</summary>\\n'\n    : '';\n  parserResultTemplate += '\\n';\n  Object.keys(formattedBlameContext).forEach((file) => {\n    if (Object.keys(formattedBlameContext[file]).length === 0) {\n      return;\n    }\n    parserResultTemplate += `\\n\\`${file}\\` \\n${\n      ADDITIONAL_FORMATTING[provider] || ADDITIONAL_FORMATTING.default\n    }`; //Supporting new lines format for gitlab\n    Object.keys(formattedBlameContext[file]).forEach((author) => {\n      parserResultTemplate += `${author}: ${\n        formattedBlameContext[file][author]\n      } \\n${ADDITIONAL_FORMATTING[provider] || ADDITIONAL_FORMATTING.default}`; //Supporting new lines format for gitlab\n    });\n  });\n  parserResultTemplate += '\\n</details>\\n';\n  const isGitUser = Object.values(formattedBlameContext)\n    .map((item: any) => Object.keys(item).some((x) => x.includes('*')))\n    .some((result) => result);\n\n  parserResultTemplate += isGitUser\n    ? ` \\nGit users that could not be automatically mapped are marked with \\`*\\`.\\n${\n        ADDITIONAL_FORMATTING[provider] || ADDITIONAL_FORMATTING.default\n      }To map these users, refer to the instructions [here](https://docs.gitstream.cm/cm-file#config).\\n \\n`\n    : ''; //Supporting new lines format for gitlab\n  parserResultTemplate += DOCS_LINK_COMMENT;\n  return parserResultTemplate;\n};\n","import { rankByLinesArgs } from './filter-types';\n\nexport const isGtLtArgsValid = (args: rankByLinesArgs) => {\n  const { gt, lt } = args;\n  return !!gt || !!lt;\n};\n","import axios from 'axios';\nimport { API_ENDPOINTS } from '../../consts';\nimport { rankByLinesArgs } from './filter-types';\n\n//TODO: map request to object\nexport const getETR = async (request: any) => {\n  const {\n    data: { numericValue },\n  } = await axios.post(API_ENDPOINTS.REVIEW_TIME, request, {\n    headers: {\n      'Content-type': 'application/json',\n    },\n  });\n  return { numericValue };\n};\n\n//TODO: map request to object\nexport const getExpertReviewer = async (request: any) => {\n  if (request) {\n    const { data } = await axios.post(API_ENDPOINTS.EXPERT_REVIWER, request, {\n      headers: {\n        'Content-type': 'application/json',\n      },\n    });\n    return data || {};\n  }\n  return {};\n};\n\nexport const filterExpertResult = (\n  data: any,\n  gt: number,\n  lt: number,\n  filterBy: string\n) => {\n  const thresholdData = Object.keys(data).reduce((acc, user) => {\n    if (\n      gt !== undefined\n        ? data[user][filterBy] > gt / 100\n        : data[user][filterBy] < lt / 100\n    ) {\n      return { ...acc, [user]: data[user] };\n    }\n    return acc;\n  }, {});\n\n  return (\n    Object.keys(thresholdData).filter(\n      (contributor) => !contributor.includes('@') && !contributor.includes('<>')\n    ) || []\n  );\n};\n\nexport const parseExpertReviewerThreshold = (args: rankByLinesArgs): number => {\n  const { gt, lt } = args;\n  return gt ? gt : lt ? lt : 0.1;\n};\n\nexport const getAndFilterExpertReviewer = async (repo: any) => {\n  const data = await getExpertReviewer(\n    repo.data_service?.expert_reviwer_request\n  );\n  if (!Object.keys(data).length) {\n    return { data: {}, dataWithoutIssuer: {}, isIssuerFiltered: false };\n  }\n\n  let isIssuerFiltered = false;\n  const dataWithoutIssuer = Object.keys(data).reduce((acc, author) => {\n    if (author === repo.pr_author) {\n      isIssuerFiltered = true;\n      return acc;\n    }\n    return { ...acc, [author]: data[author] };\n  }, {});\n  return { data, dataWithoutIssuer, isIssuerFiltered };\n};\n","import { MONTH } from './common';\nimport moment from 'moment';\nimport { ActivityExplain, FileMetric } from './filter-types';\nimport { sortObject } from './high-level-filters-helper';\nimport { ADDITIONAL_FORMATTING } from '../../utils/providers';\n\nexport const explainExpertReviewerComment = (\n  expertReviewers: string[],\n  activeUsers: string[],\n  knowledgeUsers: string[],\n  threshold: number,\n  provider: string,\n  isNoUserButYou: boolean\n) => {\n  let comment = '🥷 **Code experts:';\n  comment += expertReviewers.length\n    ? ` ${expertReviewers.join(', ')}** \\n \\n`\n    : ` no user ${\n        isNoUserButYou ? 'but you' : ''\n      } matched threshold ${threshold}** \\n \\n`;\n\n  if (activeUsers.length) {\n    comment += `${activeUsers.join(', ')} ${\n      activeUsers.length === 1 ? 'has' : 'have'\n    } most 👩‍💻 **activity** in the files. \\n${\n      ADDITIONAL_FORMATTING[provider] || ADDITIONAL_FORMATTING.default\n    }`;\n  }\n  if (knowledgeUsers.length) {\n    comment += `${knowledgeUsers.join(', ')} ${\n      knowledgeUsers.length === 1 ? 'has' : 'have'\n    } most 🧠 **knowledge** in the files. \\n`;\n  }\n  return comment;\n};\n\nconst explainActivityByMonth = (\n  activity: any,\n  file: string,\n  activityUsers: string[]\n) => {\n  let monthsComment = '';\n  const months: string[] = [];\n  for (let index = 0; index < 6; index++) {\n    months.push(MONTH[moment().subtract(index, 'months').format('MM')]);\n  }\n  months.forEach((month) => {\n    const user1Value = activity[file][activityUsers[0]][month];\n    const user2Value = activity[file][activityUsers[1]]?.[month];\n    monthsComment += `| ${month} | ${\n      user1Value\n        ? user1Value.additions +\n          ' additions & ' +\n          user1Value.deletions +\n          ' deletions'\n        : ' '\n    } |`;\n    monthsComment += `${\n      user2Value\n        ? user2Value.additions +\n          ' additions & ' +\n          user2Value.deletions +\n          ' deletions |'\n        : ' '\n    } \\n`;\n  });\n  return monthsComment;\n};\n\nconst explainActivityTable = (\n  file: string,\n  activity: any,\n  activityUsers: string[]\n) => {\n  if (!Object.keys(activity).length) {\n    return '\\n\\nNo activity in the last 6 months\\n\\n'; // can be extract to const NO_ACTIVITY_MESSAGE\n  }\n  if (activityUsers.length) {\n    let table = `\\n\\nActivity based on git-commit: \\n\\n |  | ${\n      activityUsers[0] ? activityUsers[0] : ' '\n    } | ${\n      activityUsers[1]\n        ? activityUsers[1] + '| \\n | --- | --- | --- | \\n '\n        : ' \\n | --- | --- | \\n'\n    }`;\n    table += explainActivityByMonth(activity, file, activityUsers);\n    return table;\n  }\n  return '';\n};\n\nconst explainKnowledgeSection = (\n  file: string,\n  knowledge: any,\n  knowledgeUsers: string[],\n  provider: string\n) => {\n  let knowledgeText = '';\n  const sortedAuthors = sortObject(knowledgeUsers, knowledge[file]);\n  sortedAuthors.forEach((author) => {\n    knowledgeText += knowledge[file][author]\n      ? `${author}: ${knowledge[file][author]}% \\n${\n          ADDITIONAL_FORMATTING[provider] || ADDITIONAL_FORMATTING.default\n        }`\n      : '';\n  });\n  return knowledgeText;\n};\n\nexport const explainActivityAndBlameComment = (\n  files: string[],\n  activity: any,\n  knowledge: any,\n  activityUsers: string[],\n  knowledgeUsers: string[],\n  provider: string\n) => {\n  try {\n    let comment = '<details>\\n <summary>See details</summary>\\n\\n';\n    files.forEach((file) => {\n      comment += `\\n\\`${file}\\` \\n ${explainActivityTable(\n        file,\n        activity,\n        activityUsers\n      )} \\n\\nKnowledge based on git-blame: \\n ${\n        ADDITIONAL_FORMATTING[provider] || ADDITIONAL_FORMATTING.default\n      }${explainKnowledgeSection(file, knowledge, knowledgeUsers, provider)}`;\n    });\n    comment += `\\n</details>\\n`;\n    return comment;\n  } catch (error) {\n    console.log('Error in creating explain code experts comment', error);\n    return '';\n  }\n};\n\nconst parseActivityByUserDataForExplain = (\n  activity: any,\n  file: string,\n  user: string\n) => {\n  return Object.keys(activity[file]).reduce((ac, date) => {\n    if (activity[file][date][user]) {\n      const formatedDate: string = MONTH[date.split('-')?.[1]];\n      return {\n        ...ac,\n        [formatedDate]: activity[file][date][user],\n      };\n    }\n    return ac;\n  }, {});\n};\nconst parseActivityByUserForExplain = (\n  activity: any,\n  file: string,\n  activeUsers: string[]\n) => {\n  return activeUsers.reduce((au, user) => {\n    const activityData = parseActivityByUserDataForExplain(\n      activity,\n      file,\n      user\n    );\n    return { ...au, [user]: activityData };\n  }, {});\n};\n\nexport const getExplainActivity = (\n  activity: ActivityExplain,\n  activeUsers: string[]\n) => {\n  return Object.keys(activity || {}).reduce((acc, file) => {\n    const userActivity = parseActivityByUserForExplain(\n      activity,\n      file,\n      activeUsers\n    );\n    return { ...acc, [file]: userActivity };\n  }, {});\n};\n\nexport const getExplainKnowledge = (\n  blame: FileMetric,\n  knowledgeUsers: string[]\n) => {\n  return Object.keys(blame || {}).reduce((acc, file) => {\n    const sortedAuthors = sortObject(knowledgeUsers, blame[file]);\n    const userKnowledge = sortedAuthors.reduce((au, user) => {\n      if (blame[file][user]) {\n        return {\n          ...au,\n          [user]: Math.round(blame[file][user] * 100),\n        };\n      }\n      return au;\n    }, {});\n    return { ...acc, [file]: userKnowledge };\n  }, {});\n};\n","import { rankByLinesArgs } from './filter-types';\nimport { FileMetadata } from '../context/types';\nimport {\n  filterExpertResult,\n  getAndFilterExpertReviewer,\n  getETR,\n  parseExpertReviewerThreshold,\n} from './async-filter-helper';\nimport { DOCS_LINK_COMMENT, handleAnalytics } from './common';\nimport {\n  explainActivityAndBlameComment,\n  explainExpertReviewerComment,\n  getExplainActivity,\n  getExplainKnowledge,\n} from './explain-expert-filter-helper';\nimport { HighLevelFilters } from './high-level-filters';\n\nconst DELETED_PATH = '/dev/null';\n\nexport const estimatedReviewTime = async (branch: any, callback: any) => {\n  handleAnalytics(HighLevelFilters.estimatedReviewTime, []);\n  const numOfFiles = branch.diff?.files_metadata.length;\n  const { additionalLines, deletedLines } = branch.diff?.files_metadata.reduce(\n    (acc: any, file: FileMetadata) => {\n      acc.additionalLines += file.additions;\n      acc.deletedLines += file.deletions;\n      return acc;\n    },\n    { additionalLines: 0, deletedLines: 0 }\n  );\n  const prFiles = branch.diff?.files_metadata.map(\n    (fileMetadata: FileMetadata) => ({\n      file_path:\n        fileMetadata.new_file !== DELETED_PATH\n          ? fileMetadata.new_file\n          : fileMetadata.original_file,\n      additions: fileMetadata.additions,\n      deletions: fileMetadata.deletions,\n    })\n  );\n  const reqBody = {\n    prMetadata: {\n      commits: branch.num_of_commits,\n      files: numOfFiles,\n      lines: additionalLines + deletedLines,\n    },\n    prFiles: prFiles,\n    prAdditionalLines: additionalLines,\n    prDeletedLines: deletedLines,\n    baseBranch: branch.base,\n    request_source: 'gitstream',\n  };\n\n  const { numericValue } = await getETR(reqBody);\n  callback(null, numericValue);\n};\n\nexport const parseExpertReviewer = async (\n  repo: any,\n  { gt = 0, lt = 0 }: rankByLinesArgs,\n  callback: any\n) => {\n  try {\n    handleAnalytics(HighLevelFilters.expertReviewer, [{ gt, lt }]);\n    const { dataWithoutIssuer } = await getAndFilterExpertReviewer(repo);\n    if (!Object.keys(dataWithoutIssuer).length) {\n      callback(null, []);\n    }\n\n    const expertReviewers = filterExpertResult(\n      dataWithoutIssuer,\n      gt,\n      lt,\n      'reviewer_score'\n    ).slice(0, 2);\n    callback(null, expertReviewers);\n  } catch (error) {\n    console.log('error:', error);\n    callback(null, []);\n  }\n};\n\nexport const parseExplainCodeExpertHandler = async (\n  repo: any,\n  args: rankByLinesArgs,\n  callback: any\n) => {\n  try {\n    const { gt, lt } = args;\n    const { data, dataWithoutIssuer, isIssuerFiltered } =\n      await getAndFilterExpertReviewer(repo);\n    if (!Object.keys(data).length || !Object.keys(dataWithoutIssuer).length) {\n      callback(null, []);\n    }\n    const expertReviewers = filterExpertResult(\n      dataWithoutIssuer,\n      gt,\n      lt,\n      'reviewer_score'\n    ).slice(0, 2);\n    const activeUsers = filterExpertResult(\n      data,\n      gt,\n      lt,\n      'avg_activity_score'\n    ).slice(0, 2);\n    const knowledgeUsers = filterExpertResult(\n      data,\n      gt,\n      lt,\n      'avg_blame_perc'\n    ).slice(0, 2);\n\n    const explainActivity = getExplainActivity(\n      data.explain?.activity,\n      activeUsers\n    );\n\n    const explainKnowledge = getExplainKnowledge(\n      data.explain?.blame,\n      knowledgeUsers\n    );\n\n    const explainComment = `${explainExpertReviewerComment(\n      expertReviewers,\n      activeUsers,\n      knowledgeUsers,\n      parseExpertReviewerThreshold(args),\n      repo.provider,\n      isIssuerFiltered && !Object.keys(expertReviewers).length\n    )} ${explainActivityAndBlameComment(\n      Array.from(\n        new Set([\n          ...Object.keys(explainActivity),\n          ...Object.keys(explainKnowledge),\n        ])\n      ),\n      explainActivity,\n      explainKnowledge,\n      activeUsers,\n      knowledgeUsers,\n      repo.provider\n    )} \\n\\n ${DOCS_LINK_COMMENT} \\n`;\n\n    const base64Comment = `base64: ${Buffer.from(explainComment).toString(\n      'base64'\n    )}`;\n\n    callback(null, base64Comment);\n  } catch (error) {\n    console.log('error:', error);\n    callback(``);\n  }\n};\n\nexport const parseCodeExperts = async (\n  repo: any,\n  { gt = 0, lt = 0 }: rankByLinesArgs,\n  callback: any\n) => {\n  handleAnalytics(HighLevelFilters.codeExperts, [{ gt, lt }]);\n  await parseExpertReviewer(repo, { gt, lt }, callback);\n};\n\nexport const parseExplainExpertReviewer = async (\n  repo: any,\n  args: rankByLinesArgs,\n  callback: any\n) => {\n  handleAnalytics(HighLevelFilters.explainExpertReviewer, [args]);\n  await parseExplainCodeExpertHandler(repo, args, callback);\n};\n\nexport const parseExplainCodeExperts = async (\n  repo: any,\n  args: rankByLinesArgs,\n  callback: any\n) => {\n  handleAnalytics(HighLevelFilters.explainCodeExperts, [args]);\n  await parseExplainCodeExpertHandler(repo, args, callback);\n};\n","import _ from 'lodash';\nimport prettier from 'prettier';\nimport { spawnSync } from 'child_process';\n\nconst PYTHON_COMMAND = 'python';\n\nexport const minify = (text: string) =>\n  text.replace(/\\s+/g, ' ').replaceAll(\"'\", '\"').trim();\n\nexport const removeEmptyLines = (text: string) =>\n  text.replace(/^\\s*[\\r\\n]/gm, '');\n\nexport const jsFormatter = (content: string, file: string) => {\n  return minify(\n    prettier.format(content, {\n      semi: false,\n      singleQuote: true,\n      filepath: file,\n    })\n  );\n};\nexport const pyFormatter = (content: string) => {\n  // Format the code with black\n  const blackResult = spawnSync(PYTHON_COMMAND, [\n    '-c',\n    `import black; print(black.format_str(${JSON.stringify(\n      content\n    )}, mode=black.FileMode()))`,\n  ]);\n  const formattedCode = blackResult.stdout.toString();\n  return removeEmptyLines(formattedCode);\n};\n\nconst SUPPORTED_FORMATTERS = {\n  js: jsFormatter,\n  ts: jsFormatter,\n  html: jsFormatter,\n  py: pyFormatter,\n  default: minify,\n};\nexport const format = (content: string, file: string) => {\n  const fileExtension = file.split('.').pop() ?? '';\n  const formatter = _.get(\n    SUPPORTED_FORMATTERS,\n    fileExtension,\n    SUPPORTED_FORMATTERS.default\n  );\n  return formatter(content, file);\n};\n","export const SONAR_REGEX = {\n  BUGS: /\\[\\d+ Bugs?\\]/g,\n  VULNERABILITIES: /\\[\\d+ Vulnerabilit(?:ies|y)\\]/g,\n  SECURITY_HOTSPOTS: /\\[\\d+ Security Hotspots?\\]/g,\n  CODE_SMELL: /\\[\\d+ Code Smells?\\]/g,\n  DUPLICATIONS: /\\[(\\d+(\\.\\d+)?|\\.\\d+)%\\]/g,\n  COVERAGE: /\\[(\\d+(\\.\\d+)?|\\.\\d+)%\\]/g,\n  RATING: /!\\[([A-Z])\\]/g,\n};\n\nexport const getSonarPropertyRating = (str: string): string => {\n  const rawRating = str.match(SONAR_REGEX.RATING)?.[0];\n  const rating = rawRating?.substring(\n    rawRating.lastIndexOf('[') + 1,\n    rawRating.indexOf(']')\n  );\n  return rating ? rating : '';\n};\n\nexport const getSonarPropertyCount = (\n  row: string,\n  regex: any,\n  isFloat: boolean = false\n): number | null => {\n  const count =\n    (isFloat\n      ? parseFloat(row.match(regex)?.[0].split(/\\s+/)[0].replace('[', '') || '')\n      : parseInt(\n          row.match(regex)?.[0].split(/\\s+/)[0].replace('[', '') || ''\n        )) ?? null;\n  return isNaN(count) ? null : count;\n};\n","import { Sonar } from './types';\nimport {\n  SONAR_REGEX,\n  getSonarPropertyCount,\n  getSonarPropertyRating,\n} from './helpers';\nimport { handleAnalytics } from '../../common';\nimport { HighLevelFilters } from '../../high-level-filters';\n\nexport const parseSonarParser = (pr: any): string => {\n  handleAnalytics(HighLevelFilters.sonarParser, []);\n  let sonarObject: Sonar = {\n    bugs: { count: null, rating: '' },\n    code_smells: { count: null, rating: '' },\n    vulnerabilities: { count: null, rating: '' },\n    security_hotspots: { count: null, rating: '' },\n    duplications: null,\n    coverage: null,\n  };\n  const sonarComment = pr.comments.filter(\n    (comment: any) => comment.commenter === 'sonarcloud'\n  );\n  if (sonarComment.length) {\n    const sonarCommentArray = sonarComment[0].content.split('\\n');\n    sonarObject.bugs = {\n      count: getSonarPropertyCount(sonarCommentArray[2], SONAR_REGEX.BUGS),\n      rating: getSonarPropertyRating(sonarCommentArray[2]),\n    };\n    sonarObject.code_smells = {\n      count: getSonarPropertyCount(\n        sonarCommentArray[5],\n        SONAR_REGEX.CODE_SMELL\n      ),\n      rating: getSonarPropertyRating(sonarCommentArray[5]),\n    };\n\n    sonarObject.vulnerabilities = {\n      count: getSonarPropertyCount(\n        sonarCommentArray[3],\n        SONAR_REGEX.VULNERABILITIES\n      ),\n      rating: getSonarPropertyRating(sonarCommentArray[3]),\n    };\n\n    sonarObject.security_hotspots = {\n      count: getSonarPropertyCount(\n        sonarCommentArray[4],\n        SONAR_REGEX.SECURITY_HOTSPOTS\n      ),\n      rating: getSonarPropertyRating(sonarCommentArray[4]),\n    };\n    sonarObject.duplications = getSonarPropertyCount(\n      sonarCommentArray[8],\n      SONAR_REGEX.DUPLICATIONS,\n      true\n    );\n    sonarObject.coverage = getSonarPropertyCount(\n      sonarCommentArray[7],\n      SONAR_REGEX.COVERAGE,\n      true\n    );\n  }\n\n  return JSON.stringify(sonarObject);\n};\n","import _ from 'lodash';\nimport { Jit, Severity } from './types';\nimport { IPRContext } from '../../../context/types';\n\nconst JIT_USER = 'jit-ci';\n\nexport const parseJitReview = (review: any): Jit => {\n  const parsedReview: Jit = initEmptyJitObject();\n  const conversations = review.conversations;\n  conversations.forEach((conversation: any) => {\n    const content = conversation.content;\n    const lines = content.split('\\n');\n    const security_control = lines[0]?.split('**')[2]?.trim();\n    const type = lines[2]?.split('**')[2]?.trim();\n    const description = lines[4]?.split('**')[2]?.trim();\n    const severity: Severity = lines[6]?.split('**')[2]?.trim();\n    const _summary =\n      lines[10]?.split('<summary>')[1]?.split('</summary>')[0] ?? '';\n    const summary = _summary.replace(/<b>/g, '').replace(/<\\/b>/g, '');\n    parsedReview.vulnerabilities.push({\n      security_control,\n      type,\n      description,\n      severity,\n      summary,\n    });\n    parsedReview.metrics[severity] = (parsedReview.metrics[severity] ?? 0) + 1;\n  });\n  return parsedReview;\n};\n\nexport const unifyReviews = (parsedReviews: Jit[], jitObject: Jit) => {\n  return parsedReviews.reduce(\n    (acc: any, review: any) => {\n      console.log({ acc, review });\n      return {\n        ...acc,\n        vulnerabilities: [...acc.vulnerabilities, ...review.vulnerabilities],\n        metrics: _.mergeWith(\n          acc.metrics,\n          review.metrics,\n          (a, b) => (a || 0) + (b || 0)\n        ),\n      };\n    },\n    { ...jitObject }\n  );\n};\n\nexport const extractJitCommentsFromPR = (pr: IPRContext) => {\n  return pr.reviews.filter(\n    ({ commenter }: { commenter: string }) => commenter === JIT_USER\n  );\n};\n\nexport const initEmptyJitObject = () => {\n  return {\n    vulnerabilities: [],\n    metrics: {\n      HIGH: null,\n      MEDIUM: null,\n      LOW: null,\n      INFO: null,\n    },\n  };\n};\n","import { parseJitComments } from './jit';\nexport default { extractJitFindings: parseJitComments };\n","import { IPRContext } from '../../../context/types';\nimport { handleAnalytics } from '../../common';\nimport { HighLevelFilters } from '../../high-level-filters';\nimport {\n  extractJitCommentsFromPR,\n  initEmptyJitObject,\n  parseJitReview,\n  unifyReviews,\n} from './helpers';\nimport _ from 'lodash';\n\nexport const parseJitComments = (pr: IPRContext): string => {\n  handleAnalytics(HighLevelFilters.extractJitFindings, []);\n  const jitComments = extractJitCommentsFromPR(pr);\n  const jitObject = initEmptyJitObject();\n  if (_.isEmpty(jitComments)) {\n    return JSON.stringify(jitObject);\n  }\n  const parsedReviews = jitComments.map(parseJitReview);\n  return JSON.stringify(unifyReviews(parsedReviews, jitObject));\n};\n","import prettier from 'prettier';\nimport { File } from '../context/types';\n\nconst parseFilterAllFilePath = (files: string[], searchArray: string[]) => {\n  return (\n    files.length &&\n    files\n      .map((filePath: string) =>\n        searchArray.some((term: string) => (filePath || '').includes(term))\n      )\n      .every((x: boolean) => x === true)\n  );\n};\n\nconst parseIsEveryExtension = (files: string[], extensions: string[]) => {\n  return parseFilterAllFilePath(\n    files\n      .map((filePath: string) => filePath.split('.').pop() || '')\n      .filter((value, index, array) => array.indexOf(value) === index),\n    extensions\n  );\n};\n\nconst parseIsEveryExtensionRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  const extensions = files\n    .map((filePath: string) => filePath.split('.').pop() || '')\n    .filter((value, index, array) => array.indexOf(value) === index);\n\n  return (\n    extensions.length > 0 &&\n    extensions\n      .map((filePath: string) => re.test(filePath))\n      .every((match: any) => match)\n  );\n};\n\nconst parseExtractExtensions = (files: string[]) =>\n  files.length &&\n  files\n    // extensions\n    .map((x: string) => x.split('.').pop())\n    // unique\n    .filter((value, index, array) => array.indexOf(value) === index);\n\nconst parseIsStringIncludes = (file: string, terms: string[]) =>\n  terms.some((term: any) => file.includes(term));\n\nconst parseIsStringIncludesRegex = (file: string, filter: string) => {\n  const re = new RegExp(filter);\n  return re.test(file);\n};\n\nconst parseRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  return files.length\n    ? files.map((file: any) => re.test(file)).every((match: any) => match)\n    : false;\n};\n\nconst parseIsEveryInListRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  return files.length\n    ? files.map((file: any) => re.test(file)).every((match: any) => match)\n    : false;\n};\n\nconst parseIsEveryInList = (files: string[], filters: string[]) => {\n  return files.length\n    ? files\n        .filter((file: any) => filters.includes(file))\n        .every((match: any) => match)\n    : false;\n};\n\nconst parseIsSomeInList = (files: string[], searchTerms: string[]) => {\n  return files.length\n    ? files\n        .filter((file: any) => searchTerms.includes(file))\n        .some((match: any) => match)\n    : false;\n};\n\nconst parseIncludesRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  return files.length\n    ? files.map((file: any) => re.test(file)).some((match: any) => match)\n    : false;\n};\n\nconst parseIsSomeInListRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  return files.length\n    ? files.map((file: any) => re.test(file)).some((match: any) => match)\n    : false;\n};\n\nconst parseFilterRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  return files.length ? files.filter((file: any) => re.test(file)) : false;\n};\n\nconst parseFilterListRegex = (files: string[], filter: string) => {\n  const re = new RegExp(filter);\n  return files.length ? files.filter((file: any) => re.test(file)) : false;\n};\n\nconst parseFilterList = (files: string[], filters: string[]) => {\n  return files.length\n    ? files.filter((file: any) => filters.includes(file))\n    : false;\n};\n\nconst minify = (text: string) =>\n  text.replace(/\\s+/g, ' ').replaceAll(\"'\", '\"').trim();\n\nconst allFormattingChange = (files: File[]) => {\n  try {\n    const allFormatting = files.every(\n      ({ new_content, original_content, original_file, new_file }) => {\n        const formattedNew = prettier.format(new_content, {\n          semi: false,\n          singleQuote: true,\n          filepath: new_file,\n        });\n        const formattedOld = prettier.format(original_content, {\n          semi: false,\n          singleQuote: true,\n          filepath: original_file,\n        });\n        return minify(formattedNew) === minify(formattedOld);\n      }\n    );\n    return allFormatting;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst parseFilterFileDiffRegex = (files: File[], filterRegex: string) => {\n  const re = new RegExp(filterRegex, 'm');\n  return files.length ? files.filter(({ diff }) => re.test(diff)) : false;\n};\n\nconst parseIsEveryLineInFileDiffRegex = (\n  files: File[],\n  filterRegex: string\n) => {\n  const re = new RegExp(filterRegex, 'm');\n  return files.length\n    ? files.map(({ diff }) => re.test(diff)).every((match: any) => match)\n    : false;\n};\n\nconst parseIsSomeLineInFileDiffRegex = (files: File[], filterRegex: string) => {\n  const re = new RegExp(filterRegex, 'm');\n  return files.length\n    ? files.map(({ diff }) => re.test(diff)).some((match: any) => match)\n    : false;\n};\n\nconst parseFilterAllExtensions = (files: string[], extensions: string[]) => {\n  return files.length\n    ? parseFilterAllFilePath(\n        files.map((filePath: string) => filePath.split('.').pop() || ''),\n        extensions\n      )\n    : false;\n};\n\nexport enum Filters {\n  allExtensions = 'allExtensions',\n  includes = 'includes',\n  allPassRegex = 'allPassRegex',\n  allPathIncludes = 'allPathIncludes',\n  filterRegex = 'filterRegex',\n  includesRegex = 'includesRegex',\n  true = 'true',\n  allFormattingChange = 'allFormattingChange',\n  filterList = 'filterList',\n  filterListRegex = 'filterListRegex',\n  isEveryInListRegex = 'isEveryInListRegex',\n  isSomeInList = 'isSomeInList',\n  isSomeInListRegex = 'isSomeInListRegex',\n  isStringIncludes = 'isStringIncludes',\n  isStringIncludesRegex = 'isStringIncludesRegex',\n  isEveryInList = 'isEveryInList',\n  extractExtensions = 'extractExtensions',\n  isEveryExtension = 'isEveryExtension',\n  isEveryExtensionRegex = 'isEveryExtensionRegex',\n  filterFileDiffRegex = 'filterFileDiffRegex',\n  isEveryLineInFileDiffRegex = 'isEveryLineInFileDiffRegex',\n  isSomeLineInFileDiffRegex = 'isSomeLineInFileDiffRegex',\n}\n\nexport const FILTER_HANDLERS: any = {\n  [Filters.filterList]: parseFilterList,\n  [Filters.filterListRegex]: parseFilterListRegex,\n  [Filters.isEveryInListRegex]: parseIsEveryInListRegex,\n  [Filters.isSomeInList]: parseIsSomeInList,\n  [Filters.isSomeInListRegex]: parseIsSomeInListRegex,\n  [Filters.isStringIncludes]: parseIsStringIncludes,\n  [Filters.isStringIncludesRegex]: parseIsStringIncludesRegex,\n  [Filters.isEveryInList]: parseIsEveryInList,\n  [Filters.extractExtensions]: parseExtractExtensions,\n  [Filters.isEveryExtension]: parseIsEveryExtension,\n  [Filters.isEveryExtensionRegex]: parseIsEveryExtensionRegex,\n  [Filters.true]: () => true,\n  [Filters.filterFileDiffRegex]: parseFilterFileDiffRegex,\n  [Filters.isEveryLineInFileDiffRegex]: parseIsEveryLineInFileDiffRegex,\n  [Filters.isSomeLineInFileDiffRegex]: parseIsSomeLineInFileDiffRegex,\n  //TODO: remove soon - those filters are deprecated!\n  [Filters.allExtensions]: parseFilterAllExtensions,\n  [Filters.allPassRegex]: parseRegex,\n  [Filters.allPathIncludes]: parseFilterAllFilePath,\n  [Filters.filterRegex]: parseFilterRegex,\n  [Filters.includesRegex]: parseIncludesRegex,\n  [Filters.allFormattingChange]: allFormattingChange,\n};\n","export enum DefaultParserAttributes {\n  cbLeft = '_GITSTREAM_CB_LEFT_',\n  cbRight = '_GITSTREAM_CB_RIGHT_',\n  automations = 'automations',\n  errors = 'errors',\n  analytics = 'analytics',\n}\n\nexport type Run = { action: string; args?: any };\n","import * as yaml from 'js-yaml';\nimport * as nunjucks from 'nunjucks';\nimport { ERRORS, STATUS_CODES } from '../consts';\nimport { listify } from './args.definitions';\nimport { Context } from './context/types';\nimport { GENERAL_FILTERS_HANDLER } from './filters/general-filters';\nimport {\n  ASYNC,\n  HIGH_LEVEL_FILTERS_HANDLER,\n} from './filters/high-level-filters';\nimport { FILTER_HANDLERS } from './old-filters/filters';\nimport { DefaultParserAttributes, Run } from './types';\nimport { FiltersForAnalytics } from './filters/common';\n\nexport default class RuleParser {\n  private env: nunjucks.Environment;\n  private renderedRuleFile: any = {};\n  private context: Context | {} = {};\n  private ruleFileRawContent: string;\n  private lastParserResult: any = {};\n  private isDebug: boolean | string;\n\n  constructor(\n    ruleFileContent: string,\n    context: Context,\n    debugMode: boolean | string\n  ) {\n    this.isDebug = debugMode;\n    this.env = new nunjucks.Environment(\n      new nunjucks.FileSystemLoader(__dirname),\n      { autoescape: false }\n    );\n\n    const allFilters: any = {\n      ...GENERAL_FILTERS_HANDLER,\n      ...HIGH_LEVEL_FILTERS_HANDLER,\n      ...FILTER_HANDLERS,\n    };\n\n    Object.keys(allFilters).forEach((filter: any) => {\n      this.env.addFilter(filter, allFilters[filter], ASYNC[filter]);\n    });\n\n    this.context = context;\n    this.ruleFileRawContent = ruleFileContent;\n    if (this.isDebug) {\n      console.log({\n        context: JSON.stringify(this.context, null, 2),\n        ruleFile: ruleFileContent,\n      });\n    }\n  }\n\n  private async render(\n    context = { ...this.context, ...this.renderedRuleFile }\n  ) {\n    let reRenders = 3;\n    let currentContext = context;\n    while (reRenders) {\n      const dataAsString = this.ruleFileRawContent;\n      await new Promise((resolve, reject) =>\n        this.env.renderString(dataAsString, currentContext, (err, res) => {\n          if (err) {\n            if (this.isDebug) {\n              console.log(ERRORS.FAILED_RENDER_STRING, err);\n            }\n            reject(err);\n            return;\n          }\n          try {\n            this.renderedRuleFile = yaml.load(res!);\n          } catch (error) {\n            if (this.isDebug) {\n              console.log(ERRORS.FAILED_YAML_LOAD, error);\n            }\n            this.renderedRuleFile = {\n              ...this.renderedRuleFile,\n              errors: {\n                [STATUS_CODES.FAILED_YAML_LOAD]: ERRORS.FAILED_YAML_LOAD,\n              },\n            };\n          }\n          resolve(this);\n        })\n      );\n      reRenders -= 1;\n      currentContext = { ...this.context, ...this.renderedRuleFile };\n    }\n  }\n\n  private validateRun(runs: Run[]) {\n    if (!runs) {\n      return runs;\n    }\n    return runs.map((run) => {\n      if (!run.args) {\n        return run;\n      }\n      const newArgs = Object.keys(run.args).reduce((acc: any, arg: string) => {\n        const argValue = run.args[arg];\n        return {\n          ...acc,\n          [arg]:\n            argValue && listify.includes(arg) && typeof argValue === 'string'\n              ? argValue.split(',')\n              : run.args[arg],\n        };\n      }, {});\n      return { ...run, args: newArgs };\n    });\n  }\n\n  private combineMetadataWithRulesResult(resourceName: string) {\n    if (!this.renderedRuleFile[resourceName]) {\n      return {};\n    }\n    return Object.keys(this.renderedRuleFile[resourceName]).reduce(\n      (acc, resource) => {\n        const rules: any = this.renderedRuleFile[resourceName][resource].if.map(\n          (result: any) => {\n            return {\n              passed: result,\n            };\n          }\n        );\n        const passed = rules\n          .map(({ passed }: { passed: any }) => passed)\n          .every((pass: any) =>\n            typeof pass === 'object' ? !!Object.keys(pass || {}).length : !!pass\n          );\n        return {\n          ...acc,\n          [resource]: {\n            if: rules,\n            run: this.validateRun(\n              this.renderedRuleFile[resourceName][resource].run\n            ),\n            passed,\n          },\n        };\n      },\n      {}\n    );\n  }\n\n  private combineMetadataWithResult() {\n    this.lastParserResult = {\n      [DefaultParserAttributes.errors]: {\n        ...(this.renderedRuleFile[DefaultParserAttributes.errors] &&\n          this.renderedRuleFile[DefaultParserAttributes.errors]),\n      },\n      [DefaultParserAttributes.automations]: {\n        ...this.combineMetadataWithRulesResult(\n          DefaultParserAttributes.automations\n        ),\n      },\n      [DefaultParserAttributes.analytics]: {\n        ...(Object.keys(FiltersForAnalytics.filters).length &&\n          FiltersForAnalytics.filters),\n      },\n    };\n    return this.lastParserResult;\n  }\n\n  async parseStreams() {\n    await this.render();\n    return this.combineMetadataWithResult();\n  }\n}\n"],"names":["BASE_URL","API_ENDPOINTS","REVIEW_TIME","EXPERT_REVIWER","listify","internalIncludes","file","searchTerm","includes","internalRegex","multiline","startsWith","substring","slice","replace","RegExp","test","internalEvery","arr","value","bools","map","item","Boolean","length","every","element","formatInputToList","input","split","DOCS_LINK_COMMENT","MONTH","01","02","03","04","05","06","07","08","09","10","11","12","FiltersForAnalytics","GeneralFilters","handleAnalytics","filterName","filterArgs","filters","args","termRegexOrList","attribute","term","regex","list","some","search","calculateList","files","callbackName","isReject","attr","formattedFiles","formattedList","filter","filterList","mapList","HighLevelFilters","GENERAL_FILTERS_HANDLER","_formatInputToList","match","reject","nope","ADDITIONAL_FORMATTING","github","gitlab","default","convertAndSumContributors","contributors","gitToProviderUser","Object","keys","reduce","acc","gitAuthor","score","convertContributorsAndBlame","repo","blame","git_to_provider_user","sumAuthorMetrics","authorMetric","numOfFiles","author","sumByAuthor","values","aa","precent","totalPercent","calculateSumByAuthor","sortObject","data","object","sort","a","b","validateAndCompare","authorMetrics","gt","lt","authors","undefined","compareThan","isGtLtArgsValid","getETR","request","_context","axios","post","headers","Content-type","numericValue","getExpertReviewer","_context2","filterExpertResult","filterBy","thresholdData","user","contributor","parseExpertReviewerThreshold","getAndFilterExpertReviewer","_context3","data_service","_repo$data_service","expert_reviwer_request","dataWithoutIssuer","isIssuerFiltered","pr_author","explainExpertReviewerComment","expertReviewers","activeUsers","knowledgeUsers","threshold","provider","isNoUserButYou","comment","join","explainActivityAndBlameComment","activity","knowledge","activityUsers","forEach","monthsComment","months","index","push","moment","subtract","format","month","user1Value","user2Value","_activity$file$activi","additions","deletions","explainActivityByMonth","explainActivityTable","knowledgeText","explainKnowledgeSection","error","console","log","getExplainActivity","userActivity","au","activityData","ac","date","_date$split","parseActivityByUserDataForExplain","parseActivityByUserForExplain","getExplainKnowledge","userKnowledge","Math","round","estimatedReviewTime","branch","callback","diff","_branch$diff","files_metadata","_branch$diff$files_me","_branch$diff2","additionalLines","deletedLines","prFiles","_branch$diff3","fileMetadata","file_path","new_file","original_file","reqBody","prMetadata","commits","num_of_commits","lines","prAdditionalLines","prDeletedLines","baseBranch","base","request_source","parseExpertReviewer","_ref2$gt","expertReviewer","parseExplainCodeExpertHandler","_yield$getAndFilterEx2","explainActivity","explain","_data$explain","explainKnowledge","_data$explain2","explainComment","Array","from","Set","base64Comment","Buffer","toString","parseCodeExperts","codeExperts","_ref5$gt","_context4","parseExplainExpertReviewer","explainExpertReviewer","_context5","parseExplainCodeExperts","explainCodeExperts","_context6","minify","text","replaceAll","trim","jsFormatter","content","prettier","semi","singleQuote","filepath","SUPPORTED_FORMATTERS","js","ts","html","py","spawnSync","JSON","stringify","stdout","fileExtension","pop","_","get","formatter","SONAR_REGEX","getSonarPropertyRating","str","rawRating","_str$match","lastIndexOf","indexOf","getSonarPropertyCount","row","isFloat","count","parseFloat","parseInt","isNaN","parseSonarParser","pr","sonarParser","sonarObject","bugs","rating","code_smells","vulnerabilities","security_hotspots","duplications","coverage","sonarComment","comments","commenter","sonarCommentArray","parseJitReview","review","parsedReview","initEmptyJitObject","conversations","conversation","security_control","_lines$","_lines$$split$","type","_lines$2","_lines$2$split$","description","_lines$3","_lines$3$split$","severity","_lines$4","_lines$4$split$","summary","_lines$5","_lines$5$split$","metrics","HIGH","MEDIUM","LOW","INFO","extractJitFindings","jitComments","reviews","extractJitCommentsFromPR","jitObject","isEmpty","parsedReviews","mergeWith","unifyReviews","parseFilterAllExtensions","extensions","searchArray","filePath","x","parseFilterAllFilePath","parseRankByGitBlame","rankByGitBlame","blameByAuthor","comparedResult","Filters","FILTERED_OUT_LIST","allDocs","FILTERS_EXTENSION_LIST","allImages","allTests","HIGH_LEVEL_FILTERS_HANDLER","excludedFile","parseFilterAllTests","array","isFormattingChange","original_content","new_content","e","matchDiffLines","ignoreWhiteSpaces","diffLinesRegex","emptyLinesRegex","diffRow","flat","isFirstCommit","rankByGitActivity","weeks","weeksArr","fill","i","totalsPerFile","totalPerFile","linesPerWeek","week","calculateActivityPerFile","git_activity","fileSumPerAuthor","calcPercent","acAuthor","arrSum","total","toFixed","calculateFileSumPerAuthorActivity","activityByAuthor","convertContributors","explainRankByGitBlame","parseResult","authorFilteredParseResult","authorFilteredParseResultString","formattedBlameContext","formattedValues","accAuthor","formatGitAuthor","formattedValue","floor","convertBlameContextToExplain","argsTemplate","numOfPRFiles","parserResultTemplate","suggestedReviewersComment","isGitUser","result","explainBlameTemplate","mapToEnum","key","enumArgs","extractSonarFindings","jitFilter","ASYNC","DefaultParserAttributes","FILTER_HANDLERS","filterListRegex","re","isEveryInListRegex","isSomeInList","searchTerms","isSomeInListRegex","isStringIncludes","terms","isStringIncludesRegex","isEveryInList","extractExtensions","isEveryExtension","isEveryExtensionRegex","filterFileDiffRegex","filterRegex","isEveryLineInFileDiffRegex","isSomeLineInFileDiffRegex","allExtensions","allPassRegex","allPathIncludes","includesRegex","allFormattingChange","formattedNew","formattedOld","ruleFileContent","context","debugMode","this","isDebug","env","nunjucks","__dirname","autoescape","allFilters","_this","addFilter","ruleFileRawContent","ruleFile","render","renderedRuleFile","reRenders","currentContext","_loop","dataAsString","_this2","Promise","resolve","renderString","err","res","PACKAGE_NAME","yaml","errors","validateRun","runs","run","newArgs","arg","argValue","combineMetadataWithRulesResult","resourceName","resource","rules","_this3","passed","pass","if","combineMetadataWithResult","lastParserResult","automations","analytics","parseStreams"],"mappings":"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"}